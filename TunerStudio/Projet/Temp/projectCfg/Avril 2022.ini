;-------------------------------------------------------------------------------
#unset CAN_COMMANDS
#unset enablehardware_test
#set NEW_COMMS

[MegaTune]
   MTversion      = 2.25

   queryCommand   = "Q"
   signature      = "speeduino 202204-1"
   versionInfo    = "S" ;This info is what is displayed to user

[TunerStudio]
   iniSpecVersion = 3.64

;-------------------------------------------------------------------------------

[SettingGroups]
   ; the referenceName will over-ride previous, so if you are creating a
   ; settingGroup with a reference name of lambdaSensor, it will replace the
   ; setting group defined in the settingGroups.xml of the TunerStudio config
   ; folder. If is is an undefined referenceName, it will be added.
   ; keyword    =  referenceName,  DisplayName

    ;settingGroup = boostUnits, "Boost table units"
    ;settingOption = DEFAULT, "kPa"
    ;settingOption = BOOSTPSI, "PSI"
    settingGroup = enablehardware_test, "Activation test de Sorties"

    settingGroup = resetcontrol_group, "Control des option de Reset"
    settingOption = resetcontrol_standard, "Options Basique Seulement"
    settingOption = resetcontrol_adv, "Options Avancees"
	
	settingGroup  = mcu, "Controller in use"
    settingOption = DEFAULT, "Arm Mega 2560"
    settingOption = mcu_teensy, "Teensy"
    settingOption = mcu_stm32, "STM32"

    settingGroup = NEW_COMMS, "Use new comms protocol"

[PcVariables]
   ; valid types: boolean, double, int, list
   ;
   ; no offset as they are local variables.
   ; entry format the same as Constants, except there is no offset.
   ; arrays are not yet supported.
   ; name = class,  type,    shape,  units,       scale, translate,    lo,      hi, digits
   ; name = type, min, max;
   ;
   ; type List: value will be index.
    tsCanId          = bits,     U08,   [0:3], "CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","INVALID"
    rpmhigh = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    rpmwarn = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    rpmdang = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    maphigh = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
    mapwarn = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
    mapdang = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
	batlow  = scalar,   U08,    "Volts",  .1, 0, 0, 25.5,   1
    bathigh = scalar,   U08,    "Volts",  .1, 0, 0, 25.5,   1

#if LAMBDA
    wueAFR = array, S16,  [10], "Lambda", { 0.1 / stoich }, 0.000, -0.300, 0.300, 3
#else
    wueAFR = array, S16,  [10], "AFR", 0.1,   0.0, -4.0, 4.0, 1
#endif
    wueRecommended = array, U08,  [10], "%", 1.0,  0.0, 100, 255.0, 0

    idleUnits = bits,   U08,    [0:2], "None", "On/Off", "Duty Cycle", "Duty Cycle", "Steps", "Steps", "Duty Cycle", "Duty Cycle"

    boardFuelOutputs  = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave
    boardIgnOutputs   = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave
    boardHasRTC       = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave
	
 ;These are used for padding out bits variables
    #define invalid_x8      = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define invalid_x16     = $invalid_x8,  $invalid_x8
    #define invalid_x24     = $invalid_x16, $invalid_x8
    #define invalid_x32     = $invalid_x16, $invalid_x16
    #define invalid_x64     = $invalid_x32, $invalid_x32
    #define invalid_x128    = $invalid_x64, $invalid_x64

    #define loadSourceNames = "MAP", "TPS", "IMAP/EMAP", "INVALID",   "INVALID", "INVALID", "INVALID", "INVALID"
    #define loadSourceUnits = "kPa",           "% TPS",   "%",         "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    algorithmNames = bits,    U08,   [0:2], $loadSourceNames
    ;algorithmUnits = bits,    U08,   [0:2], $loadSourceUnits
    algorithmUnits = bits,    U08,   [0:2], "kPa",           "% TPS",   "%",         "% TPS", "INVALID", "INVALID", "INVALID", "INVALID"
    algorithmLimits= array,   U16,   [8],   "", 1.0, 0, 0, 511, 0, noMsqSave
    fuel2SwitchUnits = bits,    U08,   [0:2], "rpm", "kPa",          "% TPS",   "%",         "% TPS", "INVALID", "INVALID", "INVALID"
    #define all_IO_Pins     = "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
    #define IO_Pins_no_def  = "INVALID", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
    #define bitwise_def     = "Desactive",  "AND",  "OR",  "XOR"
    #define comparator_def  = "== (equal)",  "!= (different)",  "> (greater)",  ">= (greater/equal)",  "< (smaller)",  "<= (smaller/equal)",  "& (and)",  "^ (xor)"
    #define comp_IO_Pins_0  = "Desactive", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
    #define comp_IO_Pins_1  = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define comp_IO_Pins_2  = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define comp_IO_Pins_3  = "Virtual", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", $invalid_x64, $invalid_x32, $invalid_x16, $invalid_x8

    #define comp_IO_Pins    = $comp_IO_Pins_0, $comp_IO_Pins_1, $comp_IO_Pins_2, $comp_IO_Pins_3

    ;All definitions of splited fullStatus should keep 32 options
    #define fullStatus_def_1= "seconds", "status bits", "Engine status", "syncLossCounter", "MAP (Kpa)", "INVALID", "IAT / MAT", "coolant",  "batCorrection", "battery voltage x10", "O2", "egoCorrection", "iatCorrection", "wueCorrection", "RPM", "INVALID", "AEamount/2", "GammaE", "INVALID", "VE1", "VE2", "AFR Target", "TPS DOT", "Advance", "TPS", "loopsPerSecond", "INVALID", "free RAM", "INVALID", "boostTarget/2", "Boost duty", "spark bits"
    #define fullStatus_def_2= "RPM DOT", "INVALID", "ethanolPct", "flexCorrection", "flexIgnCorrection", "idle Load", "testOutputs", "O2_2", "baro", "Aux in 0", "INVALID", "Aux in 1", "INVALID", "Aux in 2", "INVALID", "Aux in 3", "INVALID", "Aux in 4", "INVALID", "Aux in 5", "INVALID", "Aux in 6", "INVALID", "Aux in 7", "INVALID", "Aux in 8", "INVALID", "Aux in 9", "INVALID", "Aux in 10", "INVALID", "Aux in 11"
    #define fullStatus_def_3= "INVALID", "INVALID", "TPS2ADC", "TPS2", "ETBLoad", "ETBpos1ADC", "ETBpos2ADC", "ETBpos1", "ETBpos2", "TPS ADC", "Error code", "Pulsewidth 1", "INVALID", "Pulsewidth 2", "INVALID", "Pulsewidth 3", "INVALID", "Pulsewidth 4", "INVALID", "status bits 3", "engineProtectStatus", "Fuel load", "INVALID", "Ignition load", "INVALID", "dwell", "INVALID", "idle C.L. target", "MAP DOT", "VVT1 Angle", "INVALID", "VVT1 Target"
    #define fullStatus_def_4= "VVT1 duty", "flexBoostCorrection", "INVALID", "baro correction", "Current VE", "ASE Value", "vss", "INVALID", "Gear", "Fuel Pressure", "Oil Pressure", "WMI duty", "WMI empty", "VVT2 angle", "INVALID", "VVT2 target", "VVT2 duty", "outputs status", "Fuel temp", "Fuel temp correction", "Advance 1", "Advance 2", "SD status", "INVALID", "EMAP", "INVALID", "INVALID", "INVALID", "fanDuty", "HALDEX", "EGT"
    #define fullStatus_def_5= "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define fullStatus_def_6= "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define fullStatus_def_7= "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    ;Rules start at index 240
    #define fullStatus_def_8= "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "running seconds x10", "Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Rule 7", "Rule 8", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define fullStatus_def  = $fullStatus_def_1, $fullStatus_def_2, $fullStatus_def_3, $fullStatus_def_4, $fullStatus_def_5, $fullStatus_def_6, $fullStatus_def_7, $fullStatus_def_8
   
   #define pinLayouts      = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "01-05 MX5 PNP", "INVALID", "96-97 MX5 PNP", "NA6 MX5 PNP", "Turtana PCB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "ATMEL PnP ETB", "INVALID", "ATMEL PnP non ETB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "DIY-EFI CORE4 v1.0", "INVALID", "INVALID", "INVALID", "INVALID", "Teensy RevA", "Teensy RevB", "INVALID", "INVALID", "INVALID", "Teensy PNP", "INVALID", "INVALID", "INVALID", "INVALID", "ARM STM32 ETB", "INVALID", "INVALID", "ARM STM32 non ETB", $invalid_x128, $invalid_x64

    boostTableLabels    = bits,    U08,   [0:1], "Duty Cycle %", "kPa"
    boostByGearLabels   = bits,    U08,   [0:1], "", "%", "Limit", ""
    prgm_out_selection  = bits,    U08,   [0:2], "1", "2", "3", "4", "5", "6", "7", "8"

    fuelLoadMax     = scalar, U08, "", 1, 0, 0, 511, 0
    ignLoadMax      = scalar, U08, "", 1, 0, 0, 511, 0
    fuel2LoadMax    = scalar, U08, "", 1, 0, 0, 511, 0
    ign2LoadMax     = scalar, U08, "", 1, 0, 0, 511, 0
    AUXin00Alias    = string, ASCII, 20
    AUXin01Alias    = string, ASCII, 20 
    AUXin02Alias    = string, ASCII, 20 
    AUXin03Alias    = string, ASCII, 20 
    AUXin04Alias    = string, ASCII, 20 
    AUXin05Alias    = string, ASCII, 20 
    AUXin06Alias    = string, ASCII, 20 
    AUXin07Alias    = string, ASCII, 20 
    AUXin08Alias    = string, ASCII, 20 
    AUXin09Alias    = string, ASCII, 20 
    AUXin10Alias    = string, ASCII, 20 
    AUXin11Alias    = string, ASCII, 20 
    AUXin12Alias    = string, ASCII, 20 
    AUXin13Alias    = string, ASCII, 20 
    AUXin14Alias    = string, ASCII, 20 
    AUXin15Alias    = string, ASCII, 20

    prgm_out00Alias  = string, ASCII, 20
    prgm_out01Alias  = string, ASCII, 20 
    prgm_out02Alias  = string, ASCII, 20 
    prgm_out03Alias  = string, ASCII, 20 
    prgm_out04Alias  = string, ASCII, 20 
    prgm_out05Alias  = string, ASCII, 20 
    prgm_out06Alias  = string, ASCII, 20 
    prgm_out07Alias  = string, ASCII, 20 

    ;Define aliases for all the triggers. Naming pattern matches that used in decoders.ino
    #define trigger_missingTooth        = 0
    #define trigger_BasicDistributor    = 1
    #define trigger_DualWheel           = 2
    #define trigger_GM7X                = 3
    #define trigger_4G63                = 4
    #define trigger_24X                 = 5
    #define trigger_Jeep2000            = 6
    #define trigger_Audi135             = 7
    #define trigger_HondaD17            = 8
    #define trigger_Miata9905           = 9
    #define trigger_MazdaAU             = 10
    #define trigger_non360              = 11
    #define trigger_Nissan360           = 12
    #define trigger_Subaru67            = 13
    #define trigger_Daihatsu            = 14
    #define trigger_Harley              = 15
    #define trigger_ThirtySixMinus222   = 16
    #define trigger_ThirtySixMinus21    = 17
    #define trigger_420a                = 18
    #define trigger_Webber              = 19
    #define trigger_FordST170           = 20
    #define trigger_DRZ400              = 21
	#define trigger_NGC                 = 22
	#define trigger_RENIX44             = 23
	#define trigger_RENIX66             = 24
	#define trigger_VMAX                = 25

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Temperatures are fine, check out the Fielding IAC example (fastIdleT).
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is layed
   ; out like.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ; If you specify a label as "INVALID" (all upper case), then it will
   ; not be displayed in the combo box, so you can leave out values that
   ; make no sense.
   ;
   ;----------------------------------------------------------------------------
    endianness          = little
    nPages              = 14
    pageSize            = 128,   288,     288,    128,     288,    128,    240,     384,    242,    192,    288,    192,    128,    288

    ; New commands
    pageIdentifier      = "\$tsCanId\x01", "\$tsCanId\x02", "\$tsCanId\x03", "\$tsCanId\x04", "\$tsCanId\x05", "\$tsCanId\x06", "\$tsCanId\x07", "\$tsCanId\x08", "\$tsCanId\x09", "\$tsCanId\x0A", "\$tsCanId\x0B", "\$tsCanId\x0C", "\$tsCanId\x0D", "\$tsCanId\x0E"
    burnCommand         = "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i"
    pageReadCommand     = "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c"
    pageValueWrite      = "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v"
    pageChunkWrite      = "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v"
    crc32CheckCommand   = "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i"
	   
#if mcu_stm32
    blockingFactor = 121
#else
    blockingFactor = 251 ; Serial buffer is 257 bytes and there are 6 bytes of overhead (2 for the size and 4 for the CRC). Total paload is therefore 257-6=251.
#endif
    tableBlockingFactor = 244 ; Serial buffer is 257 bytes. There are 7 bytes overhead for the M command + 2 bytes for the size + 4 bytes for the CRC. 257 - 7 - 2 - 4 = 244 bytes.
    delayAfterPortOpen=1000
    ;validateArrayBounds = true
    blockReadTimeout = 2000
    tsWriteBlocks = on
    interWriteDelay = 10 ;Ignored when tsWriteBlocks is on
    pageActivationDelay = 10
    restrictSquirtRelationship = false ;This requires TS 3.1 or above
#if NEW_COMMS
    messageEnvelopeFormat = msEnvelope_1.0 ;New and testing only
	tableCrcCommand     = "k\$tsCanId%2i%2o%2c" ;TS can only use this command in new mode
#endif
    readSdCompressed = false

    ;New for TS 3.0.08ish upwards, define lists of standard I/O options

    #define PIN_OUT10inv = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define PIN_OUT16inv = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define PIN_16inv = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
  
    #define ANALOG_PIN = "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", $PIN_16inv, $PIN_16inv, $PIN_16inv
    #define DIGITAL_PIN = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define ANALOG_DIG_PIN_LIST = $DIGITAL_PIN, $ANALOG_PIN
    #define tsCanId_list          = "CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","INVALID"
    #define CAN_ADDRESS_HEX_inv255 = $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT16inv, $PIN_OUT10inv, "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define CAN_ADDRESS_HEX_00XX = "INVALID", "0x001", "0x002", "0x003", "0x004", "0x005", "0x006", "0x007", "0x008", "0x009", "0x00A", "0x00B", "0x00C", "0x00D", "0x00E", "0x00F", "0x010", "0x011", "0x012", "0x013", "0x014", "0x015", "0x016", "0x017", "0x018", "0x019", "0x01A", "0x01B", "0x01C", "0x01D", "0x01E", "0x01F", "0x020", "0x021", "0x022", "0x023", "0x024", "0x025", "0x026", "0x027", "0x028", "0x029", "0x02A", "0x02B", "0x02C", "0x02D", "0x02E", "0x02F", "0x030", "0x031", "0x032", "0x033", "0x034", "0x035", "0x036", "0x037", "0x038", "0x039", "0x03A", "0x03B", "0x03C", "0x03D", "0x03E", "0x03F", "0x040", "0x041", "0x042", "0x043", "0x044", "0x045", "0x046", "0x047", "0x048", "0x049", "0x04A", "0x04B", "0x04C", "0x04D", "0x04E", "0x04F", "0x050", "0x051", "0x052", "0x053", "0x054", "0x055", "0x056", "0x057", "0x058", "0x059", "0x05A", "0x05B", "0x05C", "0x05D", "0x05E", "0x05F" ,"0x060", "0x061", "0x062", "0x063", "0x064", "0x065", "0x066", "0x067", "0x068", "0x069", "0x06A", "0x06B", "0x06C", "0x06D", "0x06E", "0x06F", "0x070", "0x071", "0x072", "0x073", "0x074", "0x075", "0x076", "0x077", "0x078", "0x079", "0x07A", "0x07B", "0x07C", "0x07D", "0x07E", "0x07F", "0x080", "0x081", "0x082", "0x083", "0x084", "0x085", "0x086", "0x087", "0x088", "0x089", "0x08A", "0x08B", "0x08C", "0x08D", "0x08E", "0x08F" ,"0x090", "0x091", "0x092", "0x093", "0x094", "0x095", "0x096", "0x097", "0x098", "0x099", "0x09A", "0x09B", "0x09C", "0x09D", "0x09E", "0x09F", "0x0A0", "0x0A1", "0x0A2", "0x0A3", "0x0A4", "0x0A5", "0x0A6", "0x0A7", "0x0A8", "0x0A9", "0x0AA", "0x0AB", "0x0AC", "0x0AD", "0x0AE", "0x0AF", "0x0B0", "0x0B1", "0x0B2", "0x0B3", "0x0B4", "0x0B5", "0x0B6", "0x0B7", "0x0B8", "0x0B9", "0x0BA", "0x0BB", "0x0BC", "0x0BD", "0x0BE", "0x0BF" ,"0x0C0", "0x0C1", "0x0C2", "0x0C3", "0x0C4", "0x0C5", "0x0C6", "0x0C7", "0x0C8", "0x0C9", "0x0CA", "0x0CB", "0x0CC", "0x0CD", "0x0CE", "0x0CF", "0x0D0", "0x0D1", "0x0D2", "0x0D3", "0x0D4", "0x0D5", "0x0D6", "0x0D7", "0x0D8", "0x0D9", "0x0DA", "0x0DB", "0x0DC", "0x0DD", "0x0DE", "0x0DF", "0x0E0", "0x0E1", "0x0E2", "0x0E3", "0x0E4", "0x0E5", "0x0E6", "0x0E7", "0x0E8", "0x0E9", "0x0EA", "0x0EB", "0x0EC", "0x0ED", "0x0EE", "0x0EF" ,"0x0F0", "0x0F1", "0x0F2", "0x0F3", "0x0F4", "0x0F5", "0x0F6", "0x0F7", "0x0F8", "0x0F9", "0x0FA", "0x0FB", "0x0FC", "0x0FD", "0x0FE", "0x0FF"
    #define CAN_ADDRESS_HEX_01XX = "0x100", "0x101", "0x102", "0x103", "0x104", "0x105", "0x106", "0x107", "0x108", "0x109", "0x10A", "0x10B", "0x10C", "0x10D", "0x10E", "0x10F", "0x110", "0x111", "0x112", "0x113", "0x114", "0x115", "0x116", "0x117", "0x118", "0x119", "0x11A", "0x11B", "0x11C", "0x11D", "0x11E", "0x11F", "0x120", "0x121", "0x122", "0x123", "0x124", "0x125", "0x126", "0x127", "0x128", "0x129", "0x12A", "0x12B", "0x12C", "0x12D", "0x12E", "0x12F", "0x130", "0x131", "0x132", "0x133", "0x134", "0x135", "0x136", "0x137", "0x138", "0x139", "0x13A", "0x13B", "0x13C", "0x13D", "0x13E", "0x13F", "0x140", "0x141", "0x142", "0x143", "0x144", "0x145", "0x146", "0x147", "0x148", "0x149", "0x14A", "0x14B", "0x14C", "0x14D", "0x14E", "0x14F", "0x150", "0x151", "0x152", "0x153", "0x154", "0x155", "0x156", "0x157", "0x158", "0x159", "0x15A", "0x15B", "0x15C", "0x15D", "0x15E", "0x15F" ,"0x160", "0x161", "0x162", "0x163", "0x164", "0x165", "0x166", "0x167", "0x168", "0x169", "0x16A", "0x16B", "0x16C", "0x16D", "0x16E", "0x16F", "0x170", "0x171", "0x172", "0x173", "0x174", "0x175", "0x176", "0x177", "0x178", "0x179", "0x17A", "0x17B", "0x17C", "0x17D", "0x17E", "0x17F", "0x180", "0x181", "0x182", "0x183", "0x184", "0x185", "0x186", "0x187", "0x188", "0x189", "0x18A", "0x18B", "0x18C", "0x18D", "0x18E", "0x18F" ,"0x190", "0x191", "0x192", "0x193", "0x194", "0x195", "0x196", "0x197", "0x198", "0x199", "0x19A", "0x19B", "0x19C", "0x19D", "0x19E", "0x19F", "0x1A0", "0x1A1", "0x1A2", "0x1A3", "0x1A4", "0x1A5", "0x1A6", "0x1A7", "0x1A8", "0x1A9", "0x1AA", "0x1AB", "0x1AC", "0x1AD", "0x1AE", "0x1AF", "0x1B0", "0x1B1", "0x1B2", "0x1B3", "0x1B4", "0x1B5", "0x1B6", "0x1B7", "0x1B8", "0x1B9", "0x1BA", "0x1BB", "0x1BC", "0x1BD", "0x1BE", "0x1BF" ,"0x1C0", "0x1C1", "0x1C2", "0x1C3", "0x1C4", "0x1C5", "0x1C6", "0x1C7", "0x1C8", "0x1C9", "0x1CA", "0x1CB", "0x1CC", "0x1CD", "0x1CE", "0x1CF", "0x1D0", "0x1D1", "0x1D2", "0x1D3", "0x1D4", "0x1D5", "0x1D6", "0x1D7", "0x1D8", "0x1D9", "0x1DA", "0x1DB", "0x1DC", "0x1DD", "0x1DE", "0x1DF", "0x1E0", "0x1E1", "0x1E2", "0x1E3", "0x1E4", "0x1E5", "0x1E6", "0x1E7", "0x1E8", "0x1E9", "0x1EA", "0x1EB", "0x1EC", "0x1ED", "0x1EE", "0x1EF" ,"0x1F0", "0x1F1", "0x1F2", "0x1F3", "0x1F4", "0x1F5", "0x1F6", "0x1F7", "0x1F8", "0x1F9", "0x1FA", "0x1FB", "0x1FC", "0x1FD", "0x1FE", "0x1FF"
    #define CAN_ADDRESS_HEX_02XX = "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F", "0x210", "0x211", "0x212", "0x213", "0x214", "0x215", "0x216", "0x217", "0x218", "0x219", "0x21A", "0x21B", "0x21C", "0x21D", "0x21E", "0x21F", "0x220", "0x221", "0x222", "0x223", "0x224", "0x225", "0x226", "0x227", "0x228", "0x229", "0x22A", "0x22B", "0x22C", "0x22D", "0x22E", "0x22F", "0x230", "0x231", "0x232", "0x233", "0x234", "0x235", "0x236", "0x237", "0x238", "0x239", "0x23A", "0x23B", "0x23C", "0x23D", "0x23E", "0x23F", "0x240", "0x241", "0x242", "0x243", "0x244", "0x245", "0x246", "0x247", "0x248", "0x249", "0x24A", "0x24B", "0x24C", "0x24D", "0x24E", "0x24F", "0x250", "0x251", "0x252", "0x253", "0x254", "0x255", "0x256", "0x257", "0x258", "0x259", "0x25A", "0x25B", "0x25C", "0x25D", "0x25E", "0x25F" ,"0x260", "0x261", "0x262", "0x263", "0x264", "0x265", "0x266", "0x267", "0x268", "0x269", "0x26A", "0x26B", "0x26C", "0x26D", "0x26E", "0x26F", "0x270", "0x271", "0x272", "0x273", "0x274", "0x275", "0x276", "0x277", "0x278", "0x279", "0x27A", "0x27B", "0x27C", "0x27D", "0x27E", "0x27F", "0x280", "0x281", "0x282", "0x283", "0x284", "0x285", "0x286", "0x287", "0x288", "0x289", "0x28A", "0x28B", "0x28C", "0x28D", "0x28E", "0x28F" ,"0x290", "0x291", "0x292", "0x293", "0x294", "0x295", "0x296", "0x297", "0x298", "0x299", "0x29A", "0x29B", "0x29C", "0x29D", "0x29E", "0x29F", "0x2A0", "0x2A1", "0x2A2", "0x2A3", "0x2A4", "0x2A5", "0x2A6", "0x2A7", "0x2A8", "0x2A9", "0x2AA", "0x2AB", "0x2AC", "0x2AD", "0x2AE", "0x2AF", "0x2B0", "0x2B1", "0x2B2", "0x2B3", "0x2B4", "0x2B5", "0x2B6", "0x2B7", "0x2B8", "0x2B9", "0x2BA", "0x2BB", "0x2BC", "0x2BD", "0x2BE", "0x2BF" ,"0x2C0", "0x2C1", "0x2C2", "0x2C3", "0x2C4", "0x2C5", "0x2C6", "0x2C7", "0x2C8", "0x2C9", "0x2CA", "0x2CB", "0x2CC", "0x2CD", "0x2CE", "0x2CF", "0x2D0", "0x2D1", "0x2D2", "0x2D3", "0x2D4", "0x2D5", "0x2D6", "0x2D7", "0x2D8", "0x2D9", "0x2DA", "0x2DB", "0x2DC", "0x2DD", "0x2DE", "0x2DF", "0x2E0", "0x2E1", "0x2E2", "0x2E3", "0x2E4", "0x2E5", "0x2E6", "0x2E7", "0x2E8", "0x2E9", "0x2EA", "0x2EB", "0x2EC", "0x2ED", "0x2EE", "0x2EF" ,"0x2F0", "0x2F1", "0x2F2", "0x2F3", "0x2F4", "0x2F5", "0x2F6", "0x2F7", "0x2F8", "0x2F9", "0x2FA", "0x2FB", "0x2FC", "0x2FD", "0x2FE", "0x2FF"
    #define CAN_ADDRESS_HEX_03XX = "0x300", "0x301", "0x302", "0x303", "0x304", "0x305", "0x306", "0x307", "0x308", "0x309", "0x30A", "0x30B", "0x30C", "0x30D", "0x30E", "0x30F", "0x310", "0x311", "0x312", "0x313", "0x314", "0x315", "0x316", "0x317", "0x318", "0x319", "0x31A", "0x31B", "0x31C", "0x31D", "0x31E", "0x31F", "0x320", "0x321", "0x322", "0x323", "0x324", "0x325", "0x326", "0x327", "0x328", "0x329", "0x32A", "0x32B", "0x32C", "0x32D", "0x32E", "0x32F", "0x330", "0x331", "0x332", "0x333", "0x334", "0x335", "0x336", "0x337", "0x338", "0x339", "0x33A", "0x33B", "0x33C", "0x33D", "0x33E", "0x33F", "0x340", "0x341", "0x342", "0x343", "0x344", "0x345", "0x346", "0x347", "0x348", "0x349", "0x34A", "0x34B", "0x34C", "0x34D", "0x34E", "0x34F", "0x350", "0x351", "0x352", "0x353", "0x354", "0x355", "0x356", "0x357", "0x358", "0x359", "0x35A", "0x35B", "0x35C", "0x35D", "0x35E", "0x35F" ,"0x360", "0x361", "0x362", "0x363", "0x364", "0x365", "0x366", "0x367", "0x368", "0x369", "0x36A", "0x36B", "0x36C", "0x36D", "0x36E", "0x36F", "0x370", "0x371", "0x372", "0x373", "0x374", "0x375", "0x376", "0x377", "0x378", "0x379", "0x37A", "0x37B", "0x37C", "0x37D", "0x37E", "0x37F", "0x380", "0x381", "0x382", "0x383", "0x384", "0x385", "0x386", "0x387", "0x388", "0x389", "0x38A", "0x38B", "0x38C", "0x38D", "0x38E", "0x38F" ,"0x390", "0x391", "0x392", "0x393", "0x394", "0x395", "0x396", "0x397", "0x398", "0x399", "0x39A", "0x39B", "0x39C", "0x39D", "0x39E", "0x39F", "0x3A0", "0x3A1", "0x3A2", "0x3A3", "0x3A4", "0x3A5", "0x3A6", "0x3A7", "0x3A8", "0x3A9", "0x3AA", "0x3AB", "0x3AC", "0x3AD", "0x3AE", "0x3AF", "0x3B0", "0x3B1", "0x3B2", "0x3B3", "0x3B4", "0x3B5", "0x3B6", "0x3B7", "0x3B8", "0x3B9", "0x3BA", "0x3BB", "0x3BC", "0x3BD", "0x3BE", "0x3BF" ,"0x3C0", "0x3C1", "0x3C2", "0x3C3", "0x3C4", "0x3C5", "0x3C6", "0x3C7", "0x3C8", "0x3C9", "0x3CA", "0x3CB", "0x3CC", "0x3CD", "0x3CE", "0x3CF", "0x3D0", "0x3D1", "0x3D2", "0x3D3", "0x3D4", "0x3D5", "0x3D6", "0x3D7", "0x3D8", "0x3D9", "0x3DA", "0x3DB", "0x3DC", "0x3DD", "0x3DE", "0x3DF", "0x3E0", "0x3E1", "0x3E2", "0x3E3", "0x3E4", "0x3E5", "0x3E6", "0x3E7", "0x3E8", "0x3E9", "0x3EA", "0x3EB", "0x3EC", "0x3ED", "0x3EE", "0x3EF" ,"0x3F0", "0x3F1", "0x3F2", "0x3F3", "0x3F4", "0x3F5", "0x3F6", "0x3F7", "0x3F8", "0x3F9", "0x3FA", "0x3FB", "0x3FC", "0x3FD", "0x3FE", "0x3FF"
    #define CAN_ADDRESS_HEX_04XX = "0x400", "0x401", "0x402", "0x403", "0x404", "0x405", "0x406", "0x407", "0x408", "0x409", "0x40A", "0x40B", "0x40C", "0x40D", "0x40E", "0x40F", "0x410", "0x411", "0x412", "0x413", "0x414", "0x415", "0x416", "0x417", "0x418", "0x419", "0x41A", "0x41B", "0x41C", "0x41D", "0x41E", "0x41F", "0x420", "0x421", "0x422", "0x423", "0x424", "0x425", "0x426", "0x427", "0x428", "0x429", "0x42A", "0x42B", "0x42C", "0x42D", "0x42E", "0x42F", "0x430", "0x431", "0x432", "0x433", "0x434", "0x435", "0x436", "0x437", "0x438", "0x439", "0x43A", "0x43B", "0x43C", "0x43D", "0x43E", "0x43F", "0x440", "0x441", "0x442", "0x443", "0x444", "0x445", "0x446", "0x447", "0x448", "0x449", "0x44A", "0x44B", "0x44C", "0x44D", "0x44E", "0x44F", "0x450", "0x451", "0x452", "0x453", "0x454", "0x455", "0x456", "0x457", "0x458", "0x459", "0x45A", "0x45B", "0x45C", "0x45D", "0x45E", "0x45F" ,"0x460", "0x461", "0x462", "0x463", "0x464", "0x465", "0x466", "0x467", "0x468", "0x469", "0x46A", "0x46B", "0x46C", "0x46D", "0x46E", "0x46F", "0x470", "0x471", "0x472", "0x473", "0x474", "0x475", "0x476", "0x477", "0x478", "0x479", "0x47A", "0x47B", "0x47C", "0x47D", "0x47E", "0x47F", "0x480", "0x481", "0x482", "0x483", "0x484", "0x485", "0x486", "0x487", "0x488", "0x489", "0x48A", "0x48B", "0x48C", "0x48D", "0x48E", "0x48F" ,"0x490", "0x491", "0x492", "0x493", "0x494", "0x495", "0x496", "0x497", "0x498", "0x499", "0x49A", "0x49B", "0x49C", "0x49D", "0x49E", "0x49F", "0x4A0", "0x4A1", "0x4A2", "0x4A3", "0x4A4", "0x4A5", "0x4A6", "0x4A7", "0x4A8", "0x4A9", "0x4AA", "0x4AB", "0x4AC", "0x4AD", "0x4AE", "0x4AF", "0x4B0", "0x4B1", "0x4B2", "0x4B3", "0x4B4", "0x4B5", "0x4B6", "0x4B7", "0x4B8", "0x4B9", "0x4BA", "0x4BB", "0x4BC", "0x4BD", "0x4BE", "0x4BF" ,"0x4C0", "0x4C1", "0x4C2", "0x4C3", "0x4C4", "0x4C5", "0x4C6", "0x4C7", "0x4C8", "0x4C9", "0x4CA", "0x4CB", "0x4CC", "0x4CD", "0x4CE", "0x4CF", "0x4D0", "0x4D1", "0x4D2", "0x4D3", "0x4D4", "0x4D5", "0x4D6", "0x4D7", "0x4D8", "0x4D9", "0x4DA", "0x4DB", "0x4DC", "0x4DD", "0x4DE", "0x4DF", "0x4E0", "0x4E1", "0x4E2", "0x4E3", "0x4E4", "0x4E5", "0x4E6", "0x4E7", "0x4E8", "0x4E9", "0x4EA", "0x4EB", "0x4EC", "0x4ED", "0x4EE", "0x4EF" ,"0x4F0", "0x4F1", "0x4F2", "0x4F3", "0x4F4", "0x4F5", "0x4F6", "0x4F7", "0x4F8", "0x4F9", "0x4FA", "0x4FB", "0x4FC", "0x4FD", "0x4FE", "0x4FF"
    #define CAN_ADDRESS_HEX_05XX = "0x500", "0x501", "0x502", "0x503", "0x504", "0x505", "0x506", "0x507", "0x508", "0x509", "0x50A", "0x50B", "0x50C", "0x50D", "0x50E", "0x50F", "0x510", "0x511", "0x512", "0x513", "0x514", "0x515", "0x516", "0x517", "0x518", "0x519", "0x51A", "0x51B", "0x51C", "0x51D", "0x51E", "0x51F", "0x520", "0x521", "0x522", "0x523", "0x524", "0x525", "0x526", "0x527", "0x528", "0x529", "0x52A", "0x52B", "0x52C", "0x52D", "0x52E", "0x52F", "0x530", "0x531", "0x532", "0x533", "0x534", "0x535", "0x536", "0x537", "0x538", "0x539", "0x53A", "0x53B", "0x53C", "0x53D", "0x53E", "0x53F", "0x540", "0x541", "0x542", "0x543", "0x544", "0x545", "0x546", "0x547", "0x548", "0x549", "0x54A", "0x54B", "0x54C", "0x54D", "0x54E", "0x54F", "0x550", "0x551", "0x552", "0x553", "0x554", "0x555", "0x556", "0x557", "0x558", "0x559", "0x55A", "0x55B", "0x55C", "0x55D", "0x55E", "0x55F" ,"0x560", "0x561", "0x562", "0x563", "0x564", "0x565", "0x566", "0x567", "0x568", "0x569", "0x56A", "0x56B", "0x56C", "0x56D", "0x56E", "0x56F", "0x570", "0x571", "0x572", "0x573", "0x574", "0x575", "0x576", "0x577", "0x578", "0x579", "0x57A", "0x57B", "0x57C", "0x57D", "0x57E", "0x57F", "0x580", "0x581", "0x582", "0x583", "0x584", "0x585", "0x586", "0x587", "0x588", "0x589", "0x58A", "0x58B", "0x58C", "0x58D", "0x58E", "0x58F" ,"0x590", "0x591", "0x592", "0x593", "0x594", "0x595", "0x596", "0x597", "0x598", "0x599", "0x59A", "0x59B", "0x59C", "0x59D", "0x59E", "0x59F", "0x5A0", "0x5A1", "0x5A2", "0x5A3", "0x5A4", "0x5A5", "0x5A6", "0x5A7", "0x5A8", "0x5A9", "0x5AA", "0x5AB", "0x5AC", "0x5AD", "0x5AE", "0x5AF", "0x5B0", "0x5B1", "0x5B2", "0x5B3", "0x5B4", "0x5B5", "0x5B6", "0x5B7", "0x5B8", "0x5B9", "0x5BA", "0x5BB", "0x5BC", "0x5BD", "0x5BE", "0x5BF" ,"0x5C0", "0x5C1", "0x5C2", "0x5C3", "0x5C4", "0x5C5", "0x5C6", "0x5C7", "0x5C8", "0x5C9", "0x5CA", "0x5CB", "0x5CC", "0x5CD", "0x5CE", "0x5CF", "0x5D0", "0x5D1", "0x5D2", "0x5D3", "0x5D4", "0x5D5", "0x5D6", "0x5D7", "0x5D8", "0x5D9", "0x5DA", "0x5DB", "0x5DC", "0x5DD", "0x5DE", "0x5DF", "0x5E0", "0x5E1", "0x5E2", "0x5E3", "0x5E4", "0x5E5", "0x5E6", "0x5E7", "0x5E8", "0x5E9", "0x5EA", "0x5EB", "0x5EC", "0x5ED", "0x5EE", "0x5EF" ,"0x5F0", "0x5F1", "0x5F2", "0x5F3", "0x5F4", "0x5F5", "0x5F6", "0x5F7", "0x5F8", "0x5F9", "0x5FA", "0x5FB", "0x5FC", "0x5FD", "0x5FE", "0x5FF"
    #define CAN_ADDRESS_HEX_06XX = "0x600", "0x601", "0x602", "0x603", "0x604", "0x605", "0x606", "0x607", "0x608", "0x609", "0x60A", "0x60B", "0x60C", "0x60D", "0x60E", "0x60F", "0x610", "0x611", "0x612", "0x613", "0x614", "0x615", "0x616", "0x617", "0x618", "0x619", "0x61A", "0x61B", "0x61C", "0x61D", "0x61E", "0x61F", "0x620", "0x621", "0x622", "0x623", "0x624", "0x625", "0x626", "0x627", "0x628", "0x629", "0x62A", "0x62B", "0x62C", "0x62D", "0x62E", "0x62F", "0x630", "0x631", "0x632", "0x633", "0x634", "0x635", "0x636", "0x637", "0x638", "0x639", "0x63A", "0x63B", "0x63C", "0x63D", "0x63E", "0x63F", "0x640", "0x641", "0x642", "0x643", "0x644", "0x645", "0x646", "0x647", "0x648", "0x649", "0x64A", "0x64B", "0x64C", "0x64D", "0x64E", "0x64F", "0x650", "0x651", "0x652", "0x653", "0x654", "0x655", "0x656", "0x657", "0x658", "0x659", "0x65A", "0x65B", "0x65C", "0x65D", "0x65E", "0x65F" ,"0x660", "0x661", "0x662", "0x663", "0x664", "0x665", "0x666", "0x667", "0x668", "0x669", "0x66A", "0x66B", "0x66C", "0x66D", "0x66E", "0x66F", "0x670", "0x671", "0x672", "0x673", "0x674", "0x675", "0x676", "0x677", "0x678", "0x679", "0x67A", "0x67B", "0x67C", "0x67D", "0x67E", "0x67F", "0x680", "0x681", "0x682", "0x683", "0x684", "0x685", "0x686", "0x687", "0x688", "0x689", "0x68A", "0x68B", "0x68C", "0x68D", "0x68E", "0x68F" ,"0x690", "0x691", "0x692", "0x693", "0x694", "0x695", "0x696", "0x697", "0x698", "0x699", "0x69A", "0x69B", "0x69C", "0x69D", "0x69E", "0x69F", "0x6A0", "0x6A1", "0x6A2", "0x6A3", "0x6A4", "0x6A5", "0x6A6", "0x6A7", "0x6A8", "0x6A9", "0x6AA", "0x6AB", "0x6AC", "0x6AD", "0x6AE", "0x6AF", "0x6B0", "0x6B1", "0x6B2", "0x6B3", "0x6B4", "0x6B5", "0x6B6", "0x6B7", "0x6B8", "0x6B9", "0x6BA", "0x6BB", "0x6BC", "0x6BD", "0x6BE", "0x6BF" ,"0x6C0", "0x6C1", "0x6C2", "0x6C3", "0x6C4", "0x6C5", "0x6C6", "0x6C7", "0x6C8", "0x6C9", "0x6CA", "0x6CB", "0x6CC", "0x6CD", "0x6CE", "0x6CF", "0x6D0", "0x6D1", "0x6D2", "0x6D3", "0x6D4", "0x6D5", "0x6D6", "0x6D7", "0x6D8", "0x6D9", "0x6DA", "0x6DB", "0x6DC", "0x6DD", "0x6DE", "0x6DF", "0x6E0", "0x6E1", "0x6E2", "0x6E3", "0x6E4", "0x6E5", "0x6E6", "0x6E7", "0x6E8", "0x6E9", "0x6EA", "0x6EB", "0x6EC", "0x6ED", "0x6EE", "0x6EF" ,"0x6F0", "0x6F1", "0x6F2", "0x6F3", "0x6F4", "0x6F5", "0x6F6", "0x6F7", "0x6F8", "0x6F9", "0x6FA", "0x6FB", "0x6FC", "0x6FD", "0x6FE", "0x6FF"
    #define CAN_ADDRESS_HEX_07XX = "0x700", "0x701", "0x702", "0x703", "0x704", "0x705", "0x706", "0x707", "0x708", "0x709", "0x70A", "0x70B", "0x70C", "0x70D", "0x70E", "0x70F", "0x710", "0x711", "0x712", "0x713", "0x714", "0x715", "0x716", "0x717", "0x718", "0x719", "0x71A", "0x71B", "0x71C", "0x71D", "0x71E", "0x71F", "0x720", "0x721", "0x722", "0x723", "0x724", "0x725", "0x726", "0x727", "0x728", "0x729", "0x72A", "0x72B", "0x72C", "0x72D", "0x72E", "0x72F", "0x730", "0x731", "0x732", "0x733", "0x734", "0x735", "0x736", "0x737", "0x738", "0x739", "0x73A", "0x73B", "0x73C", "0x73D", "0x73E", "0x73F", "0x740", "0x741", "0x742", "0x743", "0x744", "0x745", "0x746", "0x747", "0x748", "0x749", "0x74A", "0x74B", "0x74C", "0x74D", "0x74E", "0x74F", "0x750", "0x751", "0x752", "0x753", "0x754", "0x755", "0x756", "0x757", "0x758", "0x759", "0x75A", "0x75B", "0x75C", "0x75D", "0x75E", "0x75F" ,"0x760", "0x761", "0x762", "0x763", "0x764", "0x765", "0x766", "0x767", "0x768", "0x769", "0x76A", "0x76B", "0x76C", "0x76D", "0x76E", "0x76F", "0x770", "0x771", "0x772", "0x773", "0x774", "0x775", "0x776", "0x777", "0x778", "0x779", "0x77A", "0x77B", "0x77C", "0x77D", "0x77E", "0x77F", "0x780", "0x781", "0x782", "0x783", "0x784", "0x785", "0x786", "0x787", "0x788", "0x789", "0x78A", "0x78B", "0x78C", "0x78D", "0x78E", "0x78F" ,"0x790", "0x791", "0x792", "0x793", "0x794", "0x795", "0x796", "0x797", "0x798", "0x799", "0x79A", "0x79B", "0x79C", "0x79D", "0x79E", "0x79F", "0x7A0", "0x7A1", "0x7A2", "0x7A3", "0x7A4", "0x7A5", "0x7A6", "0x7A7", "0x7A8", "0x7A9", "0x7AA", "0x7AB", "0x7AC", "0x7AD", "0x7AE", "0x7AF", "0x7B0", "0x7B1", "0x7B2", "0x7B3", "0x7B4", "0x7B5", "0x7B6", "0x7B7", "0x7B8", "0x7B9", "0x7BA", "0x7BB", "0x7BC", "0x7BD", "0x7BE", "0x7BF" ,"0x7C0", "0x7C1", "0x7C2", "0x7C3", "0x7C4", "0x7C5", "0x7C6", "0x7C7", "0x7C8", "0x7C9", "0x7CA", "0x7CB", "0x7CC", "0x7CD", "0x7CE", "0x7CF", "0x7D0", "0x7D1", "0x7D2", "0x7D3", "0x7D4", "0x7D5", "0x7D6", "0x7D7", "0x7D8", "0x7D9", "0x7DA", "0x7DB", "0x7DC", "0x7DD", "0x7DE", "0x7DF", "0x7E0", "0x7E1", "0x7E2", "0x7E3", "0x7E4", "0x7E5", "0x7E6", "0x7E7", "0x7E8", "0x7E9", "0x7EA", "0x7EB", "0x7EC", "0x7ED", "0x7EE", "0x7EF" ,"0x7F0", "0x7F1", "0x7F2", "0x7F3", "0x7F4", "0x7F5", "0x7F6", "0x7F7", "0x7F8", "0x7F9", "0x7FA", "0x7FB", "0x7FC", "0x7FD", "0x7FE", "0x7FF"
    #define CAN_ADDRESS_HEX =  $CAN_ADDRESS_HEX_01XX, $CAN_ADDRESS_HEX_02XX, $CAN_ADDRESS_HEX_03XX, $CAN_ADDRESS_HEX_04XX, $CAN_ADDRESS_HEX_05XX, $CAN_ADDRESS_HEX_06XX, $CAN_ADDRESS_HEX_07XX, $CAN_ADDRESS_HEX_inv255




;--------------------------------------------------
;Start Page 1
;Page 1 is all general settings. Note that some of these (algorithm and ignAlgorithm) MUST come before their use in the bitStringValue() calls in the fuel and ignition tables
;--------------------------------------------------
page = 1
      aseTaperTime   = scalar, U08,       0,         "S",        0.1,       0.0,   0.0,    25.5,      1
      aeColdPct     = scalar, U08,       1,         "%",      1.0,       0,   100,    255,       0 ;AE cold adjustment %
#if CELSIUS
      aeColdTaperMin = scalar, U08,       2,       "C", 1.0,       -40,    -40,    215,      0     ;AE cold adjustment, taper start clt (full adjustment)
#else
      aeColdTaperMin = scalar, U08,       2,       "F", 1.8,    -22.23,    -40,    215,      0     ;AE cold adjustment, taper start clt (full adjustment)
#endif
    
      aeMode        = bits,   U08,       3, [0:1],  "TPS", "MAP", "INVALID", "INVALID"
      battVCorMode  = bits,   U08,       3, [2:2],  "Correction PWM", "Temps mort seulement"
      SoftLimitMode = bits,   U08,       3, [3:3],  "Fixe", "Relatif"
      useTachoSweep = bits,   U08,       3, [4:4],  "Off", "On"
      aeApplyMode   = bits,   U08,       3, [5:5],  "PW Multiplier", "PW Ajout"
      multiplyMAP   = bits,   U08,       3, [6:7],  "Off", "Baro/MAF", "Capteur Map", "INVALID"
      wueRates      = array,  U08,       4, [10],   "%",        1.0,       0.0,   0.0,    255,       0
      crankingPct   = scalar, U08,      14,         "%",        1.0,       0.0,   0.0,    255,       0
      pinLayout     = bits,   U08,      15, [0:7],  $pinLayouts	  
      tachoPin      = bits,   U08,      16, [0:5],  "Default carte", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      tachoDiv      = bits,   U08,      16, [6:7],  "Normal", "Demi", "INVALID", "INVALID"
      tachoDuration = scalar, U08,      17,         "ms",       1.0,       0.0,   1.0,    6.0,       0
      maeThresh     = scalar, U08,      18,         "kPa/s",    1.0,       0.0,   0.0,    255,       0 ;MAP threshold for triggering AE
      taeThresh     = scalar, U08,      19,         "%/s",      1.0,       0.0,   0.0,    255,       0 ;TPS threshold for triggering AE
      aeTime        = scalar, U08,      20,         "ms",        10,       0.0,   0.0,    2550,      0

      ; Display (Options for what the display is showing)
      display       = bits,   U08,      21, [0:2],  "non utilise", "Adafruit 128x32", "Generic 128x32", "Adafruit 128x64", "Generic 128x64", "INVALID", "INVALID", "INVALID"
      display1      = bits,   U08,      21, [3:5],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"
      display2      = bits,   U08,      21, [6:7],  "O2", "Voltage", "CPU", "Mem"

      display3      = bits,   U08,      22, [0:2],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"
      display4      = bits,   U08,      22, [3:4],  "O2", "Voltage", "CPU", "Mem"
      display5      = bits,   U08,      22, [5:7],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"

      displayB1     = bits,   U08,      23, [0:3],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"
      displayB2     = bits,   U08,      23, [4:7],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"

      reqFuel       = scalar, U08,      24,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider       = scalar, U08,      25,        "",          1.0,       0.0
      alternate     = bits,   U08,      26, [0:0], "Simultane", "Alternatif"
      multiplyMAP1   = bits,   U08,      26, [1:1], "Non",       "Oui"
      includeAFR    = bits,   U08,      26, [2:2], "Non",       "Oui"
      hardCutType   = bits,   U08,      26, [3:3], "Full",      "Rolling"
      ignAlgorithm  = bits,   U08,      26, [4:6], $loadSourceNames
      indInjAng     = bits,   U08,      26, [7:7], "Disactive", "Actif"
      injOpen       = scalar, U08,      27,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injAng        = array,  U16,      28, [4],   "deg",       1.0,       0.0,   0.0,    720,       0

      ; Config1
      mapSample     = bits,   U08,      36, [0:1], "Instantane", "Cycle Moyen", "Cycle Minimum", "Evenement Moyen"
      twoStroke     = bits,   U08,      36, [2:2], "Quatre-temps", "Deux-temps"
      injType       = bits,   U08,      36, [3:3], "Multi-points", "Mono-point"
      nCylinders    = bits,   U08,      36, [4:7], "INVALID","1","2","3","4","5","6","INVALID","8","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID"

      ; Config2
      algorithm     = bits,   U08,      37, [0:2], $loadSourceNames ;Has to be called algorithm for the req fuel calculator to work :(
      fixAngEnable  = bits,   U08,      37, [3:3], "Off", "On"
      nInjectors    = bits,   U08,      37, [4:7], "INVALID","1","2","3","4","5","6","INVALID","8","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID"

      ; Config3
      engineType    = bits,   U08,      38, [0:0], "Normale",     "Dephase"
      flexEnabled   = bits,   U08,      38, [1:1], "Off", "On"
      legacyMAP     = bits,   U08,      38, [2:2], "Non", "Oui" ;Whether to use the older legacy MAP reading that had the pullup enabled
      baroCorr      = bits,   U08,      38, [3:3], "Off",           "On"
      injLayout     = bits,   U08,      38, [4:5], "Ensemble", "Semi-Sequentielle", "INVALID", "Sequentielle"
      perToothIgn   = bits,   U08,      38, [6:6], "Non", "Oui"
      dfcoEnabled   = bits,   U08,      38, [7:7], "Off",       "On"

#if CELSIUS
      aeColdTaperMax = scalar, U08,       39,       "C", 1.0,       -40,    -40,    215,      0     ;AE cold adjustment, taper start clt (full adjustment)
#else
      aeColdTaperMax = scalar, U08,       39,       "F", 1.8,    -22.23,    -40,    215,      0     ;AE cold adjustment, taper end clt (no adjustment)
#endif

      dutyLim       = scalar, U08,      40,        "%",         1.0,       0.0,   0.0,     95.0,     0
      flexFreqLow   = scalar, U08,      41,        "Hz",        1.0,       0.0,   0.0,     250.0,    0
      flexFreqHigh  = scalar, U08,      42,        "Hz",        1.0,       0.0,   0.0,     250.0,    0

      boostMaxDuty  = scalar, U08,      43,        "%",         1.0,       0.0,   0.0,     100.0,    0
      tpsMin        = scalar, U08,      44,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      tpsMax        = scalar, U08,      45,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      mapMin        = scalar, S08,      46,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      mapMax        = scalar, U16,      47,        "kpa",       1.0,       0.0,   0.0,     25500,    0
      fpPrime       = scalar, U08,      49,        "s",         1.0,       0.0,   0.0,     255.0,    0
      stoich        = scalar, U08,      50,        ":1",        0.1,       0.0,   0.0,     25.5,     1
      oddfire2      = scalar, U16,      51,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)
      oddfire3      = scalar, U16,      53,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)
      oddfire4      = scalar, U16,      55,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)

      idleUpPin     = bits,   U08,      57, [0:5], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      idleUpPolarity= bits,   U08,      57, [6:6], "Normale", "Inverse"
      idleUpEnabled = bits,   U08,      57, [7:7], "Off", "On"
      idleUpAdder   = scalar, U08,      58,        "% / Steps",  1.0,       0.0,   0.0,     250.0,    0
      aeTaperMin    = scalar, U08,      59,        "RPM",       100,       0.0,   1000,    10000,    0
      aeTaperMax    = scalar, U08,      60,        "RPM",       100,       0.0,   2000,    10000,    0

      iacCLminDuty  = scalar, U08,      61,        "%",         1.0,       0.0,   0.0,     100.0,    0 ; Minimum and maximum duty cycles when using closed loop idle
      iacCLmaxDuty  = scalar, U08,      62,        "%",         1.0,       0.0,   0.0,     100.0,    0
      boostMinDuty  = scalar, U08,      63,        "%",         1.0,       0.0,   0.0,     100.0,    0 ; Minimum and maximum duty cycles for boost control

      baroMin       = scalar, S08,      64,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      baroMax       = scalar, U16,      65,        "kpa",       1.0,       0.0,   0.0,     25500,    0
      EMAPMin       = scalar, S08,      67,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      EMAPMax       = scalar, U16,      68,        "kpa",       1.0,       0.0,   0.0,     25500,    0

      fanWhenOff      = bits,   U08,    70, [0:0], "Non",        "Oui" 
      fanWhenCranking = bits,   U08,    70, [1:1], "Non",        "Oui" 
      useDwellMap     = bits,   U08,    70, [2:2], "Non",        "Oui" 
      fanEnable       = bits,   U08,    70, [3:4], "Off",       "On/Off",  "PWM",  "INVALID"
      rtc_mode        = bits,   U08,    70, [5:6], "Off", "integre", "INVALID", "INVALID"
      incorporateAFR  = bits,   U08,    70, [7:7], "Non",        "Oui"

      asePct        = array,  U08,       71, [4],    "%",        1.0,       0.0,     0,    155,       0
      aseCount      = array,  U08,       75, [4],    "s",     1.0,       0.0,     0.0,     255,    0 ; Values for the afterstart enrichment curve
#if CELSIUS
      aseBins       = array,  U08,       79, [4],  "C", 1.0,       -40,    -40,    215,      0
#else
      aseBins       = array,  U08,       79, [4],  "F", 1.8,    -22.23,    -40,    215,      0
#endif
      primePulse    = array,  U08,       83, [4],  "ms",        0.5,       0.0,   0.0,     127.5,     1
#if CELSIUS
      primeBins     = array,  U08,       87, [4],  "C", 1.0,       -40,    -40,    215,      0
#else
      primeBins     = array,  U08,       87, [4],  "F", 1.8,    -22.23,    -40,    215,      0
#endif
      CTPSPin       = bits,  U08,  91, [0:5], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      CTPSPolarity  = bits,  U08,  91, [6:6], "Normale", "Inverse"
      CTPSEnabled   = bits,  U08,  91, [7:7], "Off", "On"
      idleAdvEnabled      = bits,  U08,  92, [0:1], "Off", "Ajout", "Commute", "INVALID"
      idleAdvAlgorithm    = bits,  U08,  92, [2:2], "TPS", "CTPS"
      idleAdvDelay        = bits,  U08,  92, [3:7], "0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0", "5.5", "6.0", "6.5", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5", "10.0", "10.5", "11.0", "11.5", "12.0", "12.5", "13.0", "13.5", "14.0", "14.5", "INVALID", "INVALID"
      idleAdvRPM   = scalar,  U08,      93,       "rpm",        50,  0.0,   50,     12000,      1
      idleAdvTPS   = scalar,  U08,      94,         "%",          0.5,         0,     0,     100.0,      1

      injAngRPM     = array,  U08,      95, [4],   "RPM",        100,       0.0,   100,    10000,    0
      idleTaperTime = scalar, U08,      99,    "S",         0.1,       0.0,   0.0,    25.5,      1
      dfcoDelay     = scalar, U08,      100,   "S",         0.1,       0.0,   0.0,    25.5,      1 ;Remainder of DFCO settings are in page 4
#if CELSIUS
      dfcoMinCLT    = scalar,  U08,      101,    "C", 1.0,       -40,    -40,    215,      0
#else
      dfcoMinCLT    = scalar,  U08,      101,    "F", 1.8,    -22.23,    -40,    215,      0
#endif

      ;VSS settings
      vssMode     = bits,  U08,         102, [0:1], "Off", "INVALID", "Pulses par KM", "Pulses par mile" ;INVALID value will be CAN
      ;vssPullup     = bits,  U08,       102, [1:1], "Off", "On"
      vssPin        = bits,  U08,       102, [2:7], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      vssPulsesPerKm= scalar, U16,      103,        "pulses",     1.0,       0.0,   0.0,     25500,    0
      vssSmoothing  = scalar, U08,      105,         "%",        1.0,         0,     0,     255,      0
      vssRatio1     = scalar, U16,      106, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio2     = scalar, U16,      108, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio3     = scalar, U16,      110, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio4     = scalar, U16,      112, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio5     = scalar, U16,      114, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio6     = scalar, U16,      116, "km/h par 1000rpm", 0.1,         0,     0,     99.9,     1
	  
      ;Idle up output (AC Fan) seettings
      idleUpOutputEnabled   = bits,   U08,      118, [0:0], "Off", "On"
      idleUpOutputInv       = bits,   U08,      118, [1:1], "Non", "Oui"
      idleUpOutputPin       = bits,   U08,      118, [2:7], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      
      tachoSweepMaxRPM  = scalar,   U08,        119,        "RPM",  100.0,       0.0,   100,     25500,      0
      primingDelay      = scalar,   U08,        120,        "S",      0.1,       0.0,   0.0,      25.5,      1
      
      iacTPSlimit               = scalar, U08,  121,        "%",   0.5,        0,       0,      100.0,     1               
      iacRPMlimitHysteresis     = scalar, U08,  122,        "RPM",  10,        0,      10,     2500,     0

      rtc_trim        = scalar,  S08,    123,               "ppm",      1, 0, -127, +127, 0
      idleAdvVss      = scalar, U08,      124,        "km/h",       1,       0.0,   0.0,     255,      0 
      mapSwitchPoint  = scalar, U08,      125,        "RPM",      100,       0.0,   0.0,     16320,    0
	  
      canBMWCluster             = bits,   U08,  126, [0:0], "Off", "On"
      canVAGCluster             = bits,   U08,  126, [1:1], "Off", "On"
      canHALDEXCluster          = bits,   U08,  126, [2:2], "Off", "On"     	  
      canPSACluster             = bits,   U08,  126, [3:3], "Off", "On"
	  ;These are reserved for future use, in case of more CAN broadcasting features are added
      unusedClusterBits         = bits,   U08,  126, [4:7]

      unused2-127                = scalar, U08,  127,        "RPM",      100,       0.0,   0.0,     16320,    0

;Page 2 is the fuel map and axis bins only
page = 2
   ;  name       = bits,   type,    offset, bits
   ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits
      veTable    = array,  U08,       0, [16x16],"%",          1.0,      0.0,   0.0,   255.0,      0
      rpmBins    = array,  U08,     256, [  16], "RPM",      100.0,  0.0,   100,     25500,      0
   fuelLoadBins  = array,  U08,     272, [  16], { bitStringValue(algorithmUnits ,  algorithm) },       fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes
      ;fuelLoadBins = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  algorithm) },        2.0,      0.0,   0.0,   { arrayValue(rpmBins , algorithm) },      0

;--------------------------------------------------
;Start Ignition table (Page 3)
;--------------------------------------------------
page = 3
      advTable1   = array,  U08,     0,[16x16],  "deg",       1.0,       -40,   -40,   70.0,      0
      rpmBins2    = array,  U08,   256,[   16],  "RPM",       100.0,  0.0,   100,     25500,      0
      mapBins1    = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  ignAlgorithm) },     ignLoadRes,      0.0,   0.0,   {ignLoadMax},      ignDecimalRes ; This name has to be used in order for the table to show up in MLVs table. I can't find the regexs that make this work :(

;--------------------------------------------------
;Start Page 4
;These are primarily ignition related settings (Previously part of page 2)
;--------------------------------------------------
page = 4
      TrigAng    = scalar, S16,      0,         "Deg",       1,        0,     -360,     360,        0
      FixAng     = scalar, S08,      2,         "Deg",       1,        0,     -64,      64,         0 ; Allow negative values here
      CrankAng   = scalar, S08,      3,         "Deg",       1,        0,     -10,      80,         0
      TrigAngMul = scalar, U08,      4,         "",          1,        0,     0,        88,         0 ; Multiplier for tooth counts that don't evenly divide into 360
      TrigEdge   = bits,   U08,      5,[0:0],    "Montant", "Descendant"
      TrigSpeed  = bits,   U08,      5,[1:1],    "vilebrequin", "Arbre a came"
      IgInv      = bits,   U08,      5,[2:2],    "Actif masse",        "Actif tension"
      TrigPattern= bits,   U08,      5,[3:7],    "Dents Manquantes", "Distributeur Basic", "Double Roue", "GM 7X", "4G63 / Miata / 3000GT", "GM 24X", "Jeep 2000", "Audi 135", "Honda D17", "Miata 99-05", "Mazda AU", "Non-360 Dual", "Nissan 360", "Subaru 6/7", "Daihatsu +1", "Harley EVO", "36-2-2-2", "36-2-1", "DSM 420a", "Weber-Marelli", "Ford ST170", "DRZ400", "Chrysler NGC", "Renix 44-2-2", "Renix 66-2-2-2", "Yamaha Vmax 1990+", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      TrigEdgeSec= bits,   U08,      6,[0:0],    "Dent pleine", "Dent manquante"
      fuelPumpPin= bits  , U08,      6,[1:6],    "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      useResync  = bits,   U08,      6,[7:7],    "Non",        "Oui"
      sparkDur   = scalar, U08,      7,          "ms",        0.1, 0, 0, 25.5, 1 ; Spark duration
      trigPatternSec = bits,U08,     8,[0:6],    "Une Dent", "Cible 4-1", "Niveau de Tension", "A la dent villebrequin", "206 RC", "4 dents BOSCH", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      PollLevelPol = bits, U08,      8,[7:7],    "Bas", "Haut"

;Reset Control
      bootloaderCaps  = scalar, U08, 9,        "Niveau",    1, 0, 0, 255, 0
#if resetcontrol_adv
      resetControl =    bits,   U08, 10,[0:1], "Desactive", "Prevent When Running", "Prevent Always", "Serial Command"
#else
      resetControl =    bits,   U08, 10,[0:1], "Desactive", "INVALID", "INVALID", "Serial Command"
#endif
      resetControlPin = bits,   U08, 10,[2:7],  "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"

      SkipCycles  = scalar, U08,     11,         "cycles",    1,    0,    0,  255, 0

   ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type,    offset,      units,     scale, translate,    lo,      hi, digits
;Dwell control
      boostType     = bits,   U08,     12, [0:0],  "Boucle ouverte",  "Boucle ferme"
      useDwellLim   = bits,   U08,     12, [1:1],   "Off",    "On"
      sparkMode     = bits,   U08,     12, [2:4],  "Wasted Spark", "Single Channel",   "Wasted COP", "Sequential", "Rotary", "INVALID", "INVALID", "INVALID"
      TrigFilter    = bits,   U08,     12, [5:6],  "Off", "Weak", "Medium", "Aggressive"
      ignCranklock  = bits,   U08,     12, [7:7],  "Off",  "On"
      dwellcrank    = scalar, U08,     13,         "ms",       0.1,    0,    0, 25, 1
      dwellrun      = scalar, U08,     14,         "ms",       0.1,    0,    0, 8, 1 ;running dwell variable railed to 8 - who needs more than 8ms?
      numTeeth      = scalar, U08,     15,         "teeth",    1,    0,  0,     255,       0
      missingTeeth  = scalar, U08,     16,         "teeth",    1,    0,  0,     255,       0

      crankRPM      = scalar, U08,     17,         "rpm",      10,    0.0,  100, 1000, 0
      tpsflood      = scalar, U08,     18,         "%",        0.5,    0.0,  0.0,   100.0,      1

;Rev Limits
      SoftRevLim    = scalar, U08,  19,         "rpm",      100,    0.0,  100, 25500, 0
      SoftLimRetard = scalar, S08,  20,         "deg",      1.0,    0.0,  -40,   80,   0
      SoftLimMax    = scalar, U08,  21,         "s",        0.1,    0.0,  0.0,  25.5,   1
      HardRevLim    = scalar, U08,  22,         "rpm",      100,    0.0, 100, 25500,  0

;TPS based acceleration enrichment
      taeBins    = array,  U08,     23, [ 4],   "%/s",      10.0,   0.0,  0.00,   2550.0,      0
      taeRates   = array,  U08,     27, [ 4],   "%",        1.0,    0.0,  0.00,    255.0,      0 ; 4 bytes
;WUE Bins (Needed somewhere to put these
    #if CELSIUS
      wueBins    = array,  U08,     31, [10],   "C",        1.0, -40,  -40,  102.0,      0
    #else
      wueBins    = array,  U08,     31, [10],   "F",        1.8,   -22.23,  -40,  215.0,      0
    #endif
;Dwell config options
      dwellLim   = scalar, U08,     41,         "ms",       1,      0,        0, 32, 0
      dwellRates = array,  U08,     42, [6],    "%",        1.0,    0.0,      0.00,   255.0,      0

;IAT (Inlet air temp) timing retard
    #if CELSIUS
      iatRetBins   = array,  U08,     48, [ 6],   "C",      1.0,    0.0,  0.00,   120.0,      0
    #else
      iatRetBins   = array,  U08,     48, [ 6],   "F",      1.8,    17.77,  32.00,   257.0,      0 ; No -40 degree offset here
    #endif
      iatRetRates  = array,  U08,     54, [ 6],   "deg",    1.0,    0.0,  0.00,   30.0,      0
;Decelleration Fuel Cut Off (DFCO)
      dfcoRPM      = scalar, U08,      60,        "RPM",      10.0,  0.0,   100,     2550,    0
      dfcoHyster   = scalar, U08,      61,        "RPM",      1.0,  0.0,   100,     255.0,    0
     dfcoTPSThresh = scalar, U08,      62,        "%",        0.5,  0.0,     0,     100.0,    1
;Cranking ignition bypass
      ignBypassEnable = bits,   U08,  63, [0:0],      "Off",        "On"
      ignBypassPin    = bits,   U08,  63, [1:6],      "INVALID", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      ignBypassHiLo   = bits,   U08,  63, [7:7],      "Bas",        "Haut"
;Analog input filter levels (Note max values are 254 so that default values of 255 can be overwirtten on bootup)
      ADCFILTER_TPS   = scalar, U08,      64, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_CLT   = scalar, U08,      65, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_IAT   = scalar, U08,      66, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_O2    = scalar, U08,      67, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_BAT   = scalar, U08,      68, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_MAP   = scalar, U08,      69, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_BARO  = scalar, U08,      70, "%",          1.0,  0.0,   0,     240,    0

;CLT (Coolant temp) timing Advance/Retard
    #if CELSIUS
      cltAdvBins   = array,  U08,     71, [ 6],   "C",      1.0,    -40,  -40,   102.0,      0
    #else
      cltAdvBins   = array,  U08,     71, [ 6],   "F",      1.8,    -22.23,  -40,   215.0,      0 ; No -40 degree offset here
    #endif
      cltAdvValues    = array,  S08,     77, [ 6],   "deg",    1.0,     -15,  -15,   15,      0

;MAP based acceleration enrichment
      maeBins         = array,  U08,      83, [ 4],   "kpa/s",    10.0,   0.0,  0.00,   2550.0,      0
      maeRates        = array,  U08,      87, [ 4],   "%",        1.0,    0.0,  0.00, 255.0,      0 ; 4 bytes

      batVoltCorrect  = scalar, S08,      91, "v",          0.1,  0.0,    -2,     2,        1 ;Battery reading calibration value. Note: Signed value

;Baro fuel correction
      baroFuelBins    = array,  U08,      92, [8],    "kPa",  1.0,    0,  0, 255,        0 ; Bins for the Baro correction curve
      baroFuelValues  = array,  U08,     100, [8],     "%",   1.0,    0,  0,  255,        0 ; % Values for same

;Idle timing advance
      idleAdvBins     = array,  U08,      108, [6],    "RPM",    10.0,      -50,       -500,     500,         0
      idleAdvValues   = array,  U08,      114, [6],    "deg",     1.0,      -15,        -15,      50,         0

      engineProtectMaxRPM   = scalar, U08,  120,         "rpm",      100,    0.0, 100, 25500,  0

      vvt2CL0DutyAng  = scalar, S16,      121,         "deg",    1.0,   0.0,  -360.0,  360.0,      0 ; * (  2 bytes)
      vvt2PWMdir      = bits,   U08,      123, [0:0],  "Advance", "Retard"
      inj4CylPairing  = bits,   U08,      123, [1:2],  "1+3 & 2+4", "1+4 & 2+3", "INVALID", "INVALID" 
      unusedBits4_123 = bits,   U08,      123, [3:7]
      ANGLEFILTER_VVT = scalar, U08,      124, "%",          1.0,  0.0,   0,     100,    0
      FILTER_FLEX     = scalar, U08,      125, "%",          1.0,  0.0,   0,     240,    0

      #if CELSIUS
      vvtMinClt       = scalar,  U08,      126, "C",        1.0,    -40,    -40,    215,      0     
      #else
      vvtMinClt       = scalar,  U08,      126, "F",        1.8,    -22.23,    -40,    215,      0
      #endif
      vvtDelay        = scalar,  U08,      127, "S",        5.0,  0.0,   0,     1275,    0
	  
;--------------------------------------------------

;Start AFR page
;--------------------------------------------------
page = 5
#if LAMBDA
      afrTable    = array,  U08,     0,[16x16], "Lambda",  { 0.1 / stoich },   0.0000,  0.00,    2.00,      3
#else
      afrTable    = array,  U08,     0,[16x16],    "AFR",      0.1,       0.0,   7,   25.5,      1
#endif

      rpmBinsAFR  = array,  U08,   256,[   16],    "RPM",   100.0,  0.0,   100,     25500,      0
      loadBinsAFR  = array,  U08,   272,[   16],    { bitStringValue(algorithmUnits ,  algorithm) },   fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

;--------------------------------------------------
;Start page 6
; Page 6 is all settings associated with O2/AFR
;--------------------------------------------------
page = 6
      egoAlgorithm            = bits  , U08,       0,      [0:1], "Simple", "INVALID", "PID", "Non correction" ; * (  1 byte)
      egoType                 = bits  , U08,       0,      [2:3], "Desactive", "Narrow Band", "Wide Band", " Double Large Bande"                  ; egoOption
      boostEnabled            = bits,   U08,       0,      [4:4], "Off", "On"
      vvtEnabled              = bits,   U08,       0,      [5:5], "Off", "On"
      engineProtectType       = bits,   U08,       0,      [6:7], "Off", "Spark Only", "Fuel Only","Both"

      egoKP                   = scalar, U08,       1,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      egoKI                   = scalar, U08,       2,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      egoKD                   = scalar, U08,       3,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
  #if CELSIUS
      egoTemp                 = scalar, U08,        4,             "C",        1.0, -40,  -40,  102.0,      0
  #else
      egoTemp                 = scalar, U08,        4,             "F",       1.8,   -22.23,  -40,  215.0,      0
  #endif
      egoCount                = scalar, U08,       5,             "",         4.0,    0.0,  4.0,  255.0,      0 ; * (  1 byte)
      vvtMode                 = bits,   U08,       6, [0:1],      "On/Off", "Boucle ouverte", "Boucle ferme", "INVALID"
      vvtLoadSource           = bits,   U08,       6, [2:3],      "MAP", "TPS", "INVALID", "INVALID"
      vvtPWMdir               = bits,   U08,       6, [4:4],      "Advance", "Retard"
      vvtCLUseHold            = bits,   U08,       6, [5:5],      "Non", "Oui"
      vvtCLAlterFuelTiming    = bits,   U08,       6, [6:6],      "Non", "Oui"
      boostCutEnabled         = bits,   U08,       6, [7:7],      "Off", "On"
      egoLimit                = scalar, U08,       7,             "",         1,      0,    0,    30,         0
      ego_min                 = scalar, U08,       8,             "AFR",      0.1,    0.0,  7,    25,         1
      ego_max                 = scalar, U08,       9,             "AFR",      0.1,    0.0,  7,    25,         1
      ego_sdelay  = scalar, U08,      10,             "sec",      1,      0,    0,    120,        0
      egoRPM      = scalar, U08,      11,             "rpm",      100,    0.0,  100,  25500,      0
      egoTPSMax   = scalar, U08,      12,             "%",        0.5,      0,    0,  100.0,      1
      vvt1Pin     = bits  , U08,      13, [0:5],      "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      useExtBaro  =   bits, U08,      13, [6:6],      "Non", "Oui"
      boostMode   =   bits, U08,      13, [7:7],      "Simple", "Full"
      boostPin    =   bits, U08,      14, [0:5],      "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      simultempEnabled  =   bits, U08,      14, [6:6],      "Non", "Oui"
      useEMAP     =   bits, U08,      14, [7:7],      "Non", "Oui"
      brvBins     = array,  U08,      15, [6],        "V",        0.1,    0,    6,    24,         1 ; Bins for the battery reference voltage
      injBatRates = array,  U08,      21, [6],        "%",        1,      0,    0,    255,        0 ;Values for injector pulsewidth vs voltage
  #if CELSIUS
      airDenBins  = array,  U08,      27, [9],        "C",        1.0,    -40,  -40,  215,        0 ; Bins for the air density correction curve
  #else
      airDenBins  = array,  U08,      27, [9],        "F",        1.8,    -22.23,  -40,  215,        0 ; Bins for the air density correction curve
  #endif
      airDenRates = array,  U08,      36, [9],        "%",        1.0,    0.0,  0,    255,        0 ; Values for the air density correction curve

; PWM Frequencies
      boostFreq   = scalar, U08,      45,             "Hz",       2.0,    0.0,  10,   511,        0
      vvtFreq     = scalar, U08,      46,             "Hz",       2.0,    0.0,  10,   511,        0
      idleFreq    = scalar, U08,      47,             "Hz",       2.0,    0.0,  10,   511,        0

; Launch Control
      launchPin   = bits  , U08,      48, [0:5],      "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      launchEnable= bits,   U08,      48, [6:6],      "Non",        "Oui"
      launchHiLo  = bits,   U08,      48, [7:7],    "Bas",        "Haut"

      lnchSoftLim = scalar, U08,      49,             "rpm",      100,    0.0,    100, 25500, 0
      lnchRetard  = scalar, S08,      50,             "deg",      1.0,    0.0,    -30,   40,   0
      lnchHardLim = scalar, U08,      51,             "rpm",      100,    0.0,    100, 25500,  0
      lnchFuelAdd = scalar, U08,      52,             "%",        1.0,    0.0,    0.0,   80,   0

      idleKP       = scalar, U08,     53,             "%",        0.03125,   0.0,  0.0,  7.96,      2 ; * (  1 byte)
      idleKI       = scalar, U08,     54,             "%",        0.03125,   0.0,  0.0,  7.96,      2 ; * (  1 byte)
      idleKD       = scalar, U08,     55,             "%",        0.00781,   0.0,  0.0,  1.99,      3 ; * (  1 byte)
      boostLimit   = scalar, U08,     56,             "kPa",      2.0,   0.0,  0.0,  511.0,      0
      boostKP      = scalar, U08,     57,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      boostKI      = scalar, U08,     58,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      boostKD      = scalar, U08,     59,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)

      lnchPullRes  =   bits, U08,      60,        [0:0],      "Float"  , "Pullup"
      iacPWMrun    =   bits, U08,      60,        [1:1],      "Non",        "Oui"
      fuelTrimEnabled= bits, U08,      60,        [2:2],      "Non",        "Oui"
      flatSEnable  =   bits, U08,      60,        [3:3],      "Non",        "Oui"
; Baro Sensor pin
      baroPin      =   bits, U08,      60,        [4:7],      "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15"

; Flat shift
      flatSSoftWin = scalar, U08,      61,             "rpm",      100.0,  0.0,   100,     25500,      0
      flatSRetard  = scalar, S08,      62,             "deg",      1.0,    0.0,-30.0,   80,   0
      flatSArm     = scalar, U08,      63,             "rpm",      100.0,  0.0,   100,     25500,      0

      iacCLValues  = array, U08,       64, [10],        "RPM",    10.0,  0.0,      0,  2550,     0
      iacOLStepVal = array, U08,       74, [10],       "Steps",      3,    0,      0,    765,    0
      iacOLPWMVal  = array, U08,       84, [10],       "Duty %",   1.0,    0,      0,      100,    0
  #if CELSIUS
      iacBins      = array, U08,       94, [10],       "C",        1.0,    -40,    -40,    215,      0
  #else
      iacBins      = array, U08,       94, [10],       "F",        1.8,    -22.23,    -40,    215,      0
  #endif
      iacCrankSteps= array, U08,      104, [4],        "Steps",      3,    0,    0,    765,    0
      iacCrankDuty = array, U08,      108, [4],        "Duty %",   1.0,    0,  0,  100,    0
  #if CELSIUS
      iacCrankBins = array, U08,      112, [4],        "C",        1.0,    -40,    -40,    215,      0
  #else
      iacCrankBins = array, U08,      112, [4],        "F",        1.8,    -22.23,    -40,    215,      0
  #endif

      iacAlgorithm = bits , U08,      116, [0:2],      "None", "On/Off", "PWM Boucle ouverte", "PWM Boucle ferme", "Stepper Boucle ouverte", "Stepper Boucle ferme", "PWM Closed+Boucle ouverte", "ETB"
      iacStepTime  = bits , U08,      116, [3:5],      "INVALID","2", "4", "6", "8", "10", "12","INVALID"
      iacChannels  = bits,  U08,      116, [6:6],      "1", "2"
      iacPWMdir    = bits , U08,      116, [7:7],      "Normal", "Reverse"

  #if CELSIUS
      iacFastTemp  = scalar, U08,     117,             "C",        1.0,    -40,    -40,    215,      0
  #else
      iacFastTemp  = scalar, U08,     117,             "F",        1.8,    -22.23,    -40,    215,      0
  #endif

      iacStepHome  = scalar, U08,     118,             "Steps",         3,    0,    0, 765,   0
      iacStepHyster= scalar, U08,     119,             "Steps",         1,  0,  1.0,  10,   0

      ; Begin fan control vairables
      fanInv       = bits,   U08,     120, [0:0], "Non",        "Oui"
      fanUnused    = bits,   U08,     120, [1:1], "Off",       "On/Off"
      fanPin       = bits,   U08,     120, [2:7], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
  #if CELSIUS
      fanSP        = scalar, U08,     121,        "C",        1.0,       -40,     -40,     215.0,    0
      fanHyster    = scalar, U08,     122,        "C",        1.0,       0.0,  0.0,     40,    0
  #else
      fanSP        = scalar, U08,     121,        "F",        1.8,       -22.23,  -40,     215.0,    0
      fanHyster    = scalar, U08,     122,        "F",        1.0,       0.0,  0.0,     40,    0
  #endif
  #if CELSIUS
      fanPWMBins = array, U08,      123, [5],        "C",        1.0,    -40,    -40,    215,      0
  #else
      fanPWMBins = array, U08,      123, [5],        "F",        1.8,    -22.23,    -40,    215,      0
  #endif

;--------------------------------------------------
;Boost and vvt maps (Page 7)
;--------------------------------------------------
page = 7
      boostTable    = array,  U08,    0,[8x8],    { bitStringValue( boostTableLabels, boostType ) },        fuelLoadRes,        0.0,   0,       {boostTableLimit},      fuelDecimalRes
      rpmBinsBoost  = array,  U08,    64,[  8],   "RPM",      100.0,  0.0,   100,     25500,      0
      tpsBinsBoost  = array,  U08,    72,[  8],   "TPS",      0.5,        0.0,   0.0,     127.0,      1
      vvtTable      = array,  U08,    80,[8x8],    "%",        0.5,        0.0,   0,       100,      1
      rpmBinsVVT    = array,  U08,    144,[  8],   "RPM",      100.0,  0.0,   100,     25500,      0
      loadBinsVVT   = array,  U08,    152,[  8],   { bitStringValue(algorithmUnits ,  vvtLoadSource) },  vvtLoadRes,        0.0,   0.0,     {vvtLoadMax},      vvtDecimalRes
;Fuel staging Table
      stagingTable  = array,  U08,    160, [8x8], "%",          1.0,      0.0,   0.0,   100.0,      0
      rpmBinsStaging= array,  U08,    224, [  8], "RPM",      100.0,  0.0,   100,     25500,      0
      loadBinsStaging= array,  U08,    232, [  8], { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

;--------------------------------------------------
;Sequential fuel trim tables (Page 8)
;--------------------------------------------------
page = 8
      fuelTrim1Table      = array,  U08,     0,[6x6],     "%",    1.0,    -128,   -50,    50,        0
      fuelTrim1rpmBins    = array,  U08,    36,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim1loadBins   = array,  U08,    42,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim2Table      = array,  U08,    48,[6x6],     "%",    1.0,    -128,   -50,    50,         0
      fuelTrim2rpmBins    = array,  U08,    84,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim2loadBins   = array,  U08,    90,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim3Table      = array,  U08,    96,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim3rpmBins    = array,  U08,   132,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim3loadBins   = array,  U08,   138,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim4Table      = array,  U08,   144,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim4rpmBins    = array,  U08,   180,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim4loadBins   = array,  U08,   186,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim5Table      = array,  U08,   192,[6x6],     "%",    1.0,    -128,   -50,    50,        0
      fuelTrim5rpmBins    = array,  U08,   228,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim5loadBins   = array,  U08,   234,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim6Table      = array,  U08,   240,[6x6],     "%",    1.0,    -128,   -50,    50,         0
      fuelTrim6rpmBins    = array,  U08,   276,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim6loadBins   = array,  U08,   282,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim7Table      = array,  U08,   288,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim7rpmBins    = array,  U08,   324,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim7loadBins   = array,  U08,   330,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

      fuelTrim8Table      = array,  U08,   336,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim8rpmBins    = array,  U08,   372,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim8loadBins   = array,  U08,   378,[  6],     { bitStringValue(algorithmUnits ,  algorithm) },        fuelLoadRes,      0.0,   0.0,   {fuelLoadMax},      fuelDecimalRes

;--------------------------------------------------
;CANBUS control and Auxillary io(Page 9)
;--------------------------------------------------
page = 9
      enable_secondarySerial    = bits,   U08,     0, [0:0], "Desactive", "Actif"
      intcan_available          = bits,   U08,     0, [1:1], "Desactive", "Actif"
      enable_intcan             = bits,   U08,     0, [2:2], "Desactif", "Actif"
    
      caninput_sel0a            = bits,   U08,     1, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel0b            = bits,   U08,     1, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel0extsourcea   = bits,   U08,     1, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel0extsourceb   = bits,   U08,     1, [6:6], "Via Second port Serie", "Via CAN bus"        
      caninput_sel0extsourcec   = bits,   U08,     1, [7:7], "INVALID", "Via CAN bus"

      caninput_sel1a            = bits,   U08,     2, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel1b            = bits,   U08,     2, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel1extsourcea   = bits,   U08,     2, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel1extsourceb   = bits,   U08,     2, [6:6], "Via Second port Serie", "Via CAN bus"       
      caninput_sel1extsourcec   = bits,   U08,     2, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel2a            = bits,   U08,     3, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel2b            = bits,   U08,     3, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel2extsourcea   = bits,   U08,     3, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel2extsourceb   = bits,   U08,     3, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel2extsourcec   = bits,   U08,     3, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel3a            = bits,   U08,     4, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel3b            = bits,   U08,     4, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel3extsourcea   = bits,   U08,     4, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel3extsourceb   = bits,   U08,     4, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel3extsourcec   = bits,   U08,     4, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel4a            = bits,   U08,     5, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel4b            = bits,   U08,     5, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel4extsourcea   = bits,   U08,     5, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel4extsourceb   = bits,   U08,     5, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel4extsourcec   = bits,   U08,     5, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel5a            = bits,   U08,     6, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel5b            = bits,   U08,     6, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel5extsourcea   = bits,   U08,     6, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel5extsourceb   = bits,   U08,     6, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel5extsourcec   = bits,   U08,     6, [7:7], "INVALID", "Via CAN bus"        

      caninput_sel6a            = bits,   U08,     7, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel6b            = bits,   U08,     7, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel6extsourcea   = bits,   U08,     7, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel6extsourceb   = bits,   U08,     7, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel6extsourcec   = bits,   U08,     7, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel7a            = bits,   U08,     8, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel7b            = bits,   U08,     8, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel7extsourcea   = bits,   U08,     8, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel7extsourceb   = bits,   U08,     8, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel7extsourcec   = bits,   U08,     8, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel8a            = bits,   U08,     9, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel8b            = bits,   U08,     9, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel8extsourcea   = bits,   U08,     9, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel8extsourceb   = bits,   U08,     9, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel8extsourcec   = bits,   U08,     9, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel9a            = bits,   U08,     10, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel9b            = bits,   U08,     10, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel9extsourcea   = bits,   U08,     10, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel9extsourceb   = bits,   U08,     10, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel9extsourcec   = bits,   U08,     10, [7:7], "INVALID", "Via CAN bus"    
  
      caninput_sel10a           = bits,   U08,     11, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel10b           = bits,   U08,     11, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel10extsourcea  = bits,   U08,     11, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel10extsourceb  = bits,   U08,     11, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel10extsourcec  = bits,   U08,     11, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel11a           = bits,   U08,     12, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel11b           = bits,   U08,     12, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel11extsourcea  = bits,   U08,     12, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel11extsourceb  = bits,   U08,     12, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel11extsourcec  = bits,   U08,     12, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel12a           = bits,   U08,     13, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel12b           = bits,   U08,     13, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel12extsourcea  = bits,   U08,     13, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel12extsourceb  = bits,   U08,     13, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel12extsourcec  = bits,   U08,     13, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel13a           = bits,   U08,     14, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel13b           = bits,   U08,     14, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel13extsourcea  = bits,   U08,     14, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel13extsourceb  = bits,   U08,     14, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel13extsourcec  = bits,   U08,     14, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel14a           = bits,   U08,     15, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel14b           = bits,   U08,     15, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel14extsourcea  = bits,   U08,     15, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel14extsourceb  = bits,   U08,     15, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel14extsourcec  = bits,   U08,     15, [7:7], "INVALID", "Via CAN bus"    

      caninput_sel15a           = bits,   U08,     16, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel15b           = bits,   U08,     16, [2:3], "Off", "Source externe", "Analog_local", "Digital_local"
      caninput_sel15extsourcea  = bits,   U08,     16, [5:5], "Via Second port Serie", "INVALID"
      caninput_sel15extsourceb  = bits,   U08,     16, [6:6], "Via Second port Serie", "Via CAN bus"
      caninput_sel15extsourcec  = bits,   U08,     16, [7:7], "INVALID", "Via CAN bus"    
          
      caninput_source_can_address0 = bits,   U16,     17,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address1 = bits,   U16,     19,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address2 = bits,   U16,     21,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address3 = bits,   U16,     23,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address4 = bits,   U16,     25,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address5 = bits,   U16,     27,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address6 = bits,   U16,     29,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address7 = bits,   U16,     31,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address8 = bits,   U16,     33,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address9 = bits,   U16,     35,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address10 = bits,  U16,     37,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address11 = bits,  U16,     39,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address12 = bits,  U16,     41,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address13 = bits,  U16,     43,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address14 = bits,  U16,     45,         [0:10], $CAN_ADDRESS_HEX
      caninput_source_can_address15 = bits,  U16,     47,         [0:10], $CAN_ADDRESS_HEX

      caninput_source_start_byte0 = bits,   U08,     49, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte1 = bits,   U08,     50, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte2 = bits,   U08,     51, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte3 = bits,   U08,     52, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte4 = bits,   U08,     53, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte5 = bits,   U08,     54, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte6 = bits,   U08,     55, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte7 = bits,   U08,     56, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte8 = bits,   U08,     57, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte9 = bits,   U08,     58, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte10 = bits,   U08,     59, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte11 = bits,   U08,     60, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte12 = bits,   U08,     61, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte13 = bits,   U08,     62, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte14 = bits,   U08,     63, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      caninput_source_start_byte15 = bits,   U08,     64, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"

      caninput_source_num_bytes0 = bits,    U16,     65, [0:0], "1", "2"
      caninput_source_num_bytes1 = bits,    U16,     65, [1:1], "1", "2"
      caninput_source_num_bytes2 = bits,    U16,     65, [2:2], "1", "2"
      caninput_source_num_bytes3 = bits,    U16,     65, [3:3], "1", "2"
      caninput_source_num_bytes4 = bits,    U16,     65, [4:4], "1", "2"
      caninput_source_num_bytes5 = bits,    U16,     65, [5:5], "1", "2"
      caninput_source_num_bytes6 = bits,    U16,     65, [6:6], "1", "2"
      caninput_source_num_bytes7 = bits,    U16,     65, [7:7], "1", "2"
      caninput_source_num_bytes8 = bits,    U16,     65, [8:8], "1", "2"
      caninput_source_num_bytes9 = bits,    U16,     65, [9:9], "1", "2"
      caninput_source_num_bytes10 = bits,   U16,     65, [10:10], "1", "2"
      caninput_source_num_bytes11 = bits,   U16,     65, [11:11], "1", "2"
      caninput_source_num_bytes12 = bits,   U16,     65, [12:12], "1", "2"
      caninput_source_num_bytes13 = bits,   U16,     65, [13:13], "1", "2"
      caninput_source_num_bytes14 = bits,   U16,     65, [14:14], "1", "2"
      caninput_source_num_bytes15 = bits,   U16,     65, [15:15], "1", "2"

      egoMAPMax           = scalar, U08,     67,       "%",        1,      0,    0,  255.0,      0
      egoMAPMin           = scalar, U08,     68,       "%",        1,      0,    0,  255.0,      0
  
      enable_intcandata_out  = bits,   U08,     69, [0:0], "Off", "On"
      canoutput_sel0       = bits,   U08,    70, [0:0], "Off", "On"
      canoutput_sel1       = bits,   U08,    71, [0:0], "Off", "On"
      canoutput_sel2       = bits,   U08,    72, [0:0], "Off", "On"
      canoutput_sel3       = bits,   U08,    73, [0:0], "Off", "On"
      canoutput_sel4       = bits,   U08,    74, [0:0], "Off", "On"
      canoutput_sel5       = bits,   U08,    75, [0:0], "Off", "On"
      canoutput_sel6       = bits,   U08,    76, [0:0], "Off", "On"
      canoutput_sel7       = bits,   U08,    77, [0:0], "Off", "On"
      canoutput_param_group  = array ,  U16,   78,      [  8],  "",    1, 0, 0, 65535, 0
      canoutput_param_start_byte0 = bits,   U08,     94, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte1 = bits,   U08,     95, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte2 = bits,   U08,     96, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte3 = bits,   U08,     97, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte4 = bits,   U08,     98, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte5 = bits,   U08,     99, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte6 = bits,   U08,     100, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte7 = bits,   U08,     101, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_num_bytes0 = bits,   U08,     102, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes1 = bits,   U08,     103, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes2 = bits,   U08,     104, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes3 = bits,   U08,     105, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes4 = bits,   U08,     106, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes5 = bits,   U08,     107, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes6 = bits,   U08,     108, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes7 = bits,   U08,     109, [0:1], "INVALID", "1", "2", "INVALID"

      speeduino_tsCanId      = bits,   U08,    110,     [0:3],  $tsCanId_list
      true_address           = bits,   U16,     112,     [0:10], $CAN_ADDRESS_HEX
      realtime_base_address  = bits,   U16,     114,     [0:10], $CAN_ADDRESS_HEX
      obd_address            = bits,   U16,     116,       [0:10], $CAN_ADDRESS_HEX

      Auxin0pina        = bits,   U08,    117,     [0:5],  $ANALOG_PIN
      Auxin1pina        = bits,   U08,    118,     [0:5],  $ANALOG_PIN
      Auxin2pina        = bits,   U08,    119,     [0:5],  $ANALOG_PIN
      Auxin3pina        = bits,   U08,    120,     [0:5],  $ANALOG_PIN
      Auxin4pina        = bits,   U08,    121,     [0:5],  $ANALOG_PIN
      Auxin5pina        = bits,   U08,    122,     [0:5],  $ANALOG_PIN
      Auxin6pina        = bits,   U08,    123,     [0:5],  $ANALOG_PIN
      Auxin7pina        = bits,   U08,    124,     [0:5],  $ANALOG_PIN
      Auxin8pina        = bits,   U08,    125,     [0:5],  $ANALOG_PIN
      Auxin9pina        = bits,   U08,    126,     [0:5],  $ANALOG_PIN
      Auxin10pina       = bits,   U08,    127,     [0:5],  $ANALOG_PIN
      Auxin11pina       = bits,   U08,    128,     [0:5],  $ANALOG_PIN
      Auxin12pina       = bits,   U08,    129,     [0:5],  $ANALOG_PIN
      Auxin13pina       = bits,   U08,    130,     [0:5],  $ANALOG_PIN
      Auxin14pina       = bits,   U08,    131,     [0:5],  $ANALOG_PIN
      Auxin15pina       = bits,   U08,    132,     [0:5],  $ANALOG_PIN
  
      Auxin0pinb        = bits,   U08,    133,     [0:5],  $DIGITAL_PIN
      Auxin1pinb        = bits,   U08,    134,     [0:5],  $DIGITAL_PIN
      Auxin2pinb        = bits,   U08,    135,     [0:5],  $DIGITAL_PIN
      Auxin3pinb        = bits,   U08,    136,     [0:5],  $DIGITAL_PIN
      Auxin4pinb        = bits,   U08,    137,     [0:5],  $DIGITAL_PIN
      Auxin5pinb        = bits,   U08,    138,     [0:5],  $DIGITAL_PIN
      Auxin6pinb        = bits,   U08,    139,     [0:5],  $DIGITAL_PIN
      Auxin7pinb        = bits,   U08,    140,     [0:5],  $DIGITAL_PIN
      Auxin8pinb        = bits,   U08,    141,     [0:5],  $DIGITAL_PIN
      Auxin9pinb        = bits,   U08,    142,     [0:5],  $DIGITAL_PIN
      Auxin10pinb       = bits,   U08,    143,     [0:5],  $DIGITAL_PIN
      Auxin11pinb       = bits,   U08,    144,     [0:5],  $DIGITAL_PIN
      Auxin12pinb       = bits,   U08,    145,     [0:5],  $DIGITAL_PIN
      Auxin13pinb       = bits,   U08,    146,     [0:5],  $DIGITAL_PIN
      Auxin14pinb       = bits,   U08,    147,     [0:5],  $DIGITAL_PIN
      Auxin15pinb       = bits,   U08,    148,     [0:5],  $DIGITAL_PIN

      iacStepperInv       = bits,   U08,   149, [0:0], "Non",        "Oui"
      iacCoolTime         = bits,   U08,   149, [1:3], "0", "2", "4", "6", "8", "10", "12","INVALID"

      boostByGearEnabled  = bits,   U08,   149, [4:5],      "Off", "Multiplied %", "Constant limit", "INVALID"

      blankfield          = bits,   U08,   149, [6:6], "",""
      EGTProtEnbl        = bits,   U08,   149, [7:7], "Off", "On"
      
      iacMaxSteps         = scalar, U08,     150,     "Steps",     3,    0,  0,  {iacStepHome-3},    0
      idleAdvStartDelay   = scalar, U08,     151,         "S",   0.1,  0.0,   0.0,    25.5,          1

      boostByGear1        = scalar, U08,     152, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear2        = scalar, U08,     153, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear3        = scalar, U08,     154, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear4        = scalar, U08,     155, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear5        = scalar, U08,     156, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear6        = scalar, U08,     157, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0

      iacMinSteps         = scalar, U08,     158,     "Steps",     3,    0,  0,  {iacMaxSteps-10},    0
      SYNCTeeth           = scalar, U08,     159,         "teeth",    1,    0,  2,     {numTeeth-missingTeeth},       0	
      ETBpos1Min          = scalar, U08,     160,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      ETBpos2Min          = scalar, U08,     161,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      ETBpos1Max          = scalar, U08,     162,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      ETBpos2Max          = scalar, U08,     163,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      ETBEnable           = bits,   U08,     164, [0:0], "Non",        "Oui"	  
	  ETBInv              = bits,   U08,     164, [1:1], "Non",        "Oui"
	  
      unused9_164         = bits,     U08,    164,  [2:5]
	  hardRevMode         = bits,     U08,    164,  [6:7], "Off", "Fixe", "Temp Eau", "INVALID"  
	 
      ETBposoff           = scalar,   U08,   165,      "% ETBpos1 et % ETBpos2 lu sur gauge",       0.5,       0.0,   0.0,     100.0,    1
      ETBKP               = scalar,   U08,   166,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      ETBKI               = scalar,   U08,   167,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      ETBKD               = scalar,   U08,   168,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)	  
      ETBFreq             = scalar,   U08,   169,             "Hz",       8.0,    0.0,  80,   2040,        0
      TPS2Max             = scalar, U08,     170,        "ADC",       1.0,       0.0,   0.0,     255.0,    0	  
      TPS2Min             = scalar, U08,     171,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      PWMFanDuty          = array,  U08,     172,   [5],       "%", 0.5,    0,    0,    100,      1	 
      EmulFreq            = scalar,   U08,   177,             "Hz",       2.0,    0.0,    10,   511,        0
	  fanFreq             = scalar,   U08 ,  178,        "Hz",        2.0,        0.0,    10,     511,       0  
	  HALDEXDuty          = array,  U08,     179,   [5],       "%", 0.5,    0,    0,    100,      1	 
	  VSSBins             = array,  U08,     184,   [5],       "%", 1.0,    0,    0,    255,      0	
  
      coolantProtRPM      = array,  U08,     189, [6], "RPM",     100.0,       0.0,   100.0, 25500,    0           
      #if CELSIUS
      coolantProtTemp     = array,  U08,     195, [6],    "C",    1.0,    -40,    -40,    215,      0
      #else
      coolantProtTemp     = array,  U08,     195, [6],    "F",    1.8, -22.23,    -40,    215,      0
      #endif
	 
	  EGTEnable           = bits,     U08,    201,  [0:0], "Off", "On"
	  EGTPin              = bits,     U08,    201,  [1:5], "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID
      EGTMin              = scalar,   U08,    202,        "C",       5,       0.0,   0.0,     1275.0,    0
	  EGTMax              = scalar,   U08,    203,        "C",       5,       0.0,   0.0,     1275.0,    0
	  EGTProtRPM          = array,    U08,    204, [6], "RPM",     100.0,       0.0,   100.0, 25500,    0           
      #if CELSIUS
      EGTProtTemp         = array,   U08,     210, [6],    "C",    5,    0.0,    0.0,    1275,      0
      #else
      EGTProtTemp         = array,   U08,     210, [6],    "F",    5, -22.23,    -22.23,    1275,      0
      #endif
	  EGTadd              = scalar,   U08,    216,              "%",         0.1,   0.0,  0.0,  25.5,      1 
	  unused9_225_242     = array,    U08,    217,   [25],       "%",        1.0,     0.0,   0.0,     100.0,     0
	  
page = 10
#if CELSIUS
      crankingEnrichBins  = array,  U08,       0, [4],  "C",        1.0,    -40,    -40,    215,      0
#else
      crankingEnrichBins  = array,  U08,       0, [4],  "F",        1.8,    -22.23,    -40,    215,      0
#endif
      crankingEnrichValues= array,  U08,       4, [4],  "%",        5.0,    0.0,  0,    1275,        0 ; Values for the cranking enrichment curve

      rotaryType          = bits ,  U08,       8, [0:1],           "FC", "FD", "RX8", "INVALID"
      stagingEnabled      = bits ,  U08,       8, [2:2],           "Off","On"
      stagingMode         = bits ,  U08,       8, [3:3],           "Table","Automatique"
      EMAPPin             = bits,   U08,       8, [4:7],      "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15"

      rotarySplitValues   = array,  U08,       9, [8],   "degrees", 1.0,    0.0,   0.0,     40,         0
      rotarySplitBins     = array,  U08,      17, [8],     { bitStringValue(algorithmUnits ,  ignAlgorithm) },     ignLoadRes,      0.0,   0.0,   {ignLoadMax},      ignDecimalRes

      boostSens           = scalar, U16,      25,      "",       1, 0, 0, 5000, 0
      boostIntv           = scalar, U08,      27,      "ms",     1, 0,  0,  250, 0
      stagedInjSizePri    = scalar, U16,      28,      "cc/min",       1, 0, 0, 1500, 0
      stagedInjSizeSec    = scalar, U16,      30,      "cc/min",       1, 0, 0, 1500, 0
      lnchCtrlTPS         = scalar, U08,      32,      "%TPS",       0.5, 0, 0, 100.0, 1

      flexBoostBins       = array,  U08,      33, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      ; The boost range is obviously arbitrary since int16_t has ~32k in both directions
      flexBoostAdj        = array,  S16,      39, [6], "kPa",  1.0,       0.0,   -500.0,  500.0,    0
      flexFuelBins        = array,  U08,      51, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      flexFuelAdj         = array,  U08,      57, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      flexAdvBins         = array,  U08,      63, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      flexAdvAdj          = array,  U08,      69, [6], "Deg",  1.0,       -40,   -40,     215.0,    0

      n2o_enable          = bits ,  U08,      75, [0:1],           "Off","1 Stage","2 stage", "INVALID"
      n2o_arming_pin      = bits ,  U08,      75, [2:7],           $IO_Pins_no_def
#if CELSIUS
      n2o_minCLT          = scalar, U08,      76,      "C",        1.0,    -40,    -40,    215,      0
#else
      n2o_minCLT          = scalar, U08,      76,      "F",        1.8,    -22.23,    -40,    215,      0
#endif
      n2o_maxMAP          = scalar, U08,      77,      "kPa",      2.0,   0.0,  0.0,  511.0,      0
      n2o_minTPS          = scalar, U08,      78,      "%TPS",     0.5,   0.0,  0.0,  100.0,      1
      n2o_maxAFR          = scalar, U08,      79,      "AFR",      0.1,   0.0,  0.0,  25.5,       1
      
      n2o_stage1_pin      = bits ,  U08,      80, [0:5],           $IO_Pins_no_def
      n2o_pin_polarity    = bits ,  U08,      80, [6:6],           "Haut", "Bas"
      n2o_unused          = bits ,  U08,      80, [7:7],           "Non", "Oui"
      n2o_stage1_minRPM   = scalar, U08,      81,      "RPM",       50,       0.0,   1000,    10000,    0
      n2o_stage1_maxRPM   = scalar, U08,      82,      "RPM",       50,       0.0,   1000,    10000,    0
      n2o_stage1_adderMin = scalar, U08,      83,      "ms",        0.1,       0,        0,     25.5,    1
      n2o_stage1_adderMax = scalar, U08,      84,      "ms",        0.1,       0,        0,     25.5,    1
      n2o_stage1_retard   = scalar, U08,      85,      "Deg",       1.0,       0.0,   0.0,     40.0,    0

      n2o_stage2_pin      = bits ,  U08,      86, [0:5],           $IO_Pins_no_def
      n2o_stage2_unused   = bits ,  U08,      86, [6:7],           "Non", "Oui", "INVALID", "INVALID"
      n2o_stage2_minRPM   = scalar, U08,      87,      "RPM",       50,       0.0,   1000,    10000,    0
      n2o_stage2_maxRPM   = scalar, U08,      88,      "RPM",       50,       0.0,   1000,    10000,    0
      n2o_stage2_adderMin = scalar, U08,      89,      "ms",        0.1,       0,        0,       32,    1
      n2o_stage2_adderMax = scalar, U08,      90,      "ms",        0.1,       0,        0,       32,    1
      n2o_stage2_retard   = scalar, U08,      91,      "Deg",       1.0,       0.0,   0.0,     40.0,    0
      
      ; Knock settings
      knock_mode          = bits ,  U08,      92, [0:1],           "Off","Digital","Analog", "INVALID"
      knock_pin           = bits ,  U08,      92, [2:7],           "INVALID", "INVALID", "2", "3", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "18", "19", "20", "21", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"

      knock_trigger       = bits ,  U08,      93, [0:0],           "Haut", "Bas"
      knock_pullup        = bits ,  U08,      93, [1:1],           "Off", "Internal pullup"
      knock_limiterDisable= bits ,  U08,      93, [2:2],           "Non", "Oui"
      knock_unused        = bits ,  U08,      93, [3:4],           "INVALID", "1", "2", "3"

      ;Knock detection / filters
      knock_count         = bits ,  U08,      93, [5:7],           "INVALID", "1", "2", "3", "4", "5", "6", "7"
      knock_threshold     = scalar, U08,      94,      "Volts",    0.1,    0.0,  0.0,  5.0,          1
      knock_maxMAP        = scalar, U08,      95,      "kPa",      2.0,    0.0,  0.0,  511.0,        0
      knock_maxRPM        = scalar, U08,      96,      "RPM",      50.0,  0.0,   0,     10000,      0
      knock_window_rpms   = array,  U08,      97, [6], "RPM",      50.0,  0.0,   0,     10000,      0
      knock_window_angle  = array,  U08,     103, [6], "deg",      1.0,    -50,   -50,     100,      0
      knock_window_dur    = array,  U08,     109, [6], "deg",      1.0,    0.0,   0,       100,      0 ;Knock window duration

      ;Retard and recovery
      knock_maxRetard     = scalar, U08,     115,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_firstStep     = scalar, U08,     116,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_stepSize      = scalar, U08,     117,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_stepTime      = scalar, U08,     118,      "Sec",      0.1,       0.0,   0.0,     2.5,   1
      
      knock_duration      = scalar, U08,     119,      "Sec",      0.1,       0.0,   0.0,     2.5,   1 ;//Time after knock retard starts that it should start recovering
      knock_recoveryStepTime  = scalar, U08, 120,      "Sec",      0.1,       0.0,   0.0,     2.5,   1
      knock_recoveryStep  = scalar, U08,     121,      "Deg",      1.0,       0.0,   0.0,     50,    0

      ;Things for the 2nd fuel table
      fuel2Algorithm      = bits,   U08,     122, [0:2], $loadSourceNames
      fuel2Mode           = bits,   U08,     122, [3:5], "Off", "Multiplie %", "Ajout", "Switch - Condition", "Switch - Entree logique","INVALID","INVALID","INVALID"
      fuel2SwitchVariable = bits,   U08,     122, [6:7], "RPM", "MAP", "TPS", "ETH%"
      fuel2SwitchValue    = scalar, U16,     123, { bitStringValue(fuel2SwitchUnits,  fuel2SwitchVariable) },    {(fuel2SwitchVariable == 2) ? 0.5 : 1.0},       0.0,   0.0,     9000,    {(fuel2SwitchVariable == 2) ? 1 : 0}
      fuel2InputPin       = bits ,  U08,     125, [0:5],           $IO_Pins_no_def
      fuel2InputPolarity  = bits ,  U08,     125, [6:6],           "Bas", "Haut"
      fuel2InputPullup    = bits ,  U08,     125, [7:7],           "Non", "Oui"

      ;All related to the closed loop VVT control
      vvtCLholdDuty       = scalar, U08,     126,      "%",        0.5,     0.0,    0.0,  100.0,      1
      vvtCLKP             = scalar, U08,     127,      "%",        0.03125, 0.0,    0.0,   7.96,      2 ; * (  1 byte)
      vvtCLKI             = scalar, U08,     128,      "%",        0.03125, 0.0,    0.0,   7.96,      2 ; * (  1 byte)
      vvtCLKD             = scalar, U08,     129,      "%",        0.00781, 0.0,    0.0,   1.99,      3 ; * (  1 byte)
      vvtCL0DutyAng       = scalar, S16,     130,    "deg",        1.0,     0.0, -360.0,  360.0,      0 ; * (  2 bytes)
      vvtCLMinAng         = scalar, U08,     132,    "deg",        0.5,     0.0,    0.0,  100.0,      0 ; * (  1 byte)
      vvtCLMaxAng         = scalar, U08,     133,    "deg",        0.5,     0.0,    0.0,  100.0,      0 ; * (  1 byte)

      crankingEnrichTaper = scalar,  U08,    134,  "s",  0.1,      0.0,  0.0,     25.5,    1

      ;Pressure transducers
      fuelPressureEnable  = bits,   U08,     135, [0:0], "Off", "On"
      oilPressureEnable   = bits,   U08,     135, [1:1], "Off", "On"
      oilPressureProtEnbl = bits,   U08,     135, [2:2], "Off", "On"
      oilPressurePin      = bits,   U08,     135, [3:7], "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID

      fuelPressurePin     = bits,   U08,     136, [0:4], "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID
      

      fuelPressureMin     = scalar, S08,     137,        "psi",       1.0,       0.0,  -100,     127,    0 ;Note signed int
      fuelPressureMax     = scalar, U08,     138,        "psi",       1.0,       0.0,   0.0,     255,    0
      oilPressureMin      = scalar, S08,     139,        "psi",       1.0,       0.0,  -100,     127,    0 ;Note signed int
      oilPressureMax      = scalar, U08,     140,        "psi",       1.0,       0.0,   0.0,     255,    0

      oilPressureProtRPM  = array,  U08,     141, [  4], "RPM",     100.0,       0.0,   100.0, 25500,    0
      oilPressureProtMins = array,  U08,     145, [  4], "psi",       1.0,       0.0,   0.0,     255,    0
      
      wmiEnabled          = bits,   U08,     149, [0:0], "Off", "On"
      wmiMode             = bits,   U08,     149, [1:2], "Simple", "Proportionnel", "Boucle ouverte", "Boucle ferme"

      wmiAdvEnabled   = bits,   U08,     149, [7:7], "Off", "On" 

      wmiTPS              = scalar, U08,     150,        "%TPS",     0.5,    0.0,    0.0,   100.0,  1
      wmiRPM              = scalar, U08,     151,        "RPM",      100.0,  0.0,    0,     10000,  0
      wmiMAP              = scalar, U08,     152,        "kPa",      2.0,    0.0,    0.0,   511.0,  0
      wmiMAP2             = scalar, U08,     153,        "kPa",      2.0,    0.0,    0.0,   511.0,  0
#if CELSIUS
      wmiIAT              = scalar, U08,     154,        "C",        1.0,    -40,    -40,   215,    0
#else
      wmiIAT              = scalar, U08,     154,        "F",        1.8,    -22.23, -40,   215,    0
#endif
      wmiOffset           = scalar, S08,     155,        "ms",      1.0,    0.0,    -12.7,  12.7,    0 ;Note signed int

      wmiIndicatorEnabled  = bits,   U08,     156, [0:0], "Off", "On" 
      wmiIndicatorPin      = bits,   U08,     156, [1:6], "Default carte", $DIGITAL_PIN
      wmiIndicatorPolarity = bits ,  U08,     156, [7:7], "Normal", "Inverse"

      wmiEmptyEnabled  = bits,   U08,     157, [0:0], "Off", "On" 
      wmiEmptyPin      = bits,   U08,     157, [1:6], "Default carte", $DIGITAL_PIN
      wmiEmptyPolarity = bits ,  U08,     157, [7:7], "Normal", "Inverted"

      wmiEnabledPin   = bits,   U08,     158, [0:5], "Default carte", $DIGITAL_PIN

      wmiAdvBins      = array,  U08,      159, [6], "kPa",  2.0,       0.0,   0.0,     511.0,    0
      wmiAdvAdj       = array,  U08,      165, [6], "Deg",  1.0,       -40,   -40,     40.0,    0

      vvtCLminDuty        = scalar, U08,     171,        "%",        0.5,       0.0,   0.0,     100.0,    1 ; Minimum and maximum duty cycles when using closed loop
      vvtCLmaxDuty        = scalar, U08,     172,        "%",        0.5,       0.0,   0.0,     100.0,    1

      vvt2Pin             = bits  , U08,     173, [0:5], "Default carte", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      vvt2Enabled         = bits,   U08,     173, [6:6], "Off", "On"
      TrigEdgeThrd        = bits,   U08,     173, [7:7], "Dent pleine", "Dent manquante"

      ;Fuel temperature correction
      #if CELSIUS
      fuelTempBins        = array,  U08,      174, [6],    "C",    1.0,    -40,    -40,    215,      0
      #else
      fuelTempBins        = array,  U08,      174, [6],    "F",    1.8, -22.23,    -40,    215,      0
      #endif
      fuelTempValues      = array,  U08,      180, [6],    "%",    1.0,    0.0,      0,    255,      0

      ;Things for the 2nd spark table
      spark2Algorithm      = bits,   U08,     186, [0:2], $loadSourceNames
      spark2Mode           = bits,   U08,     186, [3:5], "Off", "Multiplie %", "Ajout", "Switch - Condition", "Switch - Entree logique","INVALID","INVALID","INVALID"
      spark2SwitchVariable = bits,   U08,     186, [6:7], "RPM", "MAP", "TPS", "ETH%"
      spark2SwitchValue    = scalar, U16,     187, { bitStringValue(fuel2SwitchUnits,  spark2SwitchVariable) },  {(spark2SwitchVariable == 2) ? 0.5 : 1.0},       0.0,   0.0,     9000,    {(spark2SwitchVariable == 2) ? 1 : 0}
      spark2InputPin       = bits ,  U08,     189, [0:5],           $IO_Pins_no_def
      spark2InputPin       = bits ,  U08,     189, [0:5],           $IO_Pins_no_def
      spark2InputPolarity  = bits ,  U08,     189, [6:6],           "Bas", "Haut"
      spark2InputPullup    = bits ,  U08,     189, [7:7],           "Non", "Oui"

      unused10_190        = array,  U08,      190,  [2], "",       1.0,  0.0,   1,     255,      0

;Page 11 is the fuel map and axis bins only
page = 11
  ;  name       = bits,   type,    offset, bits
  ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
  ;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits
      veTable2      = array,  U08,       0, [16x16],"%",          1.0,      0.0,   0.0,   255.0,      0
      fuelRPM2Bins  = array,  U08,     256, [  16], "RPM",      100.0,  0.0,   100,     25500,      0
      fuelLoad2Bins = array,  U08,     272, [  16], { bitStringValue(algorithmUnits ,  fuel2Algorithm) },        fuel2LoadRes,      0.0,   0.0,   { fuel2LoadMax },      fuel2DecimalRes


;--------------------------------------------------
;Water methanol inejction and vvt2 maps (Page 12)
;--------------------------------------------------
page = 12
      wmiTable      = array,  U08,      0,[8x8],    "%",         1.0,      0.0,   0.0,      {wmiLoadMax},      0
      rpmBinsWMI    = array,  U08,     64,[  8],   "RPM",      100.0,  0.0,   100,     25500,      0
      mapBinsWMI    = array,  U08,     72,[  8],   "kPa",        2.0,      0.0,   0.0,      511.0,      0
      vvt2Table     = array,  U08,     80,[8x8],     "%",        0.5,      0.0,     0,        100,      1
      rpmBinsVVT2   = array,  U08,    144,[  8],   "RPM",      100.0,  0.0,   100,     25500,      0
     loadBinsVVT2  = array,  U08,    152,[  8],   { bitStringValue(algorithmUnits ,  vvtLoadSource) }, vvtLoadRes,        0.0,   0.0,     {vvtLoadMax},      vvtDecimalRes
      dwellTable    = array,  U08,    160,[4x4],    "ms",        0.1,      0.0,   0.1,        8.0,      1
      rpmBinsDwell  = array,  U08,    176,[  4],   "RPM",      100.0,  0.0,   100,     25500,      0
      loadBinsDwell  = array,  U08,    180,[  4],   { bitStringValue(algorithmUnits ,  ignAlgorithm) },     ignLoadRes,      0.0,   0.0,   {ignLoadMax},      ignDecimalRes

;Page 13 is the programmable outputs
page = 13
      outputInverted0 = bits,     U08,    0,  [0:0],  "Active Haut",  "Active Bas"
      outputInverted1 = bits,     U08,    0,  [1:1],  "Active Haut",  "Active Bas"
      outputInverted2 = bits,     U08,    0,  [2:2],  "Active Haut",  "Active Bas"
      outputInverted3 = bits,     U08,    0,  [3:3],  "Active Haut",  "Active Bas"
      outputInverted4 = bits,     U08,    0,  [4:4],  "Active Haut",  "Active Bas"
      outputInverted5 = bits,     U08,    0,  [5:5],  "Active Haut",  "Active Bas"
      outputInverted6 = bits,     U08,    0,  [6:6],  "Active Haut",  "Active Bas"
      outputInverted7 = bits,     U08,    0,  [7:7],  "Active Haut",  "Active Bas"
      kindOfLimiting0 = bits,     U08,    1,  [0:0],  "Minimum",  "Maximum"
      kindOfLimiting1 = bits,     U08,    1,  [1:1],  "Minimum",  "Maximum"
      kindOfLimiting2 = bits,     U08,    1,  [2:2],  "Minimum",  "Maximum"
      kindOfLimiting3 = bits,     U08,    1,  [3:3],  "Minimum",  "Maximum"
      kindOfLimiting4 = bits,     U08,    1,  [4:4],  "Minimum",  "Maximum"
      kindOfLimiting5 = bits,     U08,    1,  [5:5],  "Minimum",  "Maximum"
      kindOfLimiting6 = bits,     U08,    1,  [6:6],  "Minimum",  "Maximum"
      kindOfLimiting7 = bits,     U08,    1,  [7:7],  "Minimum",  "Maximum"
      outputPin       = array,    U08,    2,  [  8], "",        1.0,     0.0,   0.0,    255.0,      0
          outputPin0  = bits,     U08,    2,  [0:7],  $comp_IO_Pins
          outputPin1  = bits,     U08,    3,  [0:7],  $comp_IO_Pins
          outputPin2  = bits,     U08,    4,  [0:7],  $comp_IO_Pins
          outputPin3  = bits,     U08,    5,  [0:7],  $comp_IO_Pins
          outputPin4  = bits,     U08,    6,  [0:7],  $comp_IO_Pins
          outputPin5  = bits,     U08,    7,  [0:7],  $comp_IO_Pins
          outputPin6  = bits,     U08,    8,  [0:7],  $comp_IO_Pins
          outputPin7  = bits,     U08,    9,  [0:7],  $comp_IO_Pins
      outputDelay     = array,    U08,   10,  [  8], "S",       0.1,     0.0,   0.0,     25.5,      1
      firstDataIn     = array,    U08,   18,  [  8], "",        1.0,     0.0,   0.0,    255.0,      0
          firstDataIn0= bits,     U08,   18,  [0:7], $fullStatus_def
          firstDataIn1= bits,     U08,   19,  [0:7], $fullStatus_def
          firstDataIn2= bits,     U08,   20,  [0:7], $fullStatus_def
          firstDataIn3= bits,     U08,   21,  [0:7], $fullStatus_def
          firstDataIn4= bits,     U08,   22,  [0:7], $fullStatus_def
          firstDataIn5= bits,     U08,   23,  [0:7], $fullStatus_def
          firstDataIn6= bits,     U08,   24,  [0:7], $fullStatus_def
          firstDataIn7= bits,     U08,   25,  [0:7], $fullStatus_def
      secondDataIn    = array,    U08,   26,  [  8], "",        1.0,     0.0,   0.0,   255.0,      0
          secondDataIn0= bits,     U08,   26,  [0:7], $fullStatus_def
          secondDataIn1= bits,     U08,   27,  [0:7], $fullStatus_def
          secondDataIn2= bits,     U08,   28,  [0:7], $fullStatus_def
          secondDataIn3= bits,     U08,   29,  [0:7], $fullStatus_def
          secondDataIn4= bits,     U08,   30,  [0:7], $fullStatus_def
          secondDataIn5= bits,     U08,   31,  [0:7], $fullStatus_def
          secondDataIn6= bits,     U08,   32,  [0:7], $fullStatus_def
          secondDataIn7= bits,     U08,   33,  [0:7], $fullStatus_def
      outputTimeLimit = array,    U08,   34,  [  8], "S",       0.1,     0.0,   0.0,     25.5,      1
      unused13_35_49  = array,    U08,   42,  [  8], "%",        1.0,     0.0,   0.0,     100.0,     0
      firstTarget     = array,    S16,   50,  [  8], "",        1.0,     0.0, -32768.0,  32768.0,      0
      secondTarget    = array,    S16,   66,  [  8], "",        1.0,     0.0, -32768.0,  32768.0,      0
      firstCompType0  = bits,     U08,   82,  [0:2],  $comparator_def
      secondCompType0 = bits,     U08,   82,  [3:5],  $comparator_def
      bitwise0        = bits,     U08,   82,  [6:7],  $bitwise_def
      firstCompType1  = bits,     U08,   83,  [0:2],  $comparator_def
      secondCompType1 = bits,     U08,   83,  [3:5],  $comparator_def
      bitwise1        = bits,     U08,   83,  [6:7],  $bitwise_def
      firstCompType2  = bits,     U08,   84,  [0:2],  $comparator_def
      secondCompType2 = bits,     U08,   84,  [3:5],  $comparator_def
      bitwise2        = bits,     U08,   84,  [6:7],  $bitwise_def
      firstCompType3  = bits,     U08,   85,  [0:2],  $comparator_def
      secondCompType3 = bits,     U08,   85,  [3:5],  $comparator_def
      bitwise3        = bits,     U08,   85,  [6:7],  $bitwise_def
      firstCompType4  = bits,     U08,   86,  [0:2],  $comparator_def
      secondCompType4 = bits,     U08,   86,  [3:5],  $comparator_def
      bitwise4        = bits,     U08,   86,  [6:7],  $bitwise_def
      firstCompType5  = bits,     U08,   87,  [0:2],  $comparator_def
      secondCompType5 = bits,     U08,   87,  [3:5],  $comparator_def
      bitwise5        = bits,     U08,   87,  [6:7],  $bitwise_def
      firstCompType6  = bits,     U08,   88,  [0:2],  $comparator_def
      secondCompType6 = bits,     U08,   88,  [3:5],  $comparator_def
      bitwise6        = bits,     U08,   88,  [6:7],  $bitwise_def
      firstCompType7  = bits,     U08,   89,  [0:2],  $comparator_def
      secondCompType7 = bits,     U08,   89,  [3:5],  $comparator_def
      bitwise7        = bits,     U08,   89,  [6:7],  $bitwise_def
      candID          = array,    U16,   90,  [8], "",         1.0,     0.0,   0.0,    255.0,      0	  
	  
      iacBatRates     = array,  U08,      106, [5],        "%",        1,      0,    0,    100,        0 ;Values for iac pulsewidth vs voltage
      iacBrvBins      = array,  U08,      111, [5],        "V",        0.1,    0,    6,    24,         1 ; Bins for the iac battery reference voltage
	  
      ;RTC and onboard logging stuff
      onboard_log_csv_separator = bits,     U08,  116, [0:1], ";", ",", "tab", "space" 
      onboard_log_file_style    = bits,     U08,  116, [2:3], "Desactive", "CSV", "Binary", "INVALID" ;Future maybe more file types.
      onboard_log_file_rate     = bits,     U08,  116, [4:5], "1Hz", "4Hz", "10Hz", "30Hz" 
      onboard_log_filenaming    = bits,     U08,  116, [6:7], "Overwrite", "Date-time", "Sequentielle", "INVALID" 
      onboard_log_storage       = bits,     U08,  117, [0:1], "sd-card", "INVALID", "INVALID", "INVALID" ;In the future maybe an onboard spi flash can be used, or switch between SDIO vs SPI sd card interfaces.
      onboard_log_trigger_boot  = bits,     U08,  117, [2:2], "Desactive", "A la mise sous tention"
      onboard_log_trigger_RPM   = bits,     U08,  117, [3:3], "Desactive", "Actif"
      onboard_log_trigger_prot  = bits,     U08,  117, [4:4], "Desactive", "Actif"
      onboard_log_trigger_Vbat  = bits,     U08,  117, [5:5], "Desactive", "Actif"
      onboard_log_trigger_Epin  = bits,     U08,  117, [6:7], "Desactive", "polling", "toggle" , "INVALID" 
      onboard_log_tr1_duration  = scalar,   U16,  118,        "s",        1.000,  0.0,    0,     65000,  0
      onboard_log_tr2_thr_on    = scalar,   U08,  120,        "RPM",      100.0,  0.0,    0,     10000,  0
      onboard_log_tr2_thr_off   = scalar,   U08,  121,        "RPM",      100.0,  0.0,    0,     10000,  0
      onboard_log_tr3_thr_RPM   = bits,     U08,  122, [0:0], "Desactive", "Actif"
      onboard_log_tr3_thr_MAP   = bits,     U08,  122, [1:1], "Desactive", "Actif"
      onboard_log_tr3_thr_Oil   = bits,     U08,  122, [2:2], "Desactive", "Actif"
      onboard_log_tr3_thr_AFR   = bits,     U08,  122, [3:3], "Desactive", "Actif"     
      onboard_log_tr4_thr_on    = scalar,   U08,  123,        "V",        0.1,   0.0,  0.0,  15.90,      2 ; * (  1 byte)    
      onboard_log_tr4_thr_off   = scalar,   U08,  124,        "V",        0.1,   0.0,  0.0,  14.90,      2 ; * (  1 byte)   
      onboard_log_tr5_thr_on    = scalar,   U08,  125,        "pin",      1.0,   0.0,  0.0,    255,        0 ;  

      unused13_126_127          = array,    U08,  126,  [2],  "%",       1.0,     0.0,   0.0,      255,      0

;--------------------------------------------------
;Second ignition map (Page 14)
;--------------------------------------------------
page = 14
      advTable2  = array,  U08,     0,[16x16],  "deg",       1.0,       -40,   -40,    70.0,      0
      rpmBins3   = array,  U08,   256,   [16],  "RPM",       100.0,  0.0,   100,     25500,      0
      mapBins2   = array,  U08,   272,   [16], { bitStringValue(algorithmUnits ,  spark2Algorithm) },        ign2LoadRes,      0.0,   0.0,   { ign2LoadMax },      ign2DecimalRes ; This name has to be used in order for the table to show up in MLVs table. I can't find the regexs that make this work :(

;-------------------------------------------------------------------------------


[EventTriggers]
      triggeredPageRefresh = 1, { vssRefresh > 0 }

[ConstantsExtensions]
    requiresPowerCycle = nCylinders
    requiresPowerCycle = pinLayout
    requiresPowerCycle = fanPin
    requiresPowerCycle = reqFuel
    requiresPowerCycle = numTeeth
	requiresPowerCycle = SYNCTeeth
    requiresPowerCycle = missingTeeth
    requiresPowerCycle = trigPatternSec
    requiresPowerCycle = injOpen
    requiresPowerCycle = IgInv
    requiresPowerCycle = fanInv
    requiresPowerCycle = boostEnabled
    requiresPowerCycle = vvtEnabled
    ;requiresPowerCycle = vvtChannels
    requiresPowerCycle = boostFreq
    requiresPowerCycle = vvtFreq
    requiresPowerCycle = idleFreq
    requiresPowerCycle = ETBFreq
	requiresPowerCycle = EmulFreq
    requiresPowerCycle = sparkMode
    requiresPowerCycle = launchPin
    requiresPowerCycle = launchEnable
    requiresPowerCycle = launchHiLo
    requiresPowerCycle = flexEnabled
    requiresPowerCycle = vssMode
    requiresPowerCycle = oddfire2
    requiresPowerCycle = oddfire3
    requiresPowerCycle = oddfire4
    requiresPowerCycle = iacCLminDuty
    requiresPowerCycle = iacCLmaxDuty
    requiresPowerCycle = useExtBaro
    requiresPowerCycle = useEMAP
    requiresPowerCycle = baroPin
    requiresPowerCycle = rotaryType
    requiresPowerCycle = stagedInjSizePri
    requiresPowerCycle = stagedInjSizeSec
    requiresPowerCycle = stagingEnabled
    requiresPowerCycle = resetControl
    requiresPowerCycle = resetControlPin
    requiresPowerCycle = n2o_enable
    requiresPowerCycle = n2o_arming_pin
    requiresPowerCycle = n2o_pin_polarity
    requiresPowerCycle = knock_mode
    requiresPowerCycle = knock_pin
    requiresPowerCycle = knock_trigger
    requiresPowerCycle = knock_pullup
    requiresPowerCycle = idleUpEnabled
    requiresPowerCycle = idleUpOutputEnabled
    requiresPowerCycle = CTPSEnabled
    requiresPowerCycle = CTPSPin
    requiresPowerCycle = CTPSPolarity
    requiresPowerCycle = legacyMAP
    requiresPowerCycle = fuel2InputPin
    requiresPowerCycle = fuel2InputPolarity
    requiresPowerCycle = wmiEnabled
    requiresPowerCycle = wmiEmptyEnabled
    requiresPowerCycle = wmiEmptyPin
    requiresPowerCycle = wmiEmptyPolarity
    requiresPowerCycle = wmiIndicatorEnabled
    requiresPowerCycle = wmiIndicatorPin
    requiresPowerCycle = wmiIndicatorPolarity
    requiresPowerCycle = vvtCLminDuty
    requiresPowerCycle = vvtCLmaxDuty

    requiresPowerCycle = caninput_sel0a
    requiresPowerCycle = caninput_sel0b
    requiresPowerCycle = caninput_sel1a
    requiresPowerCycle = caninput_sel1b
    requiresPowerCycle = caninput_sel2a
    requiresPowerCycle = caninput_sel2b
    requiresPowerCycle = caninput_sel3a
    requiresPowerCycle = caninput_sel3b
    requiresPowerCycle = caninput_sel4a
    requiresPowerCycle = caninput_sel4b
    requiresPowerCycle = caninput_sel5a
    requiresPowerCycle = caninput_sel5b
    requiresPowerCycle = caninput_sel6a
    requiresPowerCycle = caninput_sel6b
    requiresPowerCycle = caninput_sel7a
    requiresPowerCycle = caninput_sel7b
    requiresPowerCycle = caninput_sel8a
    requiresPowerCycle = caninput_sel8b
    requiresPowerCycle = caninput_sel9a
    requiresPowerCycle = caninput_sel9b
    requiresPowerCycle = caninput_sel10a
    requiresPowerCycle = caninput_sel10b
    requiresPowerCycle = caninput_sel11a
    requiresPowerCycle = caninput_sel11b
    requiresPowerCycle = caninput_sel12a
    requiresPowerCycle = caninput_sel12b
    requiresPowerCycle = caninput_sel13a
    requiresPowerCycle = caninput_sel13b
    requiresPowerCycle = caninput_sel14a
    requiresPowerCycle = caninput_sel14b
    requiresPowerCycle = caninput_sel15a
    requiresPowerCycle = caninput_sel15b
    requiresPowerCycle = outputPin

    defaultValue = pinLayout,   1
    defaultValue = TrigPattern, 0
    defaultValue = useResync,   1
    defaultValue = trigPatternSec,  0
    defaultValue = sparkMode,   0
    defaultValue = injAng,      355 355 355 355
    defaultValue = injAngRPM,   500 2000 4500 6500
    defaultValue = nInjectors,  4
    defaultValue = dutyLim,     80
    defaultValue = mapMin,      10
    defaultValue = mapMax,      260
    defaultValue = baroMin,     10
    defaultValue = baroMax,     260
    defaultValue = useEMAP,     0
    defaultValue = EMAPMin,     10
    defaultValue = EMAPMax,     260
    defaultValue = mapSwitchPoint,  0
    defaultValue = fpPrime,     3
    defaultValue = TrigFilter,  0
    defaultValue = ignCranklock,0
    defaultValue = multiplyMAP, 0
    defaultValue = includeAFR,  0
    defaultValue = incorporateAFR,  0
    defaultValue = stoich,      14.7
    defaultValue = flexEnabled, 0
    defaultValue = oddfire2,    0
    defaultValue = oddfire3,    0
    defaultValue = oddfire4,    0
    defaultValue = flexFreqLow, 50
    defaultValue = flexFreqHigh,150
    defaultValue = fuelPumpPin, 0
    defaultValue = fanPin,      0
    defaultValue = iacCLminDuty,0
    defaultValue = iacCLmaxDuty,100
    defaultValue = iacTPSlimit, 5
    defaultValue = iacRPMlimitHysteresis, 200
    defaultValue = boostMinDuty,0
    defaultValue = boostMaxDuty,100
    defaultValue = boostSens,   2000
    defaultValue = boostIntv,   30
    defaultValue = sparkDur,    1.0
    defaultValue = fixAngEnable,0
    defaultValue = n2o_enable,  0
    defaultValue = speeduino_tsCanId, 0
    defaultValue = true_address, 256
    defaultValue = realtime_base_address, 336
    defaultValue = stagingEnabled, 0
    defaultValue = lnchCtrlTPS, 0
    defaultValue = resetControl, 0
    defaultValue = bootloaderCaps, 0
    defaultValue = aeTaperMin, 1000
    defaultValue = aeTaperMax, 5000
    defaultValue = aeColdPct, 100
    defaultValue = aeColdTaperMin, 0
    defaultValue = aeColdTaperMax, 60
    defaultValue = aeMode, 0 ;Set aeMode to TPS
    defaultValue = batVoltCorrect, 0
    defaultValue = aeApplyMode, 0
    defaultValue = legacyMAP, 0
    defaultValue = battVCorMode, 1
    defaultValue = idleAdvEnabled, 0 ;Idle advance control turned off
    defaultValue = aseTaperTime, 0.0
    defaultValue = dfcoDelay, 0.1
    defaultValue = idleTaperTime, 1.0
    defaultValue = dfcoDelay, 0.1
    defaultValue = dfcoMinCLT, 25
    defaultValue = crankingEnrichTaper, 0.1
    defaultValue = boostCutEnabled,     1
    defaultValue = primingDelay, 0.5
    defaultValue = vvtCLminDuty, 0
    defaultValue = vvtCLmaxDuty, 80 ;80% is a completely arbitrary amount for the max duty cycle, but seems inline with most VVT documentation
    defaultValue = vvtCL0DutyAng, 0
    defaultValue = vvt2CL0DutyAng, 0
    defaultValue = ANGLEFILTER_VVT, 0
    defaultValue = idleAdvStartDelay, 0.2 ;0.2S for a quick gear change without change the table advance
    defaultValue = boostByGearEnabled, 0
    #if CELSIUS
    defaultValue = vvtMinClt, 70
    #else
    defaultValue = vvtMinClt, 160
    #endif
    defaultValue = vvtDelay, 60
	
    ;Default pins
    defaultValue = fanPin,      0
    defaultValue = vvt1Pin,      0
    defaultValue = vvt2Pin,      0
    defaultValue = launchPin,   0
    defaultValue = boostPin,    0
    defaultValue = fuelPumpPin, 0
    defaultValue = tachoPin,    0
	defaultValue = ETBEnable,    0
	defaultValue = ETBInv,       0
    defaultValue = tachoDuration, 2
    defaultValue = useTachoSweep, 0
    defaultValue = tachoSweepMaxRPM,  6000
    defaultValue = perToothIgn, 0
    defaultValue = resetControlPin, 0

    ;Default ADC filter values
    defaultValue = ADCFILTER_TPS,  50
    defaultValue = ADCFILTER_CLT, 180
    defaultValue = ADCFILTER_IAT, 180
    defaultValue = ADCFILTER_O2,  100
    defaultValue = ADCFILTER_BAT, 128
    defaultValue = ADCFILTER_MAP,  20 ;This is only used on Instantaneous MAP readings and is intentionally very weak to allow for faster response
    defaultValue = ADCFILTER_BARO, 64
    defaultValue = FILTER_FLEX,   75

    ;Again, force the setting from the controller for the trigger edges. This is particularly useful for the Oct 2018 update where the names of the dges changed
    controllerPriority = TrigEdge
    controllerPriority = TrigEdgeSec
    ;VSS Ratios and calibration need controller priority so they can be set with the command buttons
    controllerPriority = vssPulsesPerKm
    controllerPriority = vssRatio1
    controllerPriority = vssRatio2
    controllerPriority = vssRatio3
    controllerPriority = vssRatio4
    controllerPriority = vssRatio5
    controllerPriority = vssRatio6 

    ;These are the limits for each of the load algorithms (Refer to the PC Variables section)
    ;Order is:                        MAP   TPS   IMAP/EMAP ITB UNUSED  UNUSED  UNUSED  UNUSED
    defaultValue = algorithmLimits,   511   100   511       511 100     100     100     100
    defaultValue = fuelLoadMax, 511
    defaultValue = ignLoadMax, 511
    defaultValue = fuel2LoadMax, 511
    defaultValue = ign2LoadMax, 511
	
	    ;SD / RTC related
    defaultValue = rtc_mode, 0       
    defaultValue = onboard_log_file_rate, 4      
    defaultValue = onboard_log_filenaming, 0   
    defaultValue = onboard_log_storage,   0    
    defaultValue = onboard_log_trigger_boot, 0    
    defaultValue = onboard_log_trigger_RPM, 0   
    defaultValue = onboard_log_trigger_prot, 0   
    defaultValue = onboard_log_trigger_Vbat, 0   
    defaultValue = onboard_log_trigger_Epin, 0
    defaultValue = onboard_log_tr1_duration, 60  
    defaultValue = onboard_log_tr2_thr_on, 600  
    defaultValue = onboard_log_tr2_thr_off,400  
    defaultValue = onboard_log_tr3_thr_RPM, 0
    defaultValue = onboard_log_tr3_thr_MAP, 0
    defaultValue = onboard_log_tr3_thr_Oil, 0
    defaultValue = onboard_log_tr3_thr_AFR, 0
    defaultValue = onboard_log_tr4_thr_on, 12.5  
    defaultValue = onboard_log_tr4_thr_off, 7.0  
    defaultValue = onboard_log_tr5_thr_on, 0  
    defaultValue = onboard_log_csv_separator, 0


    ;VSS related settings
    defaultValue = vssPulsesPerKm, 3000
    defaultValue = vssSmoothing, 50	
    defaultValue = vssRatio1, 10.0
    defaultValue = vssRatio2, 16.0
    defaultValue = vssRatio3, 22.0
    defaultValue = vssRatio4, 28.0
    defaultValue = vssRatio5, 34.0
    defaultValue = vssRatio6, 40.0
    controllerPriority = vssRatio1
    controllerPriority = vssRatio2
    controllerPriority = vssRatio3
    controllerPriority = vssRatio4
    controllerPriority = vssRatio5
    controllerPriority = vssRatio6


    ;pinLayout     = bits,   U08,      15, [0:7],  "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "01-05 MX5 PNP", "INVALID", "96-97 MX5 PNP", "NA6 MX5 PNP", "Turtana PCB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "ATMEL PnP ETB", "INVALID", "ATMEL PnP non ETB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "DIY-EFI CORE4 v1.0", "INVALID", "INVALID", "INVALID", "INVALID", "Teensy RevA", "Teensy RevB", "INVALID", "INVALID", "INVALID", "Teensy PNP", "INVALID", "INVALID", "INVALID", "INVALID", "ARM STM32 ETB", "INVALID", "INVALID", "ARM STM32 non ETB", $invalid_x128, $invalid_x64
    defaultValue = boardFuelOutputs
    defaultValue = boardIgnOutputs
    defaultValue = boardHasRTC,                     0             0          0          0          0           0         0                 0         0                 0               0             0          0          0         0           0         0           0         0           0         0          0           0         0           0          0          0         0           0         0           0            0            0               0                0         0           0         0           0          0          0         0          0           0         0           0                    0           0           0           0         8            8               0          0          0          8           0            0           0           0         8              0            0          8                  0                 0                   

    controllerPriority = bootloaderCaps

    defaultValue = AUXin00Alias, Aux0
    defaultValue = AUXin01Alias, Aux1
    defaultValue = AUXin02Alias, Aux2
    defaultValue = AUXin03Alias, Aux3
    defaultValue = AUXin04Alias, Aux4
    defaultValue = AUXin05Alias, Aux5
    defaultValue = AUXin06Alias, Aux6
    defaultValue = AUXin07Alias, Aux7
    defaultValue = AUXin08Alias, Aux8
    defaultValue = AUXin09Alias, Aux9
    defaultValue = AUXin10Alias, Aux10
    defaultValue = AUXin11Alias, Aux11
    defaultValue = AUXin12Alias, Aux12
    defaultValue = AUXin13Alias, Aux13
    defaultValue = AUXin14Alias, Aux14
    defaultValue = AUXin15Alias, Aux15

    defaultValue = prgm_out00Alias, PrgmOut0
    defaultValue = prgm_out01Alias, PrgmOut1
    defaultValue = prgm_out02Alias, PrgmOut2
    defaultValue = prgm_out03Alias, PrgmOut3
    defaultValue = prgm_out04Alias, PrgmOut4
    defaultValue = prgm_out05Alias, PrgmOut5
    defaultValue = prgm_out06Alias, PrgmOut6
    defaultValue = prgm_out07Alias, PrgmOut7

    defaultValue = rpmwarn, 3000
    defaultValue = rpmdang, 5000
    defaultValue = rpmhigh, 8000

    defaultValue = mapwarn, 200
    defaultValue = mapdang, 245
    defaultValue = maphigh, 255
	
	defaultValue = batlow,  11.8
    defaultValue = bathigh, 15

#if LAMBDA
      defaultValue = wueAFR, -0.136 -0.102 -0.082 -0.068 -0.054 -0.041 -0.027 -0.014 -0.007 0.000
#else
      defaultValue = wueAFR, -2.0 -1.5 -1.2 -1.0 -0.8 -0.6 -0.4 -0.2 -0.1 0.0
#endif

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

menuDialog = main

   menu = "Settings"
      subMenu = engine_constants,   "Configuration Moteur"
      subMenu = triggerSettings,    "Reglages roues phonique"
      subMenu = OLED,               "OLED Setup"
      subMenu = std_realtime,       "Affichage temps reel"
      subMenu = reset_control,      "Reset Control"
      subMenu = std_separator	  
      groupMenu = "Protection Moteur"
        groupChildMenu = engineProtection,          "Protection communes moteur"
        groupChildMenu = revLimiterDialog,          "Limiteur de regime",             { engineProtectType }
        groupChildMenu = boostCut,                  "coupure turbo",                { engineProtectType }
        groupChildMenu = oilPressureProtection,     "Pression huile",             { engineProtectType }	 
		groupChildMenu = EGTProtection,     "Seuil EGT",             { engineProtectType }	  
      subMenu = std_separator
      subMenu = gaugeLimits, "Limites des gauges"
      subMenu = std_separator
      subMenu = io_summary, "I/O Actives"
      subMenu = std_separator
      subMenu = prgm_out_config,  "Sorties Programmables"

   menu = "&Carburant"
   
      subMenu = injChars,           "Characteristiques injecteurs"  
      subMenu = accelEnrichments,   "Enrichissement Acceleration"
      subMenu = egoControl,         "AFR/O2", 3
      subMenu = flexFueling,        "Flex Fuel",        2
      subMenu = airdensity_curve,   "IAT Densite AIR"
      subMenu = baroFuel_curve,     "Baro/MAF Correction"	  
      subMenu = std_separator	  
      subMenu = veTableDialog,      "Injection Table 1",       0
      subMenu = fuelTable2Dialog,   "Injection Table 2", 11	  
      subMenu = afrTable1Tbl,       "AFR Table",       5
      subMenu = std_separator
      subMenu = inj_trimad,         "Sequential fuel trim (1-4)", 9
      subMenu = inj_trimad_B,       "Sequential fuel trim (5-8)", 9, { nFuelChannels >= 5 }
      subMenu = std_separator
      subMenu = stagingTableDialog, "Injection Etage", 10, { nCylinders <= 4 || injType == 1 } ; Can't do staging on more than 4 cylinder engines unless TBI is used
      subMenu = std_separator
      subMenu = fuelTemp_curve,     "Correction temperature carburant", { flexEnabled }

   menu = "&Allumage"
      subMenu = sparkSettings,          "Reglage allumage"
      subMenu = std_separator	  
      subMenu = sparkTbl,               "Allumage Table 1", 2
	  subMenu = sparkTable2Dialog,      "Allumage Table 2", 14
      subMenu = std_separator	  
      subMenu = dwellSettings,          "Reglage Dwell"
      subMenu = dwell_correction_curve, "Dwell Compensation"
      subMenu = dwell_map,              "Dwell Map",  { useDwellMap }
      subMenu = iat_retard_curve,       "IAT Retard allumage"
      subMenu = clt_advance_curve,      "Advance a froid"
      subMenu = knockSettings,          "Cliquetis"
      subMenu = rotary_ignition,        "Moteur Rotatif",    { sparkMode == 4 }

   menu = "&Demarrage/Ralenti"
        subMenu = crankPW,              "Reglage demarreur"
        subMenu = primePW,              "Premiere impulsion mouillage"
        subMenu = warmup,               "Courbe de Stater"
        subMenu = ASE,                  "Enrichissement apres demarrage (ASE)"
        subMenu = std_separator
        subMenu = idleSettings,         "Vanne de ralenti"
        subMenu = iacClosedLoop_curve,  "Cible regime", 7, { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 }
        subMenu = iacPwm_curve,         "PWM ouverture vanne", 7, { iacAlgorithm == 2 || iacAlgorithm == 6 || iacAlgorithm == 7}
        subMenu = iacPwmCrank_curve,    "PMW ouverture sur demarreur", 7, { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7}
        subMenu = iacStep_curve,        "Stepper Moteur pas a pas", 7, { iacAlgorithm == 4  }
        subMenu = iacStepCrank_curve,   "Stepper Moteur sur demarreur", 7, { iacAlgorithm == 4 || iacAlgorithm == 5 }
        subMenu = std_separator
        subMenu = idleUpSettings,       "Reglage ajout ouverture vanne", { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || iacAlgorithm == 7 }
        subMenu = std_separator
        subMenu = idleAdvanceSettings,  "Avance allumage sur ralentie"
        subMenu = iacVoltageSettings,   "Idle PWM - Voltage Correction" { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
		
    menu = "&Accessoires"
        subMenu = fanSettings,          "Ventillateur moteur" 
        subMenu = pwmFan,               "PWM Ventillateur", { fanEnable == 2 }
		subMenu = emultempSettings,     "Emulateur temperature moteur" { fanEnable != 2 }
        subMenu = pwmemultemp,          "PWM simulation temperature",  { simultempEnabled }
        subMenu = LaunchControl,        "Launch Control / Flat Shift"
        subMenu = fuelpump,             "Pompe a carburant"
        subMenu = NitrousControl,       "Nitro"
        subMenu = vssSettings,          "Detection vitesse et rapport"
        subMenu = std_separator
        subMenu = boostSettings,        "Controleur Turbo"
        subMenu = boostLoad,            "Boost Pression/Duty", 8,  { boostEnabled }
        subMenu = std_separator
        subMenu = vvtSettings,          "Controleur VVT"
        subMenu = vvtTbl,               "VVT Angle/Duty", 8,  { vvtEnabled }
        subMenu = vvt2Tbl,              "VVT2 Angle/Duty", 8,  { vvtEnabled && vvt2Enabled }
        subMenu = std_separator
        subMenu = wmiSettings,          "Injection de Methanol", { !vvtEnabled }
        subMenu = wmiTbl,               "WMI - Methanol duty cycle", 8,  { !vvtEnabled && wmiEnabled && wmiMode > 1 }  
        subMenu = std_separator
        subMenu = tacho,                "Compte Tours"
        subMenu = ETB,                  "Controleur ETB"
		subMenu = halexconsigne,        "Controleur HALDEX", {canHALDEXCluster}
        subMenu = std_separator

    #if CAN_COMMANDS
        subMenu = can_serial3IO,        "Canbus/Interface d'E/S serie secondaire"
        subMenu = CanBcast,             "Emission CAN constructeur", { enable_intcan && intcan_available }		
        subMenu = std_separator
        subMenu = Canin_config,         "Configuration du canal d'entree auxiliaire externe", {enable_secondarySerial || (enable_intcan && intcan_available)}
        subMenu = Auxin_config,         "Configuration du canal d'entree auxiliaire local"
        ;subMenu = std_separator
        subMenu = Canout_config, "Configuration Canbus Sortie"
    #else
        subMenu = serial3IO,            "Canbus/Interface d'E/S serie secondaire"
		subMenu = CanBcast,             "Emission CAN constructeur", { enable_intcan && intcan_available }
        subMenu = std_separator
        subMenu = Canin_config,         "Configuration du canal d'entree auxiliaire externe", {enable_secondarySerial || (enable_intcan && intcan_available)}    
        subMenu = Auxin_config,         "Configuration du canal d'entree auxiliaire local"
    #endif
        subMenu = pressureSensors,      "Pression Carburant/Huile"
        subMenu = EGTSensors,      "EGT echappement"
  menuDialog = main
   menu = "Tools"
        subMenu = mapCal,           "Calibration Capteur de pression"
        subMenu = batCal,           "Calibration lecture de tension"
        subMenu = std_ms2gentherm,  "Calibration Capteur de temperature", 0
        subMenu = std_ms2geno2,     "Calibration information AFR", { egoType > 0 }
        subMenu = sensorFilters,    "Filtre des entrees analogiques"

    menu = "Data Logging"
      #if mcu_teensy
        subMenu = std_ms3SdConsole,   "Browse / Import SD Card"
        subMenu = rtc_settings,       "Setup realtime clock"
        subMenu = onboard_log_setup,  "Setup onboard logger / SD"
      #else
        subMenu = std_ms3SdConsole,   "Browse / Import SD Card",  { arrayValue( array.boardHasRTC, pinLayout ) > 0 }
        subMenu = rtc_settings,       "Setup realtime clock",   { arrayValue( array.boardHasRTC, pinLayout ) > 0 }
        subMenu = onboard_log_setup,  "Setup onboard logger / SD",   { arrayValue( array.boardHasRTC, pinLayout ) > 0 }
      #endif

   menuDialog = main
      menu = "3D &Tuning Maps"
        subMenu = veTable1Map,    "Table injection 1", 2
		subMenu = fuel2Map,       "Table injection 2", 11
        subMenu = sparkMap,       "Table allumage 1", 3
		subMenu = spark2Map,      "Table allumage 2", 14
        subMenu = afrTable1Map,   "Table AFR"
		
#if enablehardware_test
   menuDialog = main
    menu = "Test Sorties"
        subMenu = outputtest1, "Test injecteurs-allumages"
		    subMenu = stm32cmd,    "STM32 Commands"
        ;subMenu = rtc_settings,       "Setup realtime clock"
#endif

    menu = "Help"
        subMenu = helpGeneral,     "ECU Aide"
;-------------------------------------------------------------------------------

[SettingContextHelp]
; constantName = "Help Text"
; These provide the context help in the dialog when these variables are used
  nCylinders        = "Nombres de Cylindes"
  alternate         = "Si oui ou non les injecteurs doivent etre tires en meme temps. Ce parametre est ignore lorsque Sequential est selectionne ci-dessous, mais il affectera toujours la valeur req_fuel."
  engineType        = "Les moteurs avec un nombre egal de degres entre tous les tirs (il s'agit de la plupart des moteurs) doivent selectionner Normale. Certains moteurs 2 et 6 cylindres sont cependant depase."
  twoStroke         = "Quatre temps (la plupart des moteurs), deux temps."
  nInjectors        = "Nombre d'injecteurs primaires."
  mapSample         = "La methode utilisee pour calculer la lecture MAP\nPour les moteurs 1-2 cylindres, Cycle Minimum est recommande.\nPour plus de 2 cylindres evenement moyen est recommande"
  mapSwitchPoint    = "En dessous de cette methode d'echantillon de carte instantanee RPM est utilisee, au lieu de celle selectionnee.\nDefinir 0 RPM pour desactiver (par defaut)"
  stoich            = "La ration stoechiometrique du carburant utilise. Pour le carburant flexible, choisissez le carburant principal. E85 est a 9.8 et le sans plomb est a 14.7"
  injLayout         = "La disposition de l'injecteur et la synchronisation a utiliser. Les options sont : \n 1. Couple - 2 injecteurs par sortie. Les sorties actives sont egales a la moitie du nombre de cylindres. Les sorties sont cadencees sur 1 tour de manivelle. \n 2. Semi-sequentielle : identique a l'appariement, sauf que les canaux d'injection sont en miroir (1&4, 2&3), ce qui signifie que le nombre de sorties utilisees est egal au nombre de cylindres. Uniquement valable pour 4 cylindres ou moins. \n 3. Banked : 2 sorties uniquement utilisees. \n 4. Sequentiel : 1 injecteur par sortie et sorties utilisees equivaut au nombre de cylindres. L'injection est chronometree sur un cycle complet."
  inj4CylPairing    = "Quelles sorties seront jumelees lorsque lbinjection de carburant semi-sequentielle est utilisee (moteurs 4 cylindres). L appariement dépend de l’ordre d allumage"
  TrigPattern       = "Le type de decodeur de declenchement d'entree a utiliser."
  useResync         = "Si elle est activee, la synchronisation sera reverifiee une fois par cycle complet a partir de l'entree de came. C'est bon pour la precision, mais si votre entree de came est bruyante, cela peut causer des problemes."
  trigPatternSec    = "Mode/type de came egalement connu sous le nom de modele de declenchement secondaire."
  numTeeth          = "Nombre de dents sur la roue primaire."
  SYNCTeeth         = "Dent vilebrequin superieur a 1 pour la synchronisation CAM. 1 correspond a niveau de tension"
  TrigSpeed         = "Sourse declenchement primaire."
  missingTeeth      = "Nombre de dents manquantes sur la roue primaire."
  TrigAng           = "L'angle ATDC lorsque la dent No:1 sur la roue primaire passe le capteur primaire. La plage de ce champ est de -360 a +360 degres."
  TrigAngMul        = "Un multiplicateur utilise par les roues dentees non a 360 degres (c'est-a-dire les roues ou le nombre de dents ne se divise pas uniformement en 360. Utilisation : (360 * <multiplicateur>) / nombre de dents = nombre entier"
  SkipCycles        = "Le nombre de tours qui seront sautes pendant le demarrage avant que les injecteurs et les bobines ne soient declenches."
  TrigEdge          = "Le sens de declenchement du capteur principal.\nAvance.\nTrailing."
  TrigEdgeSec       = "Le sens de declenchement du capteur secondaire (Cam).\nAvance.\nTrailing"
  TrigFilter        = "Reglage de l'algorithme du filtre de declenchement. Plus le reglage est agressif, plus le bruit sera supprime, mais cela augmente les chances que certaines lectures vraies soient filtrees (faux positif). Medium est sans danger pour la plupart des configurations. Ne selectionnez « Agressif » que si aucune autre option ne fonctionne"

  sparkMode         = "etincelle perdue : les sorties d'allumage sont sur les canaux <= la moitie du nombre de cylindres. Par exemple, 4 sorties de cylindre sur IGN1 et IGN2.\nCanal unique : toutes les impulsions d'allumage sont emises sur IGN1.\nCOP perdu : les impulsions d'allumage sont emises sur tous les canaux d'allumage jusqu'au nombre de cylindres. Ex : 4 sorties cylindre sur tous les canaux d'allumage. Notez que votre carte doit avoir le meme nombre de sorties d'allumage que de cylindres pour pouvoir executer cela"
  IgInv             = "Si l'etincelle se declenche lorsque le signal d'allumage devient eleve ou faible. Presque tous les systemes d'allumage utilisent « Going Low », mais veuillez verifier cela car des dommages aux bobines peuvent resulter d'une selection incorrecte. (REMARQUE : CE N'EST PAS MEGASQUIRT. CE PARAMeTRE EST GERE DIFFERAMENT !)"
  sparkDur          = "La duree de l'etincelle temps de decharge de la bobine. Typiquement autour de 1ms"
  fixAngEnable      = "S'il est active, le chronometrage sera verrouille/fixe et la carte d'allumage sera ignoree. Notez que cette valeur sera remplacee par la valeur de demarrage fixe lors du demarrage"
  FixAng            = "La synchronisation sera verrouillee a cette valeur si ce qui precede est active"

  crankRPM          = "Le seuil de regime de demarrage. Lorsque RPM est inferieur a cette valeur (et superieur a 0) le systeme sera considere comme etant en demarrage"
  tpsflood          = "Maintenez l'accelerateur au-dessus de cette valeur pour desactiver l'impulsion d'amorcage et le carburant de demarrage. Utilise pour empecher l'inondation ou nettoyer le moteur deja inonde"

  fanWhenCranking   = "Si le ventilateur doit etre desactive ou continuer a fonctionner lorsque le moteur demarre"
  fanWhenOff        = "Si le ventilateur continuera a fonctionner lorsque le moteur est eteint"
  fanPin            = "La broche du processeur sur laquelle le signal de commande sera emis. Ce n'est PAS necessairement la meme que la broche du connecteur sur n'importe quelle carte particuliere"
  fanSP             = "La temperature de declenchement du ventilateur. Le ventilateur sera active au-dessus de cette temperature"

  vssPulsesPerKm    = "Le nombre d'impulsions sur le signal VSS par KM/Mile"
  vssSmoothing      = "Un facteur de lissage pour aider a reduire le bruit dans le signal VSS. Les valeurs typiques sont comprises entre 0 et 50"
  
  iacMinSteps       = "Nombre minimum d'etapes que l'IAC peut etre eloigne de la position d'origine. pour pid"
  iacPWMrun         = "Determine si la vanne de ralenti tourne avant que le moteur ne soit lance. Cela peut aider a demarrer le moteur en laissant entrer plus d'air avant que la synchronisation RPM ne soit atteinte."
  iacTPSlimit       = "Lors de l'utilisation du controle de ralenti OL + CL, si le TPS est superieur a cette valeur, le ralenti en boucle fermee reinitialise l'entier du PID (pour eviter que les baisses de regime ne reviennent au ralenti)"
  iacRPMlimitHysteresis = "Lors de l'utilisation du controle de ralenti en boucle fermee, si le RPM cible en boucle fermee + cette valeur est superieur au RPM reel, le ralenti en boucle fermee reinitialise l'entier du PID (pour eviter que les baisses de RPM ne reviennent au ralenti)"
       
  idleAdvStartDelay = "Le nombre de secondes apres la correspondance des parametres avant que la commande d'avance au ralenti ne commence"

  engineProtectType = "Que le moteur protege un limiteur de regime coupe le carburant, l'allumage ou les deux"
  SoftLimitMode     = "Fixe : le limiteur progressif retardera l'avance a l'allumage a la valeur specifiee.\nRelatif : l'avance de synchronisation actuelle sera redemarree de la quantite specifiee"
  HardRevLim        = "La limite de regime coupure est le point auquel le carburant ou l'allumage (ou les deux) sera completement coupe pour reduire l'augmentation des RPM"
  engineProtectMaxRPM = "Le point de regime a partir duquel les protections du moteur s'engageront. En dessous de cette valeur RPM, les protections du moteur ne seront PAS actives"
  
  cltAdvValues    = "Cette courbe peut etre utilisee pour avancer le calage de l'allumage lorsque le moteur chauffe. Cela peut egalement etre utilise pour rechauffer les convertisseurs catalytiques lors d'un demarrage a froid en retardant la synchronisation. Ou meme comme fonction de securite pour retarder le chronometrage lorsque le moteur est trop chaud pour eviter les cognements."

  wueRates        = "La valeur finale d'enrichissement doit etre de 100 %."

  fpPrime         = "Duree de mise sous tension de la pompe a carburant pour assurer la pression de la conduite de carburant."
  primingDelay    = "Delai d'amorcage apres la mise en marche de la pompe a carburant, utilise pour attendre que la conduite de carburant soit correctement pressurisee."

  fanInv          = "Investion de la commande d'activation"
  fanHyster       = "Le nombre de degres d'hysteresis a utiliser pour controler le ventilateur. Les valeurs recommandees sont comprises entre 2 et 5"

  aeTime          = "La duree de l'enrichissement de l'acceleration"
  aseTaperTime    = "Temps de transition pour desactiver ASE"
  iacChannels     = "Le nombre de canaux de sortie utilises pour les vannes PWM. Selectionnez 1 pour les vannes 2 fils ou 2 pour les vannes 3 fils."
  iacStepTime     = "Duree de chaque impulsion pas a pas. Des valeurs trop faibles peuvent entraîner un comportement erratique du moteur ou pas du tout. Les temps de pas suggeres sont a 8 ms"
  iacCoolTime     = "Temps de mise hors tension entre chaque etape. Mettre a zero si vous ne voulez pas du tout de refroidissement"
  iacStepHome     = "etapes de referencement a effectuer au demarrage. Doit etre superieur a la valeur des marches completement ouvertes"
  iacMaxSteps     = "Nombre maximum d'etapes que l'IAC peut etre eloigne de la position d'origine. Doit toujours etre inferieur aux pas de prise d'origine."
  iacStepHyster   = "Le nombre minimum d'etapes pour se deplacer en une seule fois."
  iacAlgorithm    = "Selectionne la methode de controle du ralenti.\nAucun = pas de vanne de controle de ralenti.\nVanne marche/arret.\nVanne PWM (fil 2,3).\nVanne pas a pas (fils 4,6,8)."
  iacPWMdir       = "Les vannes PWM normales augmentent le regime avec un service plus eleve. Si le regime diminue avec un service plus eleve, selectionnez Inverse"
  iacCLminDuty    = "Lors de l'utilisation du controle de ralenti en boucle fermee, il s'agit du cycle de service minimum autorise par la boucle PID. Combine avec la valeur maximale, cela specifie la plage de travail de votre soupape de ralenti"
  iacCLmaxDuty    = "Lors de l'utilisation du controle de ralenti en boucle fermee, il s'agit du cycle de service maximum autorise par la boucle PID. Combine avec la valeur minimale, cela specifie la plage de travail de votre soupape de ralenti"
  iacFastTemp     = "En dessous de cette temperature, la sortie de ralenti sera elevee (On). Au-dessus de cette temperature, il s'eteindra."
  idleUpPolarity  = "La polarite normale est un interrupteur de masse ou un signal de mise a la masse active le ralenti. Le pullup interne sera active avec une polarite normale. \n Inverse peut etre utilise si un signal 5v est utilise pour activer le ralenti."
  idleUpOutputEnabled = "Activez une sortie qui est basculee par la broche d'entree de ralenti. Un exemple d'utilisation consiste a piloter un relais de ventilateur AC."
  idleUpOutputInv = "Non = Lorsque la broche de ralenti est elevee, la sortie est active (mise a la masse), lorsque la broche de ralenti est faible, la sortie est inactive. Oui = Lorsque la broche de ralenti est elevee, la sortie est inactive, lorsque la broche de ralenti est faible, la sortie est active (mise a la masse)"
  CTPSPolarity    = "La polarite normale est un interrupteur de masse ou un signal de mise a la masse active la position de papillon ferme. Le pullup interne sera active avec une polarite normale. \n Inverse peut etre utilise si un signal 5v est utilise pour activer la position fermee des gaz."
  idleUpAdder     = "La quantite (en % de cycle de service ou en etapes (selon la methode de controle du ralenti utilisee) par laquelle le controle du ralenti augmentera lorsque le ralenti est actif"
  idleAdvEnabled  = "Le parametre ajoute ajoute des valeurs de courbe aux valeurs actuelles de la table d'etincelles lorsque le ralenti defini par l'utilisateur est actif. \n Le reglage commute remplace les valeurs de la table des etincelles et utilise les valeurs de la courbe pour le calage de l'allumage au ralenti."
  idleAdvAlgorithm= "Utilisez le capteur de position du papillon (TPS) ou le capteur de position du papillon ferme (CTPS) pour detecter l'etat de ralenti."
  idleAdvDelay    = "Le nombre de secondes apres que la synchronisation est realisee avant que la commande d'avance au ralenti ne commence"
  idleTaperTime   = "Transition en temps du demarreur aux cibles PWM en cours d'execution"
  iacBatRates     = "Utiliser pour augmenter l'ouverture de vanne de ralentie en fonction de la tension batterie"
  
  oddfire2        = "L'angle ATDC du canal 2 pour les moteurs irregulier. Ceci est relatif a l'angle PMH du canal 1"
  oddfire3        = "L'angle ATDC du canal 3 pour les moteurs irregulier. Ceci est relatif a l'angle PMH du canal 1 (pas canal 2)"
  oddfire4        = "L'angle ATDC du canal 4 pour les moteurs irregulier. Ceci est relatif a l'angle PMH du canal 1 (pas canal 3)"

  aeColdPct       = "Reglage de l'enrichissement de l'acceleration pour moteur froid. Le pourcentage d'ajustement a froid est reduit entre les temperatures de debut et de fin.\n100 % = aucun ajustement."
  aeColdTaperMin  = "Temperature de demarrage de type reglage a froid AE. Lorsque le liquide de refroidissement est inferieur a cette valeur, un reglage complet du froid est applique."
  aeColdTaperMax  = "Temperature de fin de reglage a froid AE. Lorsque le liquide de refroidissement est superieur a cette valeur, aucun reglage a froid n'est applique."
  dfcoRPM         = "Le RPM au-dessus duquel DFCO sera actif. Reglez generalement quelques centaines de tr/min au-dessus de la vitesse de ralenti maximale"
  dfcoHyster      = "Hysteresis pour DFCO RPM. 200-300 RPM est typique pour cela, cependant une valeur plus elevee peut etre necessaire si le RPM fluctue autour de la vitesse de coupure"
  dfcoTPSThresh   = "La valeur TPS en dessous de laquelle DFCO sera actif. La valeur typique est de 3% a 6%, mais une valeur plus elevee peut etre necessaire si le signal TPS est bruyant"
  dfcoDelay       = "Delai d'activation du DFCO."
  dfcoMinCLT      = "Temperature minimale pour activer DFCO."
  crankingEnrichTaper = "Temps entre l'enrichissement du demarrage et l'ASE ou l'execution (apres le demarrage du moteur)."

  launchPin       = "La broche du processeur a laquelle le commutateur d'embrayage est connecte. Ce n'est PAS la broche sur le connecteur, mais la broche a laquelle elle se rapporte"
  launchHiLo      = "Si le signal est haut ou bas lorsque la pedale d'embrayage est engagee. Pour une entree de commutation de masse (la plupart des commutateurs d'embrayage), cela devrait etre BAS"
  lnchPullRes     = "Si la resistance de rappel interne est activee ou laissee flottante. Pour une entree de commutation de masse (la plupart des commutateurs d'embrayage), selectionnez Pullup. Pour une entree 0v-5v, selectionnez Floating"
  lnchCtrlTPS     = "Le regime minimum auquel le controle de lancement s'engagera a"
  lnchSoftLim     = "Le point de regime auquel le reglage du calage de l'allumage de la commande de lancement s'engagera (lorsqu'il est dans des conditions de lancement). Devrait etre en dessous de la limite de regime dur RPM"
  lnchRetard      = "Dans des conditions de lancement (par exemple, embrayage engage), le calage de l'allumage sera regle sur celui-ci lorsqu'il est au-dessus de la limite de regime doux. Cela remplacera tous les autres modificateurs d'allumage"
  lnchHardLim     = "Le point de RPM au dessus duquel le carburant et/ou l'allumage seront coupes lorsque le lancement est actif (Ex : Embrayage enclenche). Consultez la boîte de dialogue Protection du moteur pour definir si c'est le carburant, l'allumage ou les deux qui sont coupes."
  lnchFuelAdd     = "Le % de carburant supplementaire qui sera ajoute pendant les conditions de lancement Soft et Hard. Mis a 0 pour aucun modificateur de carburant."
  ignBypassPin    = "La broche du processeur a laquelle le bypass d'allumage est connecte. Ce n'est PAS la broche sur le connecteur, mais la broche a laquelle elle se rapporte"
  ignBypassEnable = "S'il est active, un signal de masse sera emis pendant le demarrage sur la broche specifiee. Ceci est utilise pour contourner la commande d'allumage pendant le demarrage."
  ignCranklock    = "Sur certains modeles d'allumage a faible resolution, la synchronisation de demarrage peut etre verrouillee pour se produire lorsqu'une impulsion est recue."

  multiplyMAP     = "Si elle est activee, la lecture MAP est incluse directement dans le calcul de la largeur d'impulsion en multipliant la valeur de recherche VE par le rapport MAP:Baro ou MAP/100.\n Cela donne une table VE plus plate qui peut etre plus facile a regler dans certains cas. L'option MAP/100 est generalement utilisee pour la compatibilite avec les tables de carburant d'autres calculateurs. Le rapport MAP:Baro est recommande pour les nouveaux morceaux. \n La table VE doit etre reaccordee lorsque cette valeur est modifiee."
  legacyMAP       = "Utilisez la methode heritee de lecture du capteur MAP qui etait utilisee avant le micrologiciel 201905. Cela devrait UNIQUEMENT etre active si vous effectuez une mise a niveau a partir d'un firmware anterieur a celui-ci"
  includeAFR      = "Lorsqu'elle est activee, la lecture AFR actuelle est incorporee directement dans le calcul de la largeur d'impulsion sous forme de pourcentage du rapport cible actuel. La table VE doit etre reaccordee lorsque cette valeur est modifiee. "
  useExtBaro      = "Par defaut, la mesure de pression barometrique se fait au demarrage. Cependant, en option, un deuxieme capteur de pression peut etre utilise pour effectuer des lectures barometriques en direct pendant que le systeme est allume. Ou cela apportera une correction globale avec un capteur MAF"

  flexEnabled     = "Active les lectures du capteur Flex et permet les reglages ci-dessous"
  flexFreqLow     = "La frequence du capteur a 0% d'ethanol (50 Hz pour le capteur standard GM/Continental)"
  flexFreqHigh    = "La frequence du capteur a 100% d'ethanol (150 Hz pour le capteur standard GM/Continental)"
  flexFuelAdj     = "% de carburant a utiliser pour le % d'ethanol actuel (generalement 100 % a 0 %, 163 % a 100 %)"
  flexAdvAdj      = "Avance supplementaire (en degres) pour le % d'ethanol actuel (generalement 0 @ 0%, 5-8 @ 100%)"
  flexBoostAdj    = "Ajustement, en kPa, de l'objectif de boost pour le % d'ethanol actuel. Les valeurs negatives sont autorisees a reduire le boost a un pourcentage d'ethanol inferieur si necessaire."

  n2o_arming_pin  = "L'interrupteur d'armement/activation nitreux est active."
  n2o_pin_polarity= "Si Nitrous est actif (Arme) lorsque la broche est LOW ou HIGH. Si LOW est selectionne, le pullup interne sera utilise."

  flatSArm        = "Le point de commutation RPM qui determine si un embrayage actif est pour le controle de lancement ou le changement de vitesse a fond. En dessous de ce chiffre, un embrayage engage est considere comme pour le lancement, au-dessus de ce chiffre une entree d'embrayage actif sera consideree comme un changement de vitesse a fond. Cela doit etre regle a au moins plusieurs centaines de tr/min au-dessus du ralenti"
  flatSSoftWin    = "Le nombre de RPM en dessous du point de decalage passage de vitesse a fond ou la softlimit sera appliquee (aka Soft limit window). Les valeurs recommandees sont 200-1000"
  flatSRetard     = "Avance absolue (BTDC) qui sera utilisee en negatif"
  hardCutType     = "Comment les rupteur doivent etre effectuees pour les limites de regime/lancement. La coupure complete arretera tous les evenements d'allumage, la coupure par roulement passera par toutes les sorties d'allumage, en coupant seulement 1 par tour"

  fuel2InputPin   = "La broche du processeur qui est utilisee pour declencher l'activation de la deuxieme table de carburant"
  fuel2InputPolarity = "Si la 2e table d'injection doit etre active lorsque l'entree est haute ou basse."
  fuel2InputPullup = "S'il faut utiliser le PULLUP integre pour l'entree de la carte. Cela devrait etre Non sauf montage personnel"

  enable_secondarySerial = "Ceci active le port serie secondaire. La serie secondaire est la serie3 sur le processeur mega2560 et la serie2 sur le processeurs Teensy, ne pas utiliser sur le processeur ARM"
  
  cltAdvValues    = "Cette courbe peut etre utilisee pour avancer le calage de l'allumage lorsque le moteur chauffe. Cela peut egalement etre utilise pour rechauffer les convertisseurs catalytiques lors d'un demarrage a froid en retardant la synchronisation. Ou meme comme fonction de securite pour retarder le chronometrage lorsque le moteur est trop chaud pour eviter les cognements."

  speeduino_tsCanId = "Il s'agit du TsCanId auquel l'ECU matzs repondra. Cela doit correspondre a l'ID CAN du controleur principal dans les proprietes du projet s'il est connecte directement a TunerStudio, sinon l'ID de l'appareil s'il est connecte via CAN passthrough"
  true_address    = "Il s'agit de l'adresse Can 11 bits de l'ECU matzs "
  realtime_base_address = "Il s'agit de l'adresse CAN 11 bits des donnees en temps reel diffusees par l'ECU matzs. Cela DOIT etre au moins 0x16 superieur a la vraie adresse"
  ;obd_address = "L'adresse 11 bits peut a laquelle l'ECU matzs repond pour les demandes de diagnostic OBD2"
  AUXin00Alias    = "L'alias Ascii attribue au canal d'entree Aux 0"
  AUXin01Alias    = "L'alias Ascii attribue au canal d'entree Aux 1"
  AUXin02Alias    = "L'alias Ascii attribue au canal d'entree Aux 2"
  AUXin03Alias    = "L'alias Ascii attribue au canal d'entree Aux 3"
  AUXin04Alias    = "L'alias Ascii attribue au canal d'entree Aux 4"
  AUXin05Alias    = "L'alias Ascii attribue au canal d'entree Aux 5"
  AUXin06Alias    = "L'alias Ascii attribue au canal d'entree Aux 6"
  AUXin07Alias    = "L'alias Ascii attribue au canal d'entree Aux 7"
  AUXin08Alias    = "L'alias Ascii attribue au canal d'entree Aux 8"
  AUXin09Alias    = "L'alias Ascii attribue au canal d'entree Aux 9"
  AUXin10Alias    = "L'alias Ascii attribue au canal d'entree Aux 10"
  AUXin11Alias    = "L'alias Ascii attribue au canal d'entree Aux 11"
  AUXin12Alias    = "L'alias Ascii attribue au canal d'entree Aux 12"
  AUXin13Alias    = "L'alias Ascii attribue au canal d'entree Aux 13"
  AUXin14Alias    = "L'alias Ascii attribue au canal d'entree Aux 14"
  AUXin15Alias    = "L'alias Ascii attribue au canal d'entree Aux 15"
  
  caninput_sel0a  = "Ceci active l'analogique/numerique local sur le canal d'entree 0 "
  caninput_sel1a  = "Ceci active l'analogique/numerique local sur le canal d'entree 1 "
  caninput_sel2a  = "Ceci active l'analogique/numerique local sur le canal d'entree 2 "
  caninput_sel3a  = "Ceci active l'analogique/numerique local sur le canal d'entree 3 "
  caninput_sel4a  = "Ceci active l'analogique/numerique local sur le canal d'entree 4 "
  caninput_sel5a  = "Ceci active l'analogique/numerique local sur le canal d'entree 5 "
  caninput_sel6a  = "Ceci active l'analogique/numerique local sur le canal d'entree 6 "
  caninput_sel7a  = "Ceci active l'analogique/numerique local sur le canal d'entree 7 "
  caninput_sel8a  = "Ceci active l'analogique/numerique local sur le canal d'entree 8 "
  caninput_sel9a  = "Ceci active l'analogique/numerique local sur le canal d'entree 9 "
  caninput_sel10a = "Ceci active l'analogique/numerique local sur le canal d'entree 10 "
  caninput_sel11a = "Ceci active l'analogique/numerique local sur le canal d'entree 11 "
  caninput_sel12a = "Ceci active l'analogique/numerique local sur le canal d'entree 12 "
  caninput_sel13a = "Ceci active l'analogique/numerique local sur le canal d'entree 13 "
  caninput_sel14a = "Ceci active l'analogique/numerique local sur le canal d'entree 14 "
  caninput_sel15a = "Ceci active l'analogique/numerique local sur le canal d'entree 15 "
  
  caninput_sel0b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 0 "
  caninput_sel1b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 1 "
  caninput_sel2b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 2 "
  caninput_sel3b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 3 "
  caninput_sel4b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 4 "
  caninput_sel5b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 5 "
  caninput_sel6b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 6 "
  caninput_sel7b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 7 "
  caninput_sel8b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 8 "
  caninput_sel9b  = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 9 "
  caninput_sel10b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 10 "
  caninput_sel11b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 11 "
  caninput_sel12b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 12 "
  caninput_sel13b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 13 "
  caninput_sel14b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 14 "
  caninput_sel15b = "Cela active les donnees CAN externes via le module d'extension CANBUS serie secondaire ou analogique/numerique local sur le canal d'entree 15 "

  caninput_source_can_address0  = "L'adresse CAN source 11 bits des donnees pour le canal 0"
  caninput_source_can_address1  = "L'adresse CAN source 11 bits des donnees pour le canal 1"
  caninput_source_can_address2  = "L'adresse CAN source 11 bits des donnees pour le canal 2"
  caninput_source_can_address3  = "L'adresse CAN source 11 bits des donnees pour le canal 3"
  caninput_source_can_address4  = "L'adresse CAN source 11 bits des donnees pour le canal 4"
  caninput_source_can_address5  = "L'adresse CAN source 11 bits des donnees pour le canal 5"
  caninput_source_can_address6  = "L'adresse CAN source 11 bits des donnees pour le canal 6"
  caninput_source_can_address7  = "L'adresse CAN source 11 bits des donnees pour le canal 7"
  caninput_source_can_address8  = "L'adresse CAN source 11 bits des donnees pour le canal 8 "
  caninput_source_can_address9  = "L'adresse CAN source 11 bits des donnees pour le canal 9"
  caninput_source_can_address10 = "L'adresse CAN source 11 bits des donnees pour le canal 10"
  caninput_source_can_address11 = "L'adresse CAN source 11 bits des donnees pour le canal 11"
  caninput_source_can_address12 = "L'adresse CAN source 11 bits des donnees pour le canal 12"
  caninput_source_can_address13 = "L'adresse CAN source 11 bits des donnees pour le canal 13"
  caninput_source_can_address14 = "L'adresse CAN source 11 bits des donnees pour le canal 14"
  caninput_source_can_address15 = "L'adresse CAN source 11 bits des donnees pour le canal 15"
  caninput_source_start_byte0   = "L'octet de depart auquel les donnees commencent pour la chaînel 0"
  caninput_source_start_byte1   = "L'octet de depart auquel les donnees commencent pour la chaînel 1"
  caninput_source_start_byte2   = "L'octet de depart auquel les donnees commencent pour la chaînel 2"
  caninput_source_start_byte3   = "L'octet de depart auquel les donnees commencent pour la chaînel 3"
  caninput_source_start_byte4   = "L'octet de depart auquel les donnees commencent pour la chaînel 4"
  caninput_source_start_byte5   = "L'octet de depart auquel les donnees commencent pour la chaînel 5"
  caninput_source_start_byte6   = "L'octet de depart auquel les donnees commencent pour la chaînel 6"
  caninput_source_start_byte7   = "L'octet de depart auquel les donnees commencent pour la chaînel 7"
  caninput_source_start_byte8   = "L'octet de depart auquel les donnees commencent pour la chaînel 8"
  caninput_source_start_byte9   = "L'octet de depart auquel les donnees commencent pour la chaînel 9"
  caninput_source_start_byte10  = "L'octet de depart auquel les donnees commencent pour la chaînel 10"
  caninput_source_start_byte11  = "L'octet de depart auquel les donnees commencent pour la chaînel 11"
  caninput_source_start_byte12  = "L'octet de depart auquel les donnees commencent pour la chaînel 12"
  caninput_source_start_byte13  = "L'octet de depart auquel les donnees commencent pour la chaînel 13"
  caninput_source_start_byte14  = "L'octet de depart auquel les donnees commencent pour la chaînel 14"
  caninput_source_start_byte15  = "L'octet de depart auquel les donnees commencent pour la chaînel 15"
  caninput_source_num_bytes0    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes1    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes2    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes3    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes4    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes5    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes6    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes7    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes8    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes9    = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes10   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes11   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes12   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes13   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes14   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"
  caninput_source_num_bytes15   = "Le nombre d'octets a partir desquels les donnees sont constituees a partir du numero d'octet de depart selectionne"

  cmdEnableTestMode = "Cliquez dessus pour activer le mode test. Cela ne sera pas disponible si le moteur tourne"
  cmdStopTestMode = "Cliquez dessus pour desactiver le mode test"
  cmdtestinj150dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj250dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj350dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj450dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj550dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj650dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj750dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestinj850dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestspk150dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestspk250dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestspk350dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"
  cmdtestspk450dc = "Cela fera cycler la sortie a 50% du cycle de service a un intervalle de 1 s"

  ADCFILTER_TPS   = "Valeurs recommandees: 50"
  ADCFILTER_CLT   = "Valeurs recommandees: 180"
  ADCFILTER_IAT   = "Valeurs recommandees : 180"
  ADCFILTER_O2    = "Valeurs recommandees : 128"
  ADCFILTER_BAT   = "Valeurs recommandees : 128"
  ADCFILTER_MAP   = "Ce parametre n'est disponible que lors de l'utilisation de la methode d'echantillonnage MAP instantanee. Valeur recommandee : 20"
  ADCFILTER_BARO  = "Ce parametre n'est disponible que lors de l'utilisation d'un capteur Baro externe ou d'un MAF. Valeur recommandee : 64 Baro ou 10 MAF"
  FILTER_FLEX     = "Des valeurs plus elevees fournissent plus de filtrage, mais une reponse Eth% et temperature de carburant plus lente"

  boostIntv       = "L'intervalle de controle en boucle fermee s'executera toutes ces nombreuses ms. Generalement, les valeurs comprises entre 50 % et 100 % de la frequence de la vanne fonctionnent le mieux"
  boostByGearEnabled = "Open loop -> Limite constante dans le cycle d’utilisation %\nClosed Loop -> Limite constante en kPa Dans les deux cas, l’option multipliée prend simplement un pourcentage des valeurs dans la table boost"
  vvtMode         = "Selectionne la methode de controle VVT.\nOn/Off = Pas de controle PWM et la sortie est uniquement activee ou desactivee.\nOpen Loop = Controle PWM ou le devoir est pris directement a partir de la table VVT.\nClosed Loop = Controle PWM ou la table VVT ​​est la cible de l'angle de came la carte et le service de sortie sont controles par PID."
  vvt2Enabled     = "Sortie VVT ​​secondaire. Utilise la meme frequence et le meme algorithme de controle que la sortie VVT ​​principale."
  vvtPWMdir       = "Ceci est utilise pour inverser la direction PID en boucle fermee VVT ​​si necessaire."
  vvt2PWMdir      = "Ceci est utilise pour inverser la direction PID en boucle fermee VVT2 si necessaire."
  vvtCL0DutyAng   = "Cette valeur est utilisee pour amener l'angle de came VVT ​​a une plage de 0 a 100 en mode boucle fermee en soustrayant cette valeur de la lecture brute de l'angle de came."
  vvt2CL0DutyAng  = "Cette valeur est utilisee pour amener l'angle de came VVT2 a une plage de 0 a 100 en mode boucle fermee en soustrayant cette valeur de la lecture brute de l'angle de came."
  vvtCLMinAng     = "Limite de securite pour la valeur d'angle de came minimale attendue. Si l'angle de came devient plus petit ou egal a cela, il declenche l'etat d'erreur VVT, le reglage en boucle fermee est desactive et le service de sortie VVT ​​tombe a 0%"
  vvtCLMaxAng     = "Limite de securite pour la valeur d'angle de came maximale attendue. Si l'angle de came devient plus grand que cela, il declenche l'etat d'erreur VVT, le reglage en boucle fermee est desactive et le service de sortie VVT ​​tombe a 0%"
  ANGLEFILTER_VVT = "Peut etre utilise pour lisser les lectures d'angle de came si necessaire. Uniquement pris en charge sur des decodeurs specifiques qui ont une capacite de lecture d'angle de came"
  vvtMinClt       = "Temperature minimale du liquide de refroidissement pour activer le VVT"
  vvtDelay        = "Temps d'attente apres avoir atteint la temperature minimale du liquide de refroidissement (temps supplementaire pour le rechauffement de l'huile)"

  stagedInjSizePri= "Taille des injecteurs primaires. La somme des valeurs des injecteurs Pri et Sec DOIT correspondre a la valeur utilisee dans le calcul req_fuel"
  stagedInjSizeSec= "Taille des injecteurs secondaires. La somme des valeurs des injecteurs Pri et Sec DOIT correspondre a la valeur utilisee dans le calcul req_fuel"
  #if resetcontrol_adv
    resetControl  = "Comment controler la fonction de reinitialisation automatique de l'Arduino. REMARQUE : certains de ces parametres necessitent de modifier votre materiel et de remplacer le chargeur de demarrage du processeur. Consultez le Wiki pour plus de details.\n\nDesactive : autorisez le processeur a se reinitialiser lorsqu'une nouvelle connexion serie est etablie.\n\neviter lors de l'execution : maintenez la broche de commande elevee pendant que le moteur est en marche.\n\nevitez toujours : toujours maintenez la broche de controle haute.\n\nCommande serie : maintenez normalement la broche de controle haute, mais tirez-la vers le bas lorsque la commande serie « U » est emise et reinitialisee lors de la reception de plus de donnees."
	#else
    resetControl  = "S'il est defini sur Commande serie, maintenez normalement la broche de controle haute mais tirez-la vers le bas lorsque la commande serie « U » est emise et reinitialisee lors de la reception de plus de donnees. La broche de controle doit etre connectee a la broche de reinitialisation du calculateur."
  #endif
  resetControlPin = "La broche du Processeur utilisee pour controler les reinitialisations."
  
  rtc_mode                  = "Active l'horloge en temps reel pour garder l'heure"
  onboard_log_file_style    = "L'enregistreur de donnees Sdcard peut etre desactive, CSV = valeurs separees par des virgules, le binaire est un format binaire egal a l'etat actuel du style de commande A"
  onboard_log_file_rate     = "Taux auquel les donnees sont enregistrees dans le stockage de l'enregistreur"
  onboard_log_filenaming    = "[ecraser] le fichier est ecrase a chaque demarrage d'un nouveau journal, [Date-heure] cree un nouveau fichier au format AAMMJJ-HHMMSS a chaque demarrage de journal de donnees, [Seqential] numerote les noms de fichiers + 1 a chaque demarrage de journal de donnees"
  onboard_log_storage       = "Seule la [carte SD] car le stockage de donnees est implemente pour le moment, une carte SD formatee FAT16 ou FAT32 peut etre utilisee"
  onboard_log_trigger_boot  = "[Au demarrage] le logger est demarre immediatement au demarrage de la carte"
  onboard_log_trigger_RPM   = "[RPM] l'enregistreur est demarre lorsque RPM est au-dessus du seuil d'activation et s'est arrete en dessous du seuil d'arret"
  onboard_log_trigger_prot  = "[protection du moteur] l'enregistreur est demarre un des bits correspondants dans la protection du moteur est active"
  onboard_log_trigger_Vbat  = "[Tension de la batterie] l'enregistreur est demarre lorsque la tension de la batterie est superieure au seuil d'activation et s'est arrete en dessous du seuil d'arret"
  onboard_log_trigger_Epin  = "[Ext pin [polling]] l'enregistreur fonctionne tant que la broche choisie est haute et s'arrete lorsqu'elle est basse. Lorsqu'il est regle sur [Ext pin [toggle]] l'enregistreur est active/desactive avec une impulsion sur ce numero de broche choisi"
  onboard_log_tr1_duration  = "Lorsque la journalisation a partir du demarrage est activee, il s'agit de la duree pendant laquelle le journal s'executera"  
  onboard_log_tr2_thr_on    = "Lorsque le regime moteur est superieur a ce seuil, l'enregistreur de donnees est demarre"
  onboard_log_tr2_thr_off   = "Lorsque le regime moteur est inferieur a ce seuil, l'enregistreur de donnees est arrete"
  onboard_log_tr3_thr_RPM   = "Lorsque les bits de la fonction de protection du moteur RPM sont definis, l'enregistreur de donnees est demarre lorsqu'il n'est plus defini, l'enregistreur est arrete" 
  onboard_log_tr3_thr_MAP   = "Lorsque les bits de la fonction de protection du moteur MAP sont actives, l'enregistreur de donnees est demarre lorsqu'il n'est plus defini, l'enregistreur est arrete"
  onboard_log_tr3_thr_Oil   = "Lorsque les bits de la fonction de protection du moteur a huile sont definis, l'enregistreur de donnees est demarre lorsqu'il n'est plus defini, l'enregistreur est arrete"
  onboard_log_tr3_thr_AFR   = "Lorsque les bits de la fonction de protection du moteur AFR sont actives, l'enregistreur de donnees est demarre lorsqu'il n'est plus defini, l'enregistreur est arrete"
  onboard_log_tr4_thr_on    = "Lorsque la tension de batterie mesuree est superieure a ce seuil, l'enregistreur de donnees est demarre" 
  onboard_log_tr4_thr_off   = "Lorsque la tension de batterie mesuree est inferieure a ce seuil, l'enregistreur de donnees est arrete" 
  onboard_log_tr5_thr_on    = "La broche pour declencher le demarrage/arret de la centrale de mesure"   
  onboard_log_csv_separator = "Choisissez quel caractere est utilise pour le separateur CSV entre les champs"

  battVCorMode    = "La valeur de correction de tension de batterie du tableau ci-dessous peut etre appliquee soit a la valeur entiere de la largeur d'impulsion d'injection, soit uniquement a la valeur du temps d'ouverture."
  dwellTable      = "Definit le temps de maintien en millisecondes en fonction du regime/de la charge. Cela peut etre utilise pour reduire le stress/l'usure du systeme d'allumage lorsqu'une longue temporisation n'est pas necessaire. Et d'autres zones peuvent utiliser une valeur de temporisation plus longue si necessaire pour une etincelle plus forte. La correction de la tension de la batterie est appliquee pour ces valeurs de maintien."
  useDwellMap     = "En mode de fonctionnement normal, il est regle sur Non et le calculateur utilisera une valeur de temporisation de fonctionnement fixe. Mais si differentes valeurs de temporisation sont requises sur la plage de regime/charge du moteur, cela peut etre defini sur Oui et un tableau de temporisation distinct definit la valeur de temporisation en cours d'execution."

[UserDefined]

; Enhanced TunerStudio dialogs can be defined here
; MegaTune will over look this section
; These dialogs will over-ride those in the UserDefined Section
; User defined ar loaded first, then if one by the same name is defiend here,
; it will replace the MegaTune definition

; dialog = name,   Title, Layout
;
; valid options for layout are xAxis, yAxis, border
; for an xAxis, each field added will be added from right to left
; A yAxis layout will add fields from top to bottom
; A border layout will expect an additional constraint to determine placement
; valid border constraints are north, South, East, West, Center
; all 5 do not need to be filled.

; The field name can be either a constant reference, or a reference to another
; dialog which will be added.
; dialogs can be nested and can be mixed with fields

    dialog = engine_constants_southwest, "Carte Matzs"
        field = "!Il s agit d un parametre critique!"
        field = "Les sorties NE FONCTIONNERONT PAS si une carte incorrecte est selectionnee"
        field = "Type de Processeur",             pinLayout	
        field = "Ratio Stoichiometric",     stoich
        field = "Type d injection",          injLayout
        field = "Appariement injecteurs",         inj4CylPairing, {}, { injLayout == 1 && nCylinders == 4 }
        field = "Methode lecture capteur MAP",        mapSample
        field = "Point de lecture MAP",  mapSwitchPoint,      { mapSample >= 1 }

    dialog = engine_constants_west, ""
        panel = std_injection, North
        panel = engine_constants_southwest

    dialog = engine_constants_northeast, "Angles moteur assymetrique"
        field = "Channel 2 angle", oddfire2,                { engineType == 1 }
        field = "Channel 3 angle", oddfire3,                { engineType == 1 && nCylinders >= 3 }
        field = "Channel 4 angle", oddfire4,                { engineType == 1 && nCylinders >= 4 }

    dialog = engine_constants_east, ""
        panel = engine_constants_northeast, North
        field = ""

    dialog = engine_constants_warning, ""
        field = "!Avertissement : La carte que vous avez selectionnee peut ne pas avoir assez de canaux pour le carburant sequentiel !", {}, {}, { injLayout == 3 && !sequentialFuelAvailable }

    dialog = engine_constants, "", border
        topicHelp = "https://wiki.matzs.com/en/configuration/Engine_Constants"
        panel = engine_constants_warning, North
        panel = engine_constants_west, West
        panel = engine_constants_east, East

; Flex fuel stuff
    dialog = flexFuelSettings, "", yAxis
        field = "Capteur Flex Fuel ", flexEnabled
        field = "Bas (E0) ",         flexFreqLow,  { flexEnabled }
        field = "Haut (E100) ",      flexFreqHigh, { flexEnabled }
        slider = "Filtre Signal", FILTER_FLEX, horizontal, { flexEnabled }

    dialog = flexFuelWest, ""
        panel = flex_fuel_curve,     { flexEnabled }
        panel = flex_adv_curve,      { flexEnabled }

    dialog = flexFuelEast, ""
        panel = flex_boost_curve,    { flexEnabled && boostEnabled }

    ;dialog = flexCurves, "", indexCard
    dialog = flexCurves, "", xAxis
        panel = flexFuelWest, West
        panel = flexFuelEast, East

    dialog = flexFueling, "Reglage du capteur de carburant ", border
        topicHelp = "https://wiki.matzs.com/en/configuration/Flex_Fuel"
        ;panel = flexFuelWest, West
        panel = flexFuelSettings, North
        panel = flexCurves,   South

; Knock control settings
    dialog = knock_windows, "Fentre de Cliquetis", xAxis
        panel = knock_window_angle_curve, West, { knock_mode }
        panel = knock_window_duration_curve, East, { knock_mode }

    dialog = knock_settings_west, "Reglages", yAxis
        field = "Knock Mode",               knock_mode
        field = "Knock Pin",                knock_pin,          { knock_mode }
        field = "Knock active quand pin est", knock_trigger,      { knock_mode == 1 }
        field = "Utilise pullup",               knock_pullup,       { knock_mode == 1 }

    dialog = knock_settings_east, "Detection et Response"
        field = "#Detection"
        field = "Knock compteur ",     knock_count,        { knock_mode == 1}
        field = "Knock seuil ", knock_threshold,    { knock_mode == 2}
        field = "Maximum MAP ",              knock_maxMAP,       { knock_mode }
        field = "Maximum RPM ",              knock_maxRPM,       { knock_mode }
        
        ;Retard and recovery
        field = "#Retard"
        field = "Total retard ",             knock_maxRetard,    { knock_mode }
        field = "Taille du premier pas ",          knock_firstStep,    { knock_mode }
        field = "Taille des autres ",          knock_stepSize,     { knock_mode }
        field = "Temps entre pas ",                knock_stepTime,     { knock_mode }
        
        field = "#Retour"
        field = "Duree du retard",          knock_duration,     { knock_mode } ;Time before retard starts ending
        field = "Temps de la recuperation",       knock_recoveryStepTime,     { knock_mode } ;Time between each recovery step
        field = "Taille de la recuperation",       knock_recoveryStep, { knock_mode }

    dialog = knock_settings_top, "", xAxis
        panel = knock_settings_west, West
        panel = knock_settings_east, East

    dialog = knockSettings, "", border
        topicHelp = "http://matzs.com/wiki/index.php/Knock"
        panel = knock_settings_top, North
        panel = knock_windows, South

    dialog = vss_gear_1, "", xAxis
        field = "Vitesse ratio 1",            vssRatio1
        commandButton = "Set Rapport 1",       cmdVSSratio1, { vssMode > 1 }
    dialog = vss_gear_2, "", xAxis
        field = "Vitesse ratio 2",            vssRatio2
        commandButton = "Set Rapport 2",       cmdVSSratio2, { vssMode > 1 }
    dialog = vss_gear_3, "", xAxis
        field = "Vitesse ratio 3",            vssRatio3
        commandButton = "Set Rapport 3",       cmdVSSratio3, { vssMode > 1 }
    dialog = vss_gear_4, "", xAxis
        field = "Vitesse ratio 4",            vssRatio4
        commandButton = "Set Rapport 4",       cmdVSSratio4, { vssMode > 1 }
    dialog = vss_gear_5, "", xAxis
        field = "Vitesse ratio 5",            vssRatio5
        commandButton = "Set Rapport 5",       cmdVSSratio5, { vssMode > 1 }
    dialog = vss_gear_6, "", xAxis
        field = "Vitesse ratio 6",            vssRatio6
        commandButton = "Set Rapport 6",       cmdVSSratio6, { vssMode > 1 }

    dialog = vss_gear_detection, "Rapport Detection", yAxis
        field = "Apres avoir regle 'Impulsions par km/mile' ci-dessus"
        field = "Conduisez dans chaque rapport (n importe quelle vitesse) et appuyez sur le bouton approprie"
        panel = vss_gear_1
        panel = vss_gear_2
        panel = vss_gear_3
        panel = vss_gear_4
        panel = vss_gear_5
        panel = vss_gear_6

    dialog = vss_calibration, "VSS - Calibration Vitesse"
        field = "Impusion par KM",            vssPulsesPerKm, { vssMode > 1 }
        commandButton = "60km/h auto-calibration",       cmdVSS60kmh, { vssMode > 1 }
        field = "Facteur de lissage",         vssSmoothing,   { vssMode > 1 }
        
    dialog = vssSettings, "", yAxis
        topicHelp = "https://wiki.matzs.com/en/configuration/VSS"
        field = "VSS Input Mode",           vssMode
        field = "VSS Pin",                  vssPin,         { vssMode > 1 }
        ;field = "Use Pullup",               vssPullup,      { vssMode > 1 }
        
        panel = vss_calibration
        panel = vss_gear_detection

    dialog = tacho, "Compte tour"
        field = "pin du signal",           tachoPin
        field = "Vitesse du signal",         tachoDiv
        field = "largeur du signal",       tachoDuration
        ;field = "Tacho sweep on boot",  useTachoSweep
        ;field = "Tacho sweep Max RPM",  tachoSweepMaxRPM, { useTachoSweep }
		
    dialog = ETBset, "GAIN"
		field = "Frequence",                 ETBFreq
	    field = "Gain Proportionnel  ",      ETBKP            
	    field = "Gain Integral  ",           ETBKI            		
	    field = "Gain Derive  ",             ETBKD 
	  
		  
    dialog = ETB, "ETB", 4	
		field = "Activer ETB dans Idle"
        field = "#Les gauges TPS et TPS2 doivent etre identiques"	
        field = "#Les gauges ETBpos1 et ETBpos2 doivent etre identiques"			
		field = "PEDALE"		
		field = "Minimum TPS2",        TPS2Min,            { ETBEnable == 1 && iacAlgorithm == 7}
	    field = "Maximum TPS2",        TPS2Max,            { ETBEnable == 1 && iacAlgorithm == 7}
		field = "ETB"		
        field = "Activation ETB",       ETBEnable,	{ iacAlgorithm == 7	}
		field = "ATTENTION toujours verifier le fonctionnement correct"
		field = "parametrage avant la mise en route du moteur"
		field = "Invertion du sens moteur",  ETBInv,           { ETBEnable == 1 && iacAlgorithm == 7}
		field = "ATTENTION ne pas inverser moteur en fonctionnement"		
		field = "Minimum pos 1",        ETBpos1Min,            { ETBEnable == 1 && iacAlgorithm == 7}
	    field = "Maximum pos 1",        ETBpos1Max,            { ETBEnable == 1 && iacAlgorithm == 7}
		field = "Minimum pos 2",        ETBpos2Min,            { ETBEnable == 1 && iacAlgorithm == 7}
	    field = "Maximum pos 2",        ETBpos2Max,            { ETBEnable == 1 && iacAlgorithm == 7}		
        field = "#Cette valeur est a mettre quand le papillon est non alimente"
        field = "valeur de position en % apres calibrage min max"
	    field = "position ETB par defaut  ", ETBposoff,         { ETBEnable == 1 && iacAlgorithm == 7}	
		panel = ETBset,                                         { ETBEnable == 1 && iacAlgorithm == 7}
		
    dialog = accelEnrichments_aeSettings, ""
        field = "Source ",      aeMode
        field = "Methode ",    aeApplyMode
        field = "Seuil TPSdot ",     taeThresh,  { aeMode == 0 }
        field = "Seuil MAPdot ",     maeThresh,  { aeMode == 1 }
        field = "Accel Temps ",           aeTime
        field = "pleine enrichissement sous RPM ",      aeTaperMin
        field = "fin de l'enrichissement RPM ",        aeTaperMax

  dialog = accelEnrichments_coldAdj, "Acceleration Enrichissementment a froid"
        field = "adjustement a froid",      aeColdPct
        field = "pleine enrichissement froid sous temperature",  aeColdTaperMin
        field = "fin de l'enrichissement froid temperature",  aeColdTaperMax

    dialog = accelEnrichments_south, "Coupure injection (DFCO)"
      field = "actif ", dfcoEnabled
      field = "seuil TPS ", dfcoTPSThresh,           { dfcoEnabled }
      field = "temperature Minimum ", dfcoMinCLT, { dfcoEnabled }
      field = "temps avant coupure", dfcoDelay,                { dfcoEnabled }
      field = "regime coupure", dfcoRPM,                    { dfcoEnabled }
      field = "Hysteresis", dfcoHyster,             { dfcoEnabled }

    dialog = accelEnrichments_north_south, ""
      liveGraph = pump_ae_Graph, "AE Graph"
#if LAMBDA
            graphLine = lambda
#else
            graphLine = afr
#endif
            graphLine = TPSdot, "%", -2000, 2000, auto, auto
            graphLine = MAPdot, "%", -2000, 2000, auto, auto

    dialog = accelEnrichments_north, "", xAxis
        panel = time_accel_tpsdot_curve,  { aeMode == 0 }
        panel = time_accel_mapdot_curve,  { aeMode == 1 }

    dialog = accelEnrichments_center, "Acceleration Enrichment", xAxis
        panel = accelEnrichments_aeSettings
        panel = accelEnrichments_coldAdj

    dialog = accelEnrichments, "Acceleration Enrichment"
        topicHelp = "http://matzs.com/wiki/index.php/Acceleration_Wizard"
        panel = accelEnrichments_north, North
        panel = accelEnrichments_north_south, Center
        panel = accelEnrichments_center, Center
        panel = accelEnrichments_south, South

    dialog = veTableDialog_north, ""
        panel = veTableTbl1

    dialog = veTableDialog_south, ""
        field = "Multiplie la table par", multiplyMAP
        field = "Multiplie par la table AFR", includeAFR,         { egoType == 2 && !incorporateAFR  || (incorporateAFR==includeAFR) }
        field = "Multiplie par le ratio stoichiometrique", incorporateAFR,  { !includeAFR || (incorporateAFR==includeAFR) }

    dialog = veTableDialog, "Table Injection 1"
        panel = veTableDialog_north, North
        panel = veTableDialog_south, South

    dialog = fuelTable2Dialog_switch, "Conditions basculement", xAxis 
        field = "Utilisez la table secondaire lorsque :",     fuel2SwitchVariable
        field = "est superieur a:",              fuel2SwitchValue

    dialog = fuelTable2Dialog_input, "Input Options", yAxis 
        field = "Utiliser la table secondaire lorsque la borne",     fuel2InputPin
        field = "Est ",                               fuel2InputPolarity
        field = "Utiliser pullup interne ",       fuel2InputPullup, { fuel2InputPolarity == 0 }

    dialog = fuelTable2Dialog_north, ""
        field = "Mode table d injection secondaire",    fuel2Mode
        field = "Algorithme Injection 2",                  fuel2Algorithm,     { fuel2Mode }
        panel = fuelTable2Dialog_switch,        { fuel2Mode == 3 }
        panel = fuelTable2Dialog_input,        { fuel2Mode == 4 }

    dialog = fuelTable2Dialog_south, ""
        panel = veTable2Tbl

    dialog = fuelTable2Dialog, "Table injection 2"
        panel = fuelTable2Dialog_north, North
        panel = fuelTable2Dialog_south, South,  { fuel2Mode }

    dialog = sparkTable2Dialog_switch, "Switch Conditions", xAxis 
        field = "Utilisez la table secondaire lorsque :",     spark2SwitchVariable
        field = "est superieur a:",              spark2SwitchValue

    dialog = sparkTable2Dialog_input, "Input Options", yAxis 
        field = "Utiliser la table secondaire lorsque la borne",     spark2InputPin
        field = "Est ",                               spark2InputPolarity
        field = "Utiliser pullup interne ",       spark2InputPullup, { spark2InputPolarity == 0 }

    dialog = sparkTable2Dialog_north, ""
      field = "Mode table d allumage secondaire",       spark2Mode
      field = "Algorithme Allumage 2",                        spark2Algorithm,     { spark2Mode }
      panel = sparkTable2Dialog_switch,             { spark2Mode == 3 }
      panel = sparkTable2Dialog_input,              { spark2Mode == 4 }

    dialog = sparkTable2Dialog_south, ""
        panel = spark2Tbl

    dialog = sparkTable2Dialog, " Table d allumage 2"
      panel = sparkTable2Dialog_north, North
      panel = sparkTable2Dialog_south, South,  { spark2Mode }

    dialog = injAngleDialog, "Avance injection"
      panel = injector_timing_curve

    dialog = injOpenTimeDialog, "Temps mort Injecteurs"
      field = "Temps mort Injecteur",               injOpen
      field = "Correction Mode de tension",  battVCorMode
      panel = injector_voltage_curve

    dialog = injChars, "Characteristiques Injecteurs "
      topicHelp = "https://wiki.matzs.com/en/configuration/Injector_Characteristics"
      field = "Duty Limit maxi",        dutyLim
      panel = injOpenTimeDialog
      panel = injAngleDialog

    dialog = egoControl, ""
      topicHelp = "https://wiki.matzs.com/en/configuration/O2"
      field = "Type de sonde",                egoType
      field = "#Veuillez vous assurer de calibrer votre capteur d'O2 dans le menu Outils", { egoType }
      field = "Algorithme",                  egoAlgorithm,       { egoType }
      field = "tout les cycles moteur",   egoCount,           { egoType && (egoAlgorithm < 3) }
      field = "Plage +/-",        egoLimit,           { egoType && (egoAlgorithm < 3) }
      field = "valeur mini:",        ego_min,            { egoType && (egoAlgorithm < 3) }
      field = "Valeur maxi:",         ego_max,            { egoType && (egoAlgorithm < 3) }
	  field = "protection AFR"       afrProtEnbl,         { egoType && (egoAlgorithm < 3) }

      field = "Active au dessus temp",       egoTemp,            { egoType && (egoAlgorithm < 3) }
      field = "Active au dessus RPM",           egoRPM,             { egoType && (egoAlgorithm < 3) }
      field = "Active en dessous TPS",           egoTPSMax,          { egoType && (egoAlgorithm < 3) }
	  field = "Active au dessus MAP",           egoMAPMin,          { egoType && (egoAlgorithm < 3) }
	  field = "Active en dessous MAP",           egoMAPMax,          { egoType && (egoAlgorithm < 3) }
      field = "Temps apres demarrage ",      ego_sdelay,         { (egoAlgorithm < 3) }
      field = "PID Proportionelle",      egoKP,              { egoType && (egoAlgorithm == 2) }
      field = "PID Integrale",               egoKI,              { egoType && (egoAlgorithm == 2) }
      field = "PID Derive",             egoKD,              { egoType && (egoAlgorithm == 2) }

    dialog = fanSettings,"Ventillation moteur",7
      topicHelp = "https://wiki.matzs.com/en/configuration/Thermo_fan"
      displayOnlyField = !"Aucun ventilateur PWM disponible sur ATMEL", blankfield, {intcan_available == 0 && fanEnable == 2},{intcan_available == 0 && fanEnable == 2}    	  
      field = "Mode",                   fanEnable
      field = "Autoriser le ventilateur moteur eteint",         fanWhenOff,         { fanEnable }
      field = "Autoriser le ventilateur sur demarreur",    fanWhenCranking,    { fanEnable }
      field = "borne du ventillateur",             fanPin,             { fanEnable }
      field = "invertion de la sortie",        fanInv,             { fanEnable }
      field = "Seuil de Temperature",  fanSP, { fanEnable == 1 }
      field = "Hysteresis",             fanHyster, { fanEnable == 1 }
      field = "PWM frequence",          fanFreq, { intcan_available  && fanEnable == 2 }

  dialog = pwmFan, "PWM courbe ventillateur",
        panel = pwm_fan_curve,	  

  dialog = emultempSettings,"emulation temp Eau",
      displayOnlyField = !"Aucun PWM disponible sur ATMEL", blankfield, {intcan_available == 0}  
      field = "Mode",   simultempEnabled
      field = "borne de l'emulation de temperature",             fanPin,             { simultempEnabled }	  
      field = "invertion de la sortie",        fanInv,             { simultempEnabled }	  
      field = "PWM frequence",          EmulFreq, { intcan_available }	  

  dialog = pwmemultemp, "PWM courbe emulation temp Eau",
        panel = pwm_fan_curve,
		
    dialog = stepper_idle, "Vanne Stepper IAC"
      field = "Stepper temps de mise en tension (ms)",       iacStepTime,              { iacAlgorithm == 4 || iacAlgorithm == 5 }
      field = "Stepper temps de mise hors tension (ms)",       iacCoolTime,              { iacAlgorithm == 4 || iacAlgorithm == 5 }
      field = "indexage",           iacStepHome,              { iacAlgorithm == 4 || iacAlgorithm == 5 }
      field = "Minimum Steps",        iacStepHyster,            { iacAlgorithm == 4 || iacAlgorithm == 5 }
      field = "Ne depasse pas",         iacMaxSteps,              { iacAlgorithm == 4 || iacAlgorithm == 5 } 
      field = "Minimum pid",          iacMinSteps,              { iacAlgorithm == 5 } 	  
      field = "Inversion sens Stepper",     iacStepperInv,            { iacAlgorithm == 4 || iacAlgorithm == 5 }

    dialog = pwm_idle, "Vanne PWM"
      field = "Nombre de sorties",    iacChannels,              { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
      field = "Frequence valve", idleFreq,                 { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
      field = "Direction valve", iacPWMdir,                { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
      field = "Actif avant demarrage",     iacPWMrun,                { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7}

    dialog = closedloop_idle, "Boucle ferme Idle"
      field = "P",                    idleKP,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "I",                    idleKI,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "D",                    idleKD,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "Minimum valve duty",   iacCLminDuty,             { iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "Maximum valve duty",   iacCLmaxDuty,             { iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "Integral reset sous TPS",     iacTPSlimit,     { iacAlgorithm == 6 || iacAlgorithm == 7}
      field = "Integral reset RPM Hysteresis", iacRPMlimitHysteresis, { iacAlgorithm == 6 || iacAlgorithm == 7}

    dialog = idleSettings, "Reglage vanne Ralenti", 4
      topicHelp = "https://wiki.matzs.com/en/configuration/Idle"
      field = "Type de control",    iacAlgorithm
        field = "Crank to run taper", idleTaperTime,            { iacAlgorithm == 2 || iacAlgorithm == 4 }
        field = "#Fast Idle"
        field = "Temperature marche",     iacFastTemp,              { iacAlgorithm == 1 }
        panel = pwm_idle
        panel = stepper_idle
        panel = closedloop_idle

    dialog = iacVoltageSettings, "Idle - Voltage Correction"
        panel = iac_voltage_curve 


    dialog = idleUpInputSettingsPanel, "Parametres augmentation ralenti", yAxis
        field = "Idle Up Actif",      	idleUpEnabled
        field = "Idle Up Pin",          	idleUpPin,              { idleUpEnabled }
        field = "Idle Up Polarite Pin", 	idleUpPolarity,         { idleUpEnabled }
        field = "Valeur ajout",       	idleUpAdder,            { idleUpEnabled }

    dialog = idleUpOutputSettingsPanel, "contact de Climatisation", yAxis
        field = "Idle Up Output Actif", 	idleUpOutputEnabled,    { idleUpEnabled }
        field = "Idle Up Output Inverse",  idleUpOutputInv,        { idleUpEnabled && idleUpOutputEnabled }
        field = "Idle Up Output Pin",       idleUpOutputPin,        { idleUpEnabled && idleUpOutputEnabled }

    dialog = idleUpSettings, "Reglages augmentation ralenti"
        panel = idleUpInputSettingsPanel
        panel = idleUpOutputSettingsPanel

    dialog = fuelpump, "Pompe a carburant"
        field = "Fuel pompe pin",                    fuelPumpPin
        field = "Duree a la mise sous tension",         fpPrime

    dialog = crankingEnrichDialog, "Enrichissement sur demarreur", yAxis
        panel = cranking_enrich_curve
        field = "#Note"
        field = "Les valeurs sont specifiees en tant que modificateurs de la table normal. Par exemple 100 % = aucun changement."

    dialog = crankingIgnOptions, "Reglages demarrage", yAxis
        field = "Avance allumage sur demarreur",       CrankAng,       { ignCranklock == 0 }
        field = "Contact de by-pass", ignBypassEnable
        field = "Bypass pin de sortie", ignBypassPin               { ignBypassEnable }
        field = "Correction du moment de demarrage avec le capteur", ignCranklock,   { TrigPattern == 1 || TrigPattern == 4 || TrigPattern == 10 || TrigPattern == 9 }

    dialog = crankingOptions, "", yAxis
        field = "Regime (Max)", crankRPM
        field = "TPS denoillage", tpsflood
        field = "Pompe Duree a la mise sous tension", fpPrime
        field = "Delais activation injecteurs", primingDelay
    field = "Temps d enrichissement au demarrage", crankingEnrichTaper

    dialog = primePW, "Injection de mouillage"
        panel = priming_pw_curve

    dialog = crankPW, "Reglages demarrage", yAxis
        topicHelp = "https://wiki.matzs.com/en/configuration/Cranking"
        panel = crankingOptions, North
        panel = crankingEnrichDialog, Center
        panel = crankingIgnOptions, South

    dialog = ASE_amount, "Enrichissement (%)", yAxis
        field = "Definit le pourcentage d'enrichissement du carburant apres le demarrage."
        field = "Ceci est necessaire pour garder le moteur en marche apres le demarrage"
        field = "Les valeurs courantes sont de 5 % lorsque le moteur est chaud a 50 % lorsque le moteur est froid."
        panel = afterstart_enrichment_curve

    dialog = ASE_time, "Duree (s)", yAxis
        field = "Combien de temps l'enrichissement apres demarrage est applique en secondes."
        field = "Habituellement, cela varie de 1 a 2 secondes lorsque le moteur est chaud jusqu'a 20 secondes sur un moteur froid."
        field = "Temps de transition pour desactiver", aseTaperTime
        panel = afterstart_enrichment_time

    dialog = ASE, "Enrichissement apres demarrage(ASE)", yAxis
        field = "#Les courbes de temps et de duree partagent des valeurs de liquide de refroidissement communes"
        panel = ASE_amount
        panel = ASE_time

    dialog = triggerSettings,"Reglage roues decodeur",4
        topicHelp = "https://wiki.matzs.com/en/decoders"
        field = "Type de decodeur ",                TrigPattern
        field = "Nombre de dents ",             numTeeth,       { TrigPattern == 0 || TrigPattern == 2 || TrigPattern == 11 || TrigPattern == 18 || TrigPattern == 19  || TrigPattern == 21 }
        field = "Emplacement de la cible ",          TrigSpeed,      { TrigPattern == 0 || TrigPattern == 2 }
        field = "Nombre de dents maquantes ",                  missingTeeth,   { TrigPattern == 0 }
        field = "Diviseur de dents pour cible non 360 ",       TrigAngMul,     { TrigPattern == 11 }
        field = "Angle de decalage au PMH ",                 TrigAng
        field = "360 moins valeur angulaire en degres "
        field = "Dent 1 avant le PMH "
        field = ""
        field = "Nombres de cycle avant synchronisation",              SkipCycles
        field = "Remarque : il s'agit du nombre de tours qui seront sautes pendant"
        field = "le demarrage avant que les injecteurs et les bobines ne soient activent"
        field = "Sens de detection des dents ",                   TrigEdge      { TrigPattern != 4 && TrigPattern != 22 } ;4G63 uses both edges ;NGC uses both edges
        field = "Sens de detection du capteur AAC ",         TrigEdgeSec,  { ((TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec < 2) || trigPatternSec == 5 || TrigPattern == 2 || TrigPattern == 9 || TrigPattern == 12 || TrigPattern == 18 || TrigPattern == 19 || TrigPattern == 20 || TrigPattern == 21 || TrigPattern == 23 || TrigPattern == 24 )} ;Missing tooth, dual wheel and Miata 9905, weber-marelli, ST170, DRZ400, Renix
        field = "Type de 2eme roue pour la phase ",   trigPatternSec,   { (TrigPattern == 0&& TrigSpeed == 0) }
        field = "Sens de detection pour la phase ",            PollLevelPol,   { ((TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec == 2) || (TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec == 3) || (TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec == 4)) }
        field = "Dent villebrequin pour lire l'etat du 2eme catpeur ",            SYNCTeeth,   { (TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec == 3) }		
        field = "Filtre decodeur",                 TrigFilter,   { TrigPattern != 13 }
        field = "Re-sync tous les cyles",            useResync,    { TrigPattern == 2 || TrigPattern == 4 || TrigPattern == 7 || TrigPattern == 12 || TrigPattern == 9 || TrigPattern == 13 || TrigPattern == 18 || TrigPattern == 19  || TrigPattern == 21 } ;Dual wheel, 4G63, Audi 135, Nissan 360, Miata 99-05, weber-marelli. DRZ400

    dialog = lockSparkSettings, "Avance verrouille sur demarreur"
        field = "Activation avance fixe/verrouille",  fixAngEnable
        field = "Angle d'avance",                  FixAng,         { fixAngEnable }
        field = "#Remarque : Pendant le demarrage, l'angle de synchronisation fixe/verrouille est remplace par la valeur de l'angle d'avance de demarrage ci-dessus."

    dialog = newIgnitionMode, "Nouveau Driver d'allumage"
      field = "Cette option ameliore actuellement la precision sur la plupart des declencheurs compatibles"
      field = "Cependant, si des problemes de synchronisation sont rencontees, veuillez desactiver cette"
      field = "Utiliser nouveau driver",  perToothIgn

    dialog = sparkSettings,"Reglages Aluumage",4
        topicHelp = "https://wiki.matzs.com/en/configuration/Spark_Settings"
        field = "!Avertissement : La carte que vous avez selectionnee peut ne pas avoir assez de canaux pour un allumage sequentiel !", {}, {}, { sparkMode == 3 && !sequentialIgnitionAvailable }
        field = "!Avertissement : Verifiez que les sorties allumages ne sont pas deja utilisees !", {}, {}, { sparkMode == 3 && !sequentialIgnitionAvailable }
        field = "Algorithme pour l'Allumage 1",         ignAlgorithm
        field = "Type d'allumage",            sparkMode
        field = "Avance sur demarreur Angle",       CrankAng
        field = "Commande Bobines",        IgInv
        panel = lockSparkSettings
        panel = newIgnitionMode, {}, {TrigPattern == 0 || TrigPattern == 1 || TrigPattern == 2 || TrigPattern == 3 || TrigPattern == 4 || TrigPattern == 9 || TrigPattern == 12 || TrigPattern == 13 || TrigPattern == 16 || TrigPattern == 18 || TrigPattern == 19 || TrigPattern == 22 || TrigPattern == 23 || TrigPattern == 24} ;Only works for missing tooth, distributor, dual wheel, GM 7X, 4g63, Miata 99-05, nissan 360, Subaru 6/7, 420a, weber-marelli, NGC
       
    dialog = dwellSettings,                 "Reglage du Dwell",   4
        topicHelp = "https://wiki.matzs.com/en/configuration/Dwell"
        field = "  Dwell sur demarreur ",           dwellcrank
        field = "  Dwell en fonction de la charge moteur ",            useDwellMap
        field = "  Dwell nominal ",            dwellrun, { useDwellMap == 0 }
        field = "  Duree de l'etincelle ",           sparkDur
        field = ""
        field = "#Note"
        field = "Les temps ci-dessus sont pour 12V. Correction de tension"
        field = "est applique. A des tensions plus elevees, le temps est reduit"
        field = "et lorsqu'elle est bas, il est augmente"
        field = ""
        field = "Protection Charge Bobines "
        field = "Utiliser la Protection ",  useDwellLim
        field = "Max dwell ",             dwellLim,  { useDwellLim }
        field = "Remarque : definissez le temps de maintien maximum 3 ms au-dessus"
        field = "votre temps de charge souhaite (y compris le demarrage)"
    
    dialog = idleAdvanceSettings_east
        field = "Allumage sous ralenti",                   idleAdvEnabled
        field = "Condition du capteur",                    idleAdvAlgorithm,     { idleAdvEnabled >= 1 }
        field = "Temps apres demarrage (s)",idleAdvDelay,         { idleAdvEnabled >= 1 }
        field = "Active sous RPM",                    idleAdvRPM,           { idleAdvEnabled >= 1 }
        field = "Active sous TPS",                    idleAdvTPS,           { idleAdvEnabled >= 1 && idleAdvAlgorithm == 0 }
        field = "Active sous vitesse VSS",                    idleAdvVss,           { idleAdvEnabled >= 1 && vssMode > 0 }
        field = "Delais avant commutation ",                      idleAdvStartDelay,    { idleAdvEnabled >= 1 }
        field = "Utiliser un contact papillon ferme",      CTPSEnabled,          { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 }
        field = "Pin du contact ferme",          CTPSPin,              { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 && CTPSEnabled == 1 }
        field = "polarite de detection ", CTPSPolarity,         { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 && CTPSEnabled == 1 }

    dialog = idleAdvanceSettings,"Reglages d'avance au ralenti", xAxis
        topicHelp = "https://wiki.matzs.com/en/configuration/IdleAdvance"
        panel = idleAdvanceSettings_east
        panel = idle_advance_curve,         { idleAdvEnabled >= 1 }
        panel = iacClosedLoop_curve,        { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 }
        

    dialog = rotary_ignition,               "Allumage moteur rotatif",  4
        field = "Ignition Configuration",   rotaryType
        panel = rotaryTrailing_curve

    dialog = boostCut, "Coupure surpression",
        field = "Activation limit turbo",       boostCutEnabled
        field = "Pression limite",              boostLimit,     { boostCutEnabled }
    
    dialog = boostByGear, "Pression en fonction du rapport engage"
        field = "Activation pression regule a la vitesse",      boostByGearEnabled
        field = "Rapport 1 ",                   boostByGear1,          { boostByGearEnabled }
        field = "Rapport 2 ",                   boostByGear2,          { boostByGearEnabled }
        field = "Rapport 3 ",                   boostByGear3,          { boostByGearEnabled }
        field = "Rapport 4 ",                   boostByGear4,          { boostByGearEnabled }
        field = "Rapport 5 ",                   boostByGear5,          { boostByGearEnabled }
        field = "Rapport 6 ",                   boostByGear6,          { boostByGearEnabled }

    dialog = boostLoad, ""
        field = "Mode",                     boostType
        field = "En mode boucle ouverte, les valeurs de ce tableau sont le rapport cyclique 100%"
        field = "En mode Boucle fermee, les valeurs sont des cibles de boost en kPa"
        panel = boostTbl

    dialog = coolantProtection, "Protection Temperature eau"
        panel = coolant_prot_curve, { hardRevMode == 2 }

    dialog = revLimiterDialog, "Limiteur de regime"
        field = "Limiteur de regime"
        field = "!Mode de rupteur seulement avec coupure allumage", {}, {}, { engineProtectType == 2 }
        field = "regime rupeur",             SoftRevLim,     { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
        field = "mode rupteur",          SoftLimitMode,  { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
        field = "Retard allumage avance negative",          SoftLimRetard,  { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
        field = "temp maxi sur rupteur sans coupure",        SoftLimMax,     { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
        field = "Mode du limiteur",          hardRevMode
        field = "regime rupteur coupure",            hardRevLim,     { hardRevMode == 1 }
        panel = coolantProtection,                            { hardRevMode == 2 }
		
    dialog = oilPressureProtection, "Pression Huile"
        field = "Protection de la pression d'huile",  oilPressureProtEnbl, { oilPressureEnable }
        panel = oil_pressure_prot_curve, { oilPressureEnable && oilPressureProtEnbl }
		
		
	dialog = EGTProtection, "Protection Temperature EGT"
        field = "Protection Temperature EGT",  EGTProtEnbl, {EGTEnable}
		field = "ajout de carburant",  EGTadd, { EGTProtEnbl && EGTEnable }
        panel = EGT_prot_curve, { EGTProtEnbl && EGTEnable }	

    indicatorPanel = protectIndicatorPanel, 1, { 1 } 
        indicator = { engineProtectStatus}, "Protection Moteur OFF",   "Engine Protect ON",   green, black, red,      black
        indicator = { engineProtectRPM   }, "Rupteur Off",      "Rupteur ON",      green, black, red,      black
        indicator = { engineProtectMAP   }, "Pression Limit OFF",      "Pression Limit ON",      green, black, red,      black
        indicator = { engineProtectOil   }, "Huile Pres. Protect OFF","Huile Pres. Protect ON",green, black, red,      black
        indicator = { engineProtectAFR   }, "AFR Protect OFF",      "AFR Protect ON",      green, black, red,      black
		indicator = { engineProtectCoolant }, "Temp eau Protect OFF", "Temp eau Protect ON", green, black, red,      black
        indicator = { engineProtectEGT }, "Temp EGT Protect OFF", "Temp EGT Protect ON", green, black, red,      black

    dialog = engineProtectionWest, ""
        field = "Protection Coupure",              engineProtectType
        field = "Seuil RPM min pour activer une protection ",   engineProtectMaxRPM, { engineProtectType }
        field = "Methode de coupure",                  hardCutType,         { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
        panel = protectIndicatorPanel,                              { engineProtectType }

    dialog = engineProtection,                   "Protection moteur et Limiteurs",      xAxis
        topicHelp = "https://wiki.matzs.com/en/configuration/Rev_Limits"
        panel = engineProtectionWest
	
   dialog = halexconsigne, "courbe HALDEX/VSS",
        panel = HALDEX_curve,   

    dialog = clutchInput,                   "Embrayage-Launch"
        field = "Pin du capteur embrayage",             launchPin,      { launchEnable || flatSEnable }
        field = "Sens de detection du capteur",launchHiLo,     { launchEnable || flatSEnable }
        field = "Pullup Resistance interne",       lnchPullRes,    { launchEnable || flatSEnable }
        field = "Regime basculement launch/passage de rapport a fond RPM",flatSArm,      { launchEnable || flatSEnable }

    dialog = LaunchControl,                   "Launch/Passage de rapport a fond",      6
        topicHelp = "https://wiki.matzs.com/en/configuration/Launch_Flatshift"
        panel = clutchInput
        ; Launch control
        field = "Launch Control "
        field = "Activation Launch ",                launchEnable
        field = "Seuil mini Papillon ",                lnchCtrlTPS,    { launchEnable }
        field = "Regime pour Launch ",               lnchSoftLim,    { launchEnable }
        field = "Angle de retard Allumage ",   lnchRetard,     { launchEnable }
        field = "Regime pour Launch coupure ",               lnchHardLim,    { launchEnable }
        field = "Ajout de carburant ",     lnchFuelAdd,    { launchEnable }

        ; Flat shift
        field = "Passage de rapport a fond"
        field = "Active passage de rapport a fond",            flatSEnable
        field = "Fenetre d'activation Allumage/Injection",              flatSSoftWin,   { flatSEnable }
        field = "Angle de retard Allumage ",   flatSRetard,    { flatSEnable }

    dialog = NitrousStage1,                 "Stage 1"
        field = "Nitro Pin electrovanne ",           n2o_stage1_pin
        field = "Minimum RPM ",           n2o_stage1_minRPM
        field = "Maximum RPM ",           n2o_stage1_maxRPM
        field = "Ajout de carburant @ Min RPM ",         n2o_stage1_adderMin
        field = "Ajout de carburant @ Max RPM ",         n2o_stage1_adderMax
        field = "Retard Allumage quand actif ",  n2o_stage1_retard

    dialog = NitrousStage2,                 "Stage 2"
        field = "Nitro Pin electrovanne ",           n2o_stage2_pin
        field = "Minimum RPM ",           n2o_stage2_minRPM
        field = "Maximum RPM ",           n2o_stage2_maxRPM
        field = "Ajout de carburant @ Min RPM ",         n2o_stage2_adderMin
        field = "Ajout de carburant @ Max RPM ",         n2o_stage2_adderMax
        field = "Retard Allumage quand actif ",  n2o_stage2_retard

    dialog = NitrousMain,                   "Reglages"
        field = "Nitro Nombre de stages ",                 n2o_enable
        field = "Pin activation Nitro",                   n2o_arming_pin, { n2o_enable > 0 }
        field = "Sens de detection du bouton ", n2o_pin_polarity,{ n2o_enable > 0 }
        field = "Minimum CLT ",                  n2o_minCLT,     { n2o_enable > 0 }
        field = "Minimum TPS ",                  n2o_minTPS,     { n2o_enable > 0 }
        field = "Maximum MAP ",                  n2o_maxMAP,     { n2o_enable > 0 }
        field = "Leanest AFR ",                  n2o_maxAFR,     { n2o_enable > 0 }

    dialog = NitrousControl,                "Nitro"
        topicHelp = "https://wiki.matzs.com/en/configuration/Nitrous_Control"
        panel = NitrousMain,                North
        panel = NitrousStage1,              West,   { n2o_enable > 0 }
        panel = NitrousStage2,              East,   { n2o_enable > 1 }


    dialog = OLED, "Afficheur OLED", 2
        field = "Type d'afficheur",               display
        field = "#Note"
        field = "L'ECU doit etre redemarre apres avoir modifie la valeur ci-dessus"
        field = "Affichage 1",                    display1,   { display }
        field = "Affichage 2",                    display2,   { display }
        field = "Affichage 3",                    display3,   { display }
        field = "Affichage 4",                    display4,   { display }
        ;field = "Bar 1",                      displayB1,  { display }
        ;field = "Bar 2",                      displayB2,  { display > 2 }

    dialog = batCal, "Calibration de la tension"
        topicHelp = "https://wiki.matzs.com/en/configuration/Sensor_Calibration"
        slider = "Offset de la lecture batterie",  batVoltCorrect, horizontal

    dialog = mapCal, "Calibration du capteur pression MAP"
        topicHelp = "https://wiki.matzs.com/en/configuration/Sensor_Calibration"
        field = "#Capteur MAP "
        settingSelector = "Liste des Capteur communs "
            settingOption = "MPX4115/MPXH6115/KP234",  mapMin=10,   mapMax=121 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf Vout = VCC * (0.009*P - 0.095)
            settingOption = "MPX4250",  mapMin=10,   mapMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
            settingOption = "GM 1-BAR", mapMin=10,   mapMax=105 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 2-BAR", mapMin=9,  mapMax=208 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 3-BAR", mapMin=1,  mapMax=315 ; VOUT = VS*(.00318*P-.00353)
            settingOption = "MPXH6300", mapMin=1,  mapMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
            settingOption = "MPX5700", mapMin=-31,  mapMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
            settingOption = "MPX6400", mapMin=3,  mapMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
            settingOption = "Denso 079800", mapMin=0,  mapMax=173 ; http://matzs.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
            settingOption = "VW/Audi/Porsche 250kPa", mapMin=10,  mapMax=250 ; http://matzs.com/forum/viewtopic.php?p=17502#p17502
            settingOption = "Bosch 3 Bar TMAP", mapMin=-6,  mapMax=323
			settingOption = "MPX4100A",  EMAPMin=14, EMAPMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

        field =    "kPa At 0.0 Volts",   mapMin
        field =    "kPa At 5.0 Volts",   mapMax
        field = "Utiliser la lecture MAP heritee",legacyMAP

        field = "#Capteur Baro/MAF"
        field = "Utiliser le capteur MAF ou un Baro separe", useExtBaro
        field = "Pin pour le capteur", baroPin,  { useExtBaro }

        settingSelector = "Liste des capteur communs ",  { useExtBaro }
            settingOption = "MPX4115/MPXH6115/KP234",  baroMin=10,   baroMax=121 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf Vout = VCC * (0.009*P - 0.095)
            settingOption = "MPX4250",  baroMin=10,   baroMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
            settingOption = "GM 1-BAR", baroMin=10,   baroMax=105 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 2-BAR", baroMin=9,  baroMax=208 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 3-BAR", baroMin=1,  baroMax=315 ; VOUT = VS*(.00318*P-.00353)
            settingOption = "MPXH6300", baroMin=1,  baroMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
            settingOption = "MPX5700", baroMin=-31,  baroMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
            settingOption = "MPX6400", baroMin=3,  baroMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
            settingOption = "Denso 079800", baroMin=0,  baroMax=173 ; http://matzs.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
            settingOption = "VW/Audi/Porsche 250kPa", baroMin=10,  baroMax=250 ; http://matzs.com/forum/viewtopic.php?p=17502#p17502
            settingOption = "Bosch 3 Bar TMAP", mapMin=-6,  mapMax=323
			 settingOption = "MPX4100A",  EMAPMin=14, EMAPMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

        field =    "kPa/% A 0.0 Volts",   baroMin,  { useExtBaro }
        field =    "kPa/% A 5.0 Volts",   baroMax,  { useExtBaro }

        field = "#Capteur specifique EMAP "
        field = "Utiliser EMAP ", useEMAP
        field = "Pin pour ce capteur", EMAPPin,  { useEMAP }

        settingSelector = "Liste des capteur communs ",  { useEMAP }
            settingOption = "MPX4115",  EMAPMin=10,   EMAPMax=118 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf
            settingOption = "MPX4250",  EMAPMin=10,   EMAPMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
            settingOption = "GM 1-BAR", EMAPMin=10,   EMAPMax=105 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 2-BAR", EMAPMin=9,  EMAPMax=208 ; https://matzs.com/wiki/index.php/File:GM_Table.gif
            settingOption = "GM 3-BAR", EMAPMin=1,  EMAPMax=315 ; VOUT = VS*(.00318*P-.00353)
            settingOption = "MPXH6300", EMAPMin=1,  EMAPMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
            settingOption = "MPX5700", EMAPMin=-31,  EMAPMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
            settingOption = "MPX6400", EMAPMin=3,  EMAPMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
            settingOption = "Denso 079800", EMAPMin=0,  EMAPMax=173 ; http://matzs.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
            settingOption = "VW/Audi/Porsche 250kPa", EMAPMin=10,  EMAPMax=250 ; http://matzs.com/forum/viewtopic.php?p=17502#p17502
			settingOption = "MPX4100A",  EMAPMin=14, EMAPMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

        field =    "kPa A 0.0 Volts",   EMAPMin,  { useEMAP }
        field =    "kPa A 5.0 Volts",   EMAPMax,  { useEMAP }

    dialog = sensorFilters, "Filtre des capteurs Analogiques"
        field = "Les valeurs ici definissent la quantite de filtrage a appliquer a chaque entree analogique"
        field = "Des valeurs plus elevees entrainent un filtrage plus fort, mais des temps de reponse plus lents pour les lectures"
        field = "#La plupart des configurations n'exigeront PAS de modifications des valeurs de filtre par defaut"
        field = ""
        slider = "Capteur Papillon et ETB",    ADCFILTER_TPS,  horizontal
        slider = "Capteur sonde d'eau",              ADCFILTER_CLT,  horizontal
        slider = "Capteur sonde d'air",       ADCFILTER_IAT,  horizontal
        slider = "Signal AFR/lambda",                   ADCFILTER_O2,   horizontal
        slider = "Tension Batterie",             ADCFILTER_BAT,  horizontal
        slider = "Capteur de pression MAP",                  ADCFILTER_MAP,  horizontal
        slider = "Capteur Baro/MAF",                 ADCFILTER_BARO, horizontal, { useExtBaro > 0 }

    dialog = fuelPressureSettings
        field = "Active",                  fuelPressureEnable
        field = "Pin du Capteur ",                      fuelPressurePin,    { fuelPressureEnable }
        settingSelector = "Capteur communs",                     { fuelPressureEnable }
            settingOption = "0-100 PSI",  fuelPressureMin=-3,   fuelPressureMax=103 ; Vout = VCC x (P x .97 / 200 + 0.5)
            settingOption = "0-150 PSI",  fuelPressureMin=-18,   fuelPressureMax=168 ; Vout = VCC x (P x 0.8 / 150 + 0.1) https://aftermarketindustries.com.au/image/cache/data/aftermarket%20industries%20fuel%20pressure%20sensor%20data%202-500x500.png 
        field = "Pression a 0v",           fuelPressureMin,    { fuelPressureEnable }
        field = "Pression a 5v",           fuelPressureMax,    { fuelPressureEnable }

    dialog = fuelPressureDialog, "Pression de carburant", xAxis
        gauge = fuelPressureGauge
        panel = fuelPressureSettings

    dialog = oilPressureSettings
        field = "Active",                  oilPressureEnable
        field = "Pin du Capteur ",                      oilPressurePin,    { oilPressureEnable }
        settingSelector = "Capteur communs",                     { oilPressureEnable }
            settingOption = "0-100 PSI",  oilPressureMin=-3,   oilPressureMax=103 ; Vout = VCC x (P x .97 / 200 + 0.5)
            settingOption = "0-150 PSI",  oilPressureMin=-18,   oilPressureMax=168 ; Vout = VCC x (P x 0.8 / 150 + 0.1) https://aftermarketindustries.com.au/image/cache/data/aftermarket%20industries%20fuel%20pressure%20sensor%20data%202-500x500.png 
        field = "Pressure a 0v",           oilPressureMin,    { oilPressureEnable }
        field = "Pressure a 5v",           oilPressureMax,    { oilPressureEnable }

    dialog = oilPressureDialog, "Pression d'huile", xAxis
        gauge = oilPressureGauge
        panel = oilPressureSettings

    dialog = pressureSensors, "Capteurs de pression"
        topicHelp = "https://wiki.matzs.com/en/configuration/Sensor_Calibration"
        panel = fuelPressureDialog
        panel = oilPressureDialog

    dialog = EGTSettings
        field = "Active",                  EGTEnable
        field = "Pin du Capteur ",                      EGTPin,    { EGTEnable }
        settingSelector = "Capteur communs",                     { EGTEnable }
            settingOption = "0-1000",  EGTMin=0,   EGTMax=1015 ; Vout = VCC x (T x 200)
            settingOption = "0-1250",  EGTMin=0,   EGTMax=1265 ; Vout = VCC x (T x 250) 
        field = "Temperature a 0v  ",           EGTMin,    { EGTEnable }
        field = "Temperature a 5v  ",           EGTMax,    { EGTEnable }

    dialog = EGTDialog, "TEMP echappement", xAxis
        gauge = EGTGauge
        panel = EGTSettings
		
	dialog = EGTSensors, "TEMP echappement"
        panel = EGTDialog	

    dialog = boostSettings, "Controle Turbo"
        topicHelp = "https://wiki.matzs.com/en/configuration/Boost_Control"
        field = "Boost Controle Actif ",    boostEnabled
        field = "Type de regulation ",       boostType,          { boostEnabled }
        field = "pin de commande EV Boost ",         boostPin,           { boostEnabled }
        field = "Frequence de la vanne Boost ",     boostFreq,          { boostEnabled }

        field = "Vanne minimum duty cycle", boostMinDuty,  { boostEnabled && boostType == 1 }
        field = "Vanne maximum duty cycle", boostMaxDuty,  { boostEnabled && boostType == 1 }
        panel = boostCut
        panel = boostByGear,                { boostEnabled && vssMode > 1 }
        field = "Regales Boucle ferme "
        field = "Mode de Control ",             boostMode,          { boostEnabled && boostType == 1 }
        slider = "Sensibilite ",             boostSens,     horizontal, { boostEnabled && boostType == 1 }
        field = "Interval de regulation ",         boostIntv,     { boostEnabled && boostType == 1 }
        field = "P ",                        boostKP,       { boostEnabled && boostMode && boostType == 1 }
        field = "I ",                        boostKI,       { boostEnabled && boostMode && boostType == 1 }
        field = "D ",                        boostKD,       { boostEnabled && boostMode && boostType == 1 }

    dialog = vvt2, "Sortie VVT 2 "
        field = "Activation Control VVT2 ",    vvt2Enabled
        field = "pin de sortie VVT2 ",         vvt2Pin,           { vvt2Enabled }
        field = "Direction incrementation du duty ",vvt2PWMdir,        { vvt2Enabled && vvtMode == 2 }
        field = "Angle VVT2 @ 0% duty",vvt2CL0DutyAng,    { vvt2Enabled && vvtMode == 2 }
        field = "Sens de detection du 2eme capteur pour VVT2 ",       TrigEdgeThrd,      { vvt2Enabled && vvtMode == 2 }

    dialog = vvtClosedLoop, "Boucle ferme"
        field = "Direction incrementation du duty ", vvtPWMdir
        field = "Utiliser la methode ansienne ",           vvtCLUseHold
        field = "Duty ",                vvtCLholdDuty,  { vvtCLUseHold }
        field = "Ajuster avance injection ",       vvtCLAlterFuelTiming
        field = "Angle VVT1 @ 0% duty",      vvtCL0DutyAng
        field = "Minimum Cam angle",        vvtCLMinAng
        field = "Maximum Cam angle",        vvtCLMaxAng
        field = ""
        field = "Gain Proportionel ",        vvtCLKP
        field = "Gain Integral ",            vvtCLKI
        field = "Gain Differentiel ",        vvtCLKD
        field = "Minimum valve duty",       vvtCLminDuty,           { vvtEnabled && vvtMode == 2 }
        field = "Maximum valve duty",       vvtCLmaxDuty,           { vvtEnabled && vvtMode == 2 }


    dialog = vvtSettings, "VVT Control"
        field = "VVT Control Actif",    vvtEnabled
        field = "VVT Minimum CLT",  vvtMinClt, { vvtEnabled }
        field = "VVT Delais",  vvtDelay, { vvtEnabled }
        field = "VVT Mode",               vvtMode,          { vvtEnabled }
        field = "#Veuillez noter que la boucle fermee est actuellement pour Miata et les modeles de dents manquants UNIQUEMENT"
        field = "Source de regulation",            vvtLoadSource,    { vvtEnabled }
        field = "pin de sortie VVT1 ",         vvt1Pin,           { vvtEnabled }
        field = "Frequence vanne VVT1 ",     vvtFreq,          { vvtEnabled }
        slider = "Filtre angulaire VVT1 ",   ANGLEFILTER_VVT,horizontal, { vvtEnabled }
        panel = vvtClosedLoop,                              { vvtEnabled && vvtMode == 2 }
        panel = vvt2,                                       { vvtEnabled }

    dialog = wmiSettings, "Injection de methanol WMI"
        field = "#Pas de VVT!"
        field = "WMI Control actif",    wmiEnabled
        field = "WMI Mode",               wmiMode,          { wmiEnabled }
        field = "WMI min TPS", wmiTPS,          { wmiEnabled }
        field = "WMI min RPM", wmiRPM ,          { wmiEnabled }
        field = "WMI min MAP", wmiMAP,          { wmiEnabled }
        field = "WMI max MAP", wmiMAP2,          { wmiEnabled && wmiMode == 1}
        field = "WMI min IAT",  wmiIAT,          { wmiEnabled }
        field = "WMI offset", wmiOffset,          { wmiEnabled && wmiMode == 3}
        field = ""
        field = "Pin de sortie WMI PWM ",         vvt1Pin,           { wmiEnabled }
        field = "WMI PWM freq.",     vvtFreq,          { wmiEnabled }
        field = ""
        field = "Pin d'activation commande WMI ", wmiEnabledPin, { wmiEnabled }
        field = ""
        field = "Capteur niveau vide reservoir WMI ", wmiEmptyEnabled, { wmiEnabled }
        field = "Pin reservoir vide", wmiEmptyPin, { wmiEnabled }
        field = "Sens de detection du capteur", wmiEmptyPolarity, { wmiEnabled }
        field = ""
        field = "WMI sortie voyant ", wmiIndicatorEnabled, { wmiEnabled }
        field = "Pin d'activation WMI sortie voyant ", wmiIndicatorPin, { wmiEnabled }
        field = "Polarite du voyant", wmiIndicatorPolarity, { wmiEnabled }
        field = ""
        field = "Correction avance allumage", wmiAdvEnabled, { wmiEnabled }
        panel = wmi_adv_curve, { wmiEnabled && wmiAdvEnabled }

    dialog = warmup, "Starter (WUE) - multiplication % "
        panel = warmup_curve

    ;Fuel trim composite dialog
    dialog = inj_trim1TblTitle, "Channel #1"
        panel = fuelTrimTable1Tbl,      { fuelTrimEnabled && nCylinders >= 2  }
    dialog = inj_trim2TblTitle, "Channel #2"
        panel = fuelTrimTable2Tbl,      { fuelTrimEnabled && nCylinders >= 2 }
    dialog = inj_trim3TblTitle, "Channel #3"
        panel = fuelTrimTable3Tbl,      { fuelTrimEnabled && nCylinders >= 3 }
    dialog = inj_trim4TblTitle, "Channel #4"
        panel = fuelTrimTable4Tbl,      { fuelTrimEnabled && nCylinders >= 4 }
    dialog = inj_trim5TblTitle, "Channel #5"
        panel = fuelTrimTable5Tbl,      { fuelTrimEnabled && nCylinders >= 5 }
    dialog = inj_trim6TblTitle, "Channel #6"
        panel = fuelTrimTable6Tbl,      { fuelTrimEnabled && nCylinders >= 6 }
    dialog = inj_trim7TblTitle, "Channel #7"
        panel = fuelTrimTable7Tbl,      { fuelTrimEnabled && nCylinders >= 7 }
    dialog = inj_trim8TblTitle, "Channel #8"
        panel = fuelTrimTable8Tbl,      { fuelTrimEnabled && nCylinders >= 8 }

    dialog = inj_trimadt, "", xAxis
        panel = inj_trim1TblTitle
        panel = inj_trim2TblTitle
    dialog = inj_trimadb, "", xAxis
        panel = inj_trim3TblTitle
        panel = inj_trim4TblTitle
    dialog = inj_trimadt_B, "", xAxis
        panel = inj_trim5TblTitle
        panel = inj_trim6TblTitle
    dialog = inj_trimadb_B, "", xAxis
        panel = inj_trim7TblTitle
        panel = inj_trim8TblTitle

    dialog = inj_trim_enable, ""
        field = "Correction individuelle des injecteurs",     fuelTrimEnabled,    { injLayout == 3 && nCylinders <= nFuelChannels }

    dialog = inj_trimad,"Injecteur Cyl 1-4 Trims", yAxis
        panel = inj_trim_enable, North
        panel = inj_trimadt, Center
        panel = inj_trimadb, South

    dialog = inj_trimad_B,"Injecteur Cyl 5-8 Trims", yAxis
        panel = inj_trim_enable, North
        panel = inj_trimadt_B, Center
        panel = inj_trimadb_B, South

    ;;Injector staging
    dialog = stagingTableDialog_north, ""
        field = "Injection etagee active", stagingEnabled
        field = "Mode d'etagement",   stagingMode
        field = "Taille injecteurs primaire",    stagedInjSizePri,             { stagingEnabled }
        field = "Taille injecteurs secondaire",  stagedInjSizeSec,             { stagingEnabled }

    dialog = stagingTableDialog_south, ""
        panel = stagingTbl,     { stagingMode == 0 }

    dialog = stagingTableDialog, "Injection etagee"
        topicHelp = "https://wiki.matzs.com/en/configuration/Staged_Injection"
        panel = stagingTableDialog_north, North
        panel = stagingTableDialog_south, South

    dialog = outputtest_warningmessage, ""
        field = "ATTENTION! A UTILISER A VOS RISQUES ET PERILS. UNE UTILISATION INCORRECTE ENDOMMAGERA VOTRE MATERIEL !"
        field = "N'essayez pas d'utiliser cette page pendant que votre moteur tourne !"
        field = "Forcer les sorties d'injecteur ou d'allumage pourrait provoquer une inondation de votre moteur ou des dommages permanents aux bobines !"


  dialog = enableoutputtestbuttons, "Activation du mode Test", xAxis
    ;commandButton = "Label Text", command, { Enabled Condition }, optionalFlags

    ; The rem > 0 expression is just for testing.. It works when the arduino is on the Stim with rpm.
    ; a status bit there would be the expected real expression
    commandButton = "Mode Test Actif", cmdEnableTestMode,{!testenabled && !testactive }

    ; if clickOnCloseIfEnabled is set, then the command assigned to this button will be run on the
    ; dialog close, but only if the enable condition is true
    ; valid click flags are:
    ; clickOnCloseIfEnabled - the command will be sent on dialog close if active condition is true
    ; clickOnCloseIfDisabled - the command will be sent on dialog close if active condition is false
    ; clickOnClose - the command will be sent on dialog close always
    commandButton = "Stop Mode Test", cmdStopTestMode,{testactive}, clickOnCloseIfEnabled

  dialog = outputtestinj1, "Injecteur CH1", yAxis
        commandButton = "Off", cmdtestinj1off,{testactive}
        commandButton = "50% DC", cmdtestinj150dc,{!testenabled && testactive}
        commandButton = "On", cmdtestinj1on,{!testenabled && testactive}
    dialog = outputtestinj2, "Injecteur CH2", yAxis
        commandButton = "Off", cmdtestinj2off,{testactive && nFuelChannels >= 2 }
        commandButton = "50% DC", cmdtestinj250dc,{!testenabled && testactive && nFuelChannels >= 2 }
        commandButton = "On", cmdtestinj2on,{ !testenabled && testactive && nFuelChannels >= 2 }
    dialog = outputtestinj3, "Injecteur CH3", yAxis
        commandButton = "Off", cmdtestinj3off,{ testactive && nFuelChannels >= 3 }
        commandButton = "50% DC", cmdtestinj350dc,{!testenabled && testactive && nFuelChannels >= 3 }
        commandButton = "On", cmdtestinj3on,{ !testenabled && testactive && nFuelChannels >= 3 }
    dialog = outputtestinj4, "Injecteur CH4", yAxis
        commandButton = "Off", cmdtestinj4off,{ testactive && nFuelChannels >= 4 }
        commandButton = "50% DC", cmdtestinj450dc,{!testenabled && testactive && nFuelChannels >= 4 }
        commandButton = "On", cmdtestinj4on  ,{ !testenabled && testactive && nFuelChannels >= 4 }
    dialog = outputtestinj5, "Injecteur CH5", yAxis
        commandButton = "Off", cmdtestinj5off,{ testactive && nFuelChannels >= 5 }
        commandButton = "50% DC", cmdtestinj550dc,{!testenabled && testactive && nFuelChannels >= 5 }
        commandButton = "On", cmdtestinj5on,{ !testenabled && testactive && nFuelChannels >= 5 }
    dialog = outputtestinj6, "Injecteur CH6", yAxis
        commandButton = "Off", cmdtestinj6off,{ testactive && nFuelChannels >= 6 }
        commandButton = "50% DC", cmdtestinj650dc,{!testenabled && testactive && nFuelChannels >= 6 }
        commandButton = "On", cmdtestinj6on  ,{ !testenabled && testactive && nFuelChannels >= 6 }
    dialog = outputtestinj7, "Injecteur CH7", yAxis
        commandButton = "Off", cmdtestinj7off,{ testactive && nFuelChannels >= 7 }
        commandButton = "50% DC", cmdtestinj750dc,{!testenabled && testactive && nFuelChannels >= 7 }
        commandButton = "On", cmdtestinj7on,{ !testenabled && testactive && nFuelChannels >= 7 }
    dialog = outputtestinj8, "Injecteur CH8", yAxis
        commandButton = "Off", cmdtestinj8off,{ testactive && nFuelChannels >= 8 }
        commandButton = "50% DC", cmdtestinj850dc,{!testenabled && testactive && nFuelChannels >= 8 }
        commandButton = "On", cmdtestinj8on  ,{ !testenabled && testactive && nFuelChannels >= 8 }

    dialog = outputtest_injectors, "Test Sorties Injecteurs", xAxis
        panel = outputtestinj1
        panel = outputtestinj2
        panel = outputtestinj3
        panel = outputtestinj4
        panel = outputtestinj5
        panel = outputtestinj6
        panel = outputtestinj7
        panel = outputtestinj8

  dialog = outputtestspk1, "Allumage CH1 ", yAxis
        commandButton = "Off", cmdtestspk1off,{testactive}
        commandButton = "50% DC", cmdtestspk150dc,{!testenabled && testactive}
        commandButton = "On", cmdtestspk1on,{!testenabled && testactive}
  dialog = outputtestspk2, "Allumage CH2", yAxis
      commandButton = "Off", cmdtestspk2off,{testactive && nIgnChannels >= 2 }
      commandButton = "50% DC", cmdtestspk250dc,{!testenabled && testactive && nIgnChannels >= 2 }
      commandButton = "On", cmdtestspk2on,{ !testenabled && testactive && nIgnChannels >= 2 }
  dialog = outputtestspk3, "Allumage CH3", yAxis
      commandButton = "Off", cmdtestspk3off,{testactive && nIgnChannels >= 3 }
      commandButton = "50% DC", cmdtestspk350dc,{!testenabled && testactive && nIgnChannels >= 3 }
      commandButton = "On", cmdtestspk3on,{ !testenabled && testactive && nIgnChannels >= 3 }
  dialog = outputtestspk4, "Allumage CH4", yAxis
      commandButton = "Off", cmdtestspk4off,{testactive && nIgnChannels >= 4 }
      commandButton = "50% DC", cmdtestspk450dc,{!testenabled && testactive && nIgnChannels >= 4}
      commandButton = "On", cmdtestspk4on,{ !testenabled && testactive && nIgnChannels >= 4 }
  dialog = outputtestspk5, "Allumage CH5", yAxis
      commandButton = "Off", cmdtestspk5off,{testactive && nIgnChannels >= 5 }
      commandButton = "50% DC", cmdtestspk550dc,{!testenabled && testactive && nIgnChannels >= 5}
      commandButton = "On", cmdtestspk5on,{ !testenabled && testactive && nIgnChannels >= 5 }
  dialog = outputtestspk6, "Allumage CH6", yAxis
      commandButton = "Off", cmdtestspk6off,{testactive && nIgnChannels >= 6 }
      commandButton = "50% DC", cmdtestspk650dc,{!testenabled && testactive && nIgnChannels >= 6}
      commandButton = "On", cmdtestspk6on,{ !testenabled && testactive && nIgnChannels >= 6 }
  dialog = outputtestspk7, "Allumage CH7", yAxis
      commandButton = "Off", cmdtestspk7off,{testactive && nIgnChannels >= 7 }
      commandButton = "50% DC", cmdtestspk750dc,{!testenabled && testactive && nIgnChannels >= 7}
      commandButton = "On", cmdtestspk7on,{ !testenabled && testactive && nIgnChannels >= 7 }
  dialog = outputtestspk8, "Allumage CH8", yAxis
      commandButton = "Off", cmdtestspk8off,{testactive && nIgnChannels >= 8 }
      commandButton = "50% DC", cmdtestspk850dc,{!testenabled && testactive && nIgnChannels >= 8}
      commandButton = "On", cmdtestspk8on,{ !testenabled && testactive && nIgnChannels >= 8 }

    dialog = outputtest_spark, "Test sorties Allumages", xAxis
        panel = outputtestspk1
        panel = outputtestspk2
        panel = outputtestspk3
        panel = outputtestspk4
        panel = outputtestspk5
        panel = outputtestspk6
        panel = outputtestspk7
        panel = outputtestspk8

    dialog = outputtest1,"Test Sorties de la Cartes"
        topicHelp = "https://wiki.matzs.com/en/Hardware_testing_page"
        panel = enableoutputtestbuttons
        panel = outputtest_injectors
        panel = outputtest_spark
        ;panel = outputtest_io2
        panel = outputtest_warningmessage
    
    dialog = stm32cmd, "STM32 Commandes", yAxis
      commandButton = "Reboot Carte", cmdstm32reboot
      commandButton = "Reboot en mode Programmation Firmware", cmdstm32bootloader

    dialog = CanBcast, "Emission CAN constructeur"
        field = "BMW Instrument Cluster Broadcast",    canBMWCluster
        field = "VAG Instrument Cluster Broadcast",    canVAGCluster
        field = "HALDEX control Cluster Broadcast",    canHALDEXCluster
        field = "PSA Instrument Cluster Broadcast",    canPSACluster		

    dialog = Auxin_north  
      displayOnlyField = #"Second Port Serie actif", blankfield, {enable_secondarySerial},{enable_secondarySerial}    
      displayOnlyField = !"Second Port Serie Desactive", blankfield, {enable_secondarySerial == 0},{enable_secondarySerial == 0}    
      displayOnlyField = #"CANBUS actif", blankfield, {enable_intcan && intcan_available},{enable_intcan && intcan_available}    
      displayOnlyField = !"CANBUS Desactive", blankfield, {enable_intcan == 0 && intcan_available},{enable_intcan == 0 && intcan_available}    
      displayOnlyField = !"CANBUS impossible avec cette configuration", blankfield, {enable_intcan == 1 && intcan_available == 0},{enable_intcan == 1 && intcan_available == 0}    
      displayOnlyField = !"CANBUS impossible avec cette configuration", blankfield, {enable_intcan == 0 && intcan_available == 0},{enable_intcan == 0 && intcan_available == 0}    
        field = "  Si la serie secondaire ou le CANBUS interne est desactive, alors tout canal d'entree affecte a cette source externe ne fonctionnera PAS"  
    
  dialog = canAuxinput_alias, "", yAxis
        field = "Alias d'entree"
        field = "", AUXin00Alias , {(caninput_sel0a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin01Alias , {(caninput_sel1a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin02Alias , {(caninput_sel2a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin03Alias , {(caninput_sel3a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin04Alias , {(caninput_sel4a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin05Alias , {(caninput_sel5a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin06Alias , {(caninput_sel6a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin07Alias , {(caninput_sel7a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin08Alias , {(caninput_sel8a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin09Alias , {(caninput_sel9a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin10Alias , {(caninput_sel10a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin11Alias , {(caninput_sel11a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin12Alias , {(caninput_sel12a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin13Alias , {(caninput_sel13a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin14Alias , {(caninput_sel14a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin15Alias , {(caninput_sel15a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b && (enable_secondarySerial || (enable_intcan && intcan_available)))}

  dialog = caninput_sel, ""
    ;CAN inputs
        field = "               CAN Canal d'entree on/off"
        field = "CAN Entree 0", caninput_sel0a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 0", caninput_sel0b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 1", caninput_sel1a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 1", caninput_sel1b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 2", caninput_sel2a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 2", caninput_sel2b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 3", caninput_sel3a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 3", caninput_sel3b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 4", caninput_sel4a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 4", caninput_sel4b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 5", caninput_sel5a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 5", caninput_sel5b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 6", caninput_sel6a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 6", caninput_sel6b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 7", caninput_sel7a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 7", caninput_sel7b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 8", caninput_sel8a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 8", caninput_sel8b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 9", caninput_sel9a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 9", caninput_sel9b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 10", caninput_sel10a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 10", caninput_sel10b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 11", caninput_sel11a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 11", caninput_sel11b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 12", caninput_sel12a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 12", caninput_sel12b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 13", caninput_sel13a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 13", caninput_sel13b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 14", caninput_sel14a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 14", caninput_sel14b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Entree 15", caninput_sel15a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Entree 15", caninput_sel15b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
    
    dialog = caninput_parameter_group, "", yAxis
        field = "             Source CAN Address"
        field = "", caninput_source_can_address0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

  dialog = caninput_parameter_start_byte, "", yAxis
        field = "        source data start byte"
        field = "", caninput_source_start_byte0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_start_byte6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_start_byte14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

  dialog = caninput_parameter_num_byte, "", yAxis
        field = "Parrametre nombre de bits d'entree"
        field = "", caninput_source_num_bytes0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_num_bytes6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_num_bytes14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

    dialog = caninput_serial_can, "", yAxis
        field = "Serial/CAN"
        field = "", caninput_sel0extsourcea, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel0extsourceb, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel0extsourcec, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel1extsourcea, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel1extsourceb, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel1extsourcec, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel2extsourcea, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel2extsourceb, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel2extsourcec, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel3extsourcea, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel3extsourceb, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel3extsourcec, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel4extsourcea, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel4extsourceb, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel4extsourcec, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel5extsourcea, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel5extsourceb, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel5extsourcec, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel6extsourcea, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel6extsourceb, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel6extsourcec, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel7extsourcea, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel7extsourceb, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel7extsourcec, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel8extsourcea, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel8extsourceb, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel8extsourcec, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel9extsourcea, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel9extsourceb, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel9extsourcec, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel10extsourcea, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel10extsourceb, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel10extsourcec, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel11extsourcea, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel11extsourceb, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel11extsourcec, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel12extsourcea, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel12extsourceb, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel12extsourcec, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel13extsourcea, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel13extsourceb, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel13extsourcec, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel14extsourcea, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel14extsourceb, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel14extsourcec, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel15extsourcea, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel15extsourceb, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel15extsourcec, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}
    
    dialog = caninconfig_blank1,""
        field = ""

  dialog = Canin_config1, "", xAxis
        panel = canAuxinput_alias
        panel = caninconfig_blank1
        panel = caninput_sel
    panel = caninconfig_blank1
    panel = caninput_serial_can
        panel = caninconfig_blank1
        panel = caninput_parameter_group
        panel = caninconfig_blank1
        panel = caninput_parameter_start_byte
        panel = caninconfig_blank1
        panel = caninput_parameter_num_byte        

  ;dialog = Canin_config2, "External Data Input"
    ;    field = "Enable External data input",    enable_intcandata_in

  dialog = Canin_config, "",yAxis
  topicHelp = "http://matzs.com/wiki/index.php/Secondary_Serial_IO_interface#Read_external_analog_data"
        panel = Auxin_north
        panel = Canin_config1
    
  dialog = canAuxoutput_alias, "", yAxis
        field = "Input Alias"
        field = "", AUXin00Alias , {canoutput_sel0}
        field = "", AUXin01Alias , {canoutput_sel1}
        field = "", AUXin02Alias , {canoutput_sel2}
        field = "", AUXin03Alias , {canoutput_sel3}
        field = "", AUXin04Alias , {canoutput_sel4}
        field = "", AUXin05Alias , {canoutput_sel5}
        field = "", AUXin06Alias , {canoutput_sel6}
        field = "", AUXin07Alias , {canoutput_sel7}
        ;field = "", AUXin08Alias , {canoutput_sel8}
        ;field = "", AUXin09Alias , {canoutput_sel9}
        ;field = "", AUXin10Alias , {canoutput_sel10}
        ;field = "", AUXin11Alias , {canoutput_sel11}
        ;field = "", AUXin12Alias , {canoutput_sel12}
        ;field = "", AUXin13Alias , {canoutput_sel13}
        ;field = "", AUXin14Alias , {canoutput_sel14}
        ;field = "", AUXin15Alias , {canoutput_sel15}
        
  dialog = canoutput_sel, "", yAxis
    ;CAN outputs
        field = "CAN Canal de sortie on/off"
        field = "CAN Sortie 0", canoutput_sel0, { enable_intcandata_out}
        field = "CAN Sortie 1", canoutput_sel1, { enable_intcandata_out }
        field = "CAN Sortie 2", canoutput_sel2, { enable_intcandata_out }
        field = "CAN Sortie 3", canoutput_sel3, { enable_intcandata_out }
        field = "CAN Sortie 4", canoutput_sel4, { enable_intcandata_out }
        field = "CAN Sortie 5", canoutput_sel5, { enable_intcandata_out }
        field = "CAN Sortie 6", canoutput_sel6, { enable_intcandata_out }
        field = "CAN Sortie 7", canoutput_sel7, { enable_intcandata_out }
       ; field = "CAN Sortie 8", canoutput_sel8, { enable_intcandata_out}
       ; field = "CAN Sortie 9", canoutput_sel9, { enable_intcandata_out }
       ; field = "CAN Sortie 10", canoutput_sel10, { enable_intcandata_out }
       ; field = "CAN Sortie 11", canoutput_sel11, { enable_intcandata_out }
       ; field = "CAN Sortie 12", canoutput_sel12, { enable_intcandata_out }
       ; field = "CAN Sortie 13", canoutput_sel13, { enable_intcandata_out }
      ;  field = "CAN Sortie 14", canoutput_sel14, { enable_intcandata_out }
     ;   field = "CAN Sortie 15", canoutput_sel15, { enable_intcandata_out }

    dialog = canoutput_parameter_group, "", yAxis
        field = "Message Group de Sortie"
        field = "", canoutput_param_group[0], { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_group[1], { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_group[2], { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_group[3], { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_group[4], { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_group[5], { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_group[6], { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_group[7], { canoutput_sel7 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[8], { canoutput_sel9 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[9], { canoutput_sel10 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[10], { canoutput_sel1 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[11], { canoutput_sel2 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[12], { canoutput_sel3 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[13], { canoutput_sel4 && enable_intcandata_out }
  ;  field = "", canoutput_param_group[14], { canoutput_sel5 && enable_intcandata_out }
    ;    field = "", canoutput_param_group[15], { canoutput_sel6 && enable_intcandata_out }

  dialog = canoutput_parameter_start_byte, "", yAxis
        field = "CAN sortie Demarre au Bit "
        field = "", canoutput_param_start_byte0, { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_start_byte1, { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_start_byte2, { canoutput_sel2 && enable_intcandata_out }
        field = "", canoutput_param_start_byte3, { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_start_byte4, { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_start_byte5, { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_start_byte6, { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_start_byte7, { canoutput_sel7 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte8, { canoutput_sel8 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte9, { canoutput_sel9 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte10, { canoutput_sel10 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte11, { canoutput_sel11 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte12, { canoutput_sel12 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte13, { canoutput_sel13 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte14, { canoutput_sel14 && enable_intcandata_out }
 ;       field = "", canoutput_param_start_byte15, { canoutput_sel15 && enable_intcandata_out }

  dialog = canoutput_parameter_num_byte, "", yAxis
        field = "CAN Sortie nombre de Bits"
        field = "", canoutput_param_num_bytes0, { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes1, { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes2, { canoutput_sel2 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes3, { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes4, { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes5, { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes6, { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes7, { canoutput_sel7 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes8, { canoutput_sel8 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes9, { canoutput_sel9 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes10, { canoutput_sel10 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes11, { canoutput_sel11 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes12, { canoutput_sel12 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes13, { canoutput_sel13 && enable_intcandata_out }
;    field = "", canoutput_param_num_bytes14, { canoutput_sel14 && enable_intcandata_out }
 ;       field = "", canoutput_param_num_bytes15, { canoutput_sel15 && enable_intcandata_out }

    dialog = canoutconfig_blank1,""
    field = ""

  dialog = Canout_config1, "", xAxis
        panel = canAuxoutput_alias
        panel = canoutconfig_blank1
        panel = canoutput_sel
        panel = canoutconfig_blank1
        panel = canoutput_parameter_group
        panel = canoutconfig_blank1
        panel = canoutput_parameter_start_byte
        panel = canoutconfig_blank1
        panel = canoutput_parameter_num_byte

  dialog = Canout_config2, "CAN Data Message emis"
    field = "Activation Emission de messages CAN",  enable_intcandata_out

  dialog = Canout_config, "", yAxis
      topicHelp = ""
      panel = Canout_config2
      panel = Canout_config1
	  
  dialog = can_serial3IO, "interface CanBus IO "
      topicHelp = "http://matzs.com/wiki/index.php/Secondary_Serial_IO_interface"
	  field = "#REMARQUE! Ne pas activer le 2eme port serie avec les processeurs ARM"
      field = "Activation 2eme Port Serie",       enable_secondarySerial, {pinLayout < 60}
      field = "Activation Port Canbus",     enable_intcan
      field = "Carte TsCanId", speeduino_tsCanId
      field = "Adresse CAN bus", true_address, {enable_secondarySerial||enable_intcan}
      field = "REMARQUE! L'adresse des donnees en temps reel DOIT etre au moins 0x16 PLUS GRANDE que l'adresse vraie car elles sont reservees pour une expansion future"
      field = "Address emission Data Base Can ", realtime_base_address, {enable_secondarySerial||enable_intcan}
      field = "addresse OBD ", obd_address, {enable_secondarySerial||enable_intcan}
	  
  dialog = serial3IO, "interface 2eme Port Serie IO "
      topicHelp = "http://matzs.com/wiki/index.php/Serial3_IO_interface"
      field = "Activation 2eme Port Serie",       enable_secondarySerial
      field = "Activation Port Canbus",     enable_intcan
      field = "Carte TsCanId", speeduino_tsCanId
      field = "Adresse CAN bus", true_address, {enable_secondarySerial||enable_intcan}
      field = "REMARQUE! L'adresse des donnees en temps reel DOIT etre au moins 0x16 PLUS GRANDE que l'adresse vraie car elles sont reservees pour une expansion future"
      field = "Address emission Data Base Can ", realtime_base_address, {enable_secondarySerial||enable_intcan}
      field = "addresse OBD ", obd_address
  
    dialog = reset_control, "Reset Control"
        ; Control type options for custom firmware
        field = "Control Type", resetControl
        field = "Control Pin", resetControlPin

    dialog = Auxinput_pin_selection, "", yAxis
        field = "             Source"       
        displayOnlyField = "Off 0", blankfield, {},{(caninput_sel0a == 0 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel0b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel0b == 0 && (!enable_secondarySerial && (enable_intcan && intcan_available == 1)))}
        displayOnlyField = "Source externe 0 via serie secondaire", blankfield, {},{(caninput_sel0b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel0b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourceb == 0)}
        displayOnlyField = "Source externe 0 via CAN bus", blankfield, {},{(caninput_sel0b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourceb == 1) ||(caninput_sel0b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourcec == 1)}
        field = "Local Analog Source 0                 Pin No:", Auxin0pina , {}, {(caninput_sel0a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 0                  Pin No:", Auxin0pinb , {}, {(caninput_sel0a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 1", blankfield, {},{(caninput_sel1a == 0 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 0 && ((enable_secondarySerial && enable_intcan) || (enable_secondarySerial && !enable_intcan) || (!enable_secondarySerial && enable_intcan)))}
        displayOnlyField = "Source externe 1 via serie secondaire", blankfield, {},{(caninput_sel1b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel1b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourceb == 0)}
        displayOnlyField = "Source externe 1 via CAN bus", blankfield, {},{(caninput_sel1b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourceb == 1) ||(caninput_sel1b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourcec == 1)}
        field = "Local Analog Source 1                 Pin No:", Auxin1pina , {}, {(caninput_sel1a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 1                  Pin No:", Auxin1pinb , {}, {(caninput_sel1a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        
        displayOnlyField = "Off 2", blankfield, {},{(caninput_sel2a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel2b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel2b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel2b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 2 via serie secondaire", blankfield, {},{(caninput_sel2b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel2b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourceb == 0)}
        displayOnlyField = "Source externe 2 via CAN bus", blankfield, {},{(caninput_sel2b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourceb == 1) ||(caninput_sel2b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourcec == 1)}
        field = "Local Analog Source 2                 Pin No:", Auxin2pina , {}, {(caninput_sel2a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 2                  Pin No:", Auxin2pinb , {}, {(caninput_sel2a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 3", blankfield, {},{(caninput_sel3a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel3b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel3b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel3b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 3 via serie secondaire", blankfield, {},{(caninput_sel3b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel3b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourceb == 0)}
        displayOnlyField = "Source externe 3 via CAN bus", blankfield, {},{(caninput_sel3b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourceb == 1) ||(caninput_sel3b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourcec == 1)}
        field = "Local Analog Source 3                 Pin No:", Auxin3pina , {}, {(caninput_sel3a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 3                  Pin No:", Auxin3pinb , {}, {(caninput_sel3a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 4", blankfield, {},{(caninput_sel4a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel4b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel4b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel4b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 4 via serie secondaire", blankfield, {},{(caninput_sel4b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel4b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourceb == 0)}
        displayOnlyField = "Source externe 4 via CAN bus", blankfield, {},{(caninput_sel4b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourceb == 1) ||(caninput_sel4b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourcec == 1)}
        field = "Local Analog Source 4                 Pin No:", Auxin4pina , {}, {(caninput_sel4a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 4                  Pin No:", Auxin4pinb , {}, {(caninput_sel4a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 5", blankfield, {},{(caninput_sel5a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel5b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel5b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel5b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 5 via serie secondaire", blankfield, {},{(caninput_sel5b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel5b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourceb == 0)}
        displayOnlyField = "Source externe 5 via CAN bus", blankfield, {},{(caninput_sel5b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourceb == 1) ||(caninput_sel5b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourcec == 1)}
        field = "Local Analog Source 5                 Pin No:", Auxin5pina , {}, {(caninput_sel5a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 5                  Pin No:", Auxin5pinb , {}, {(caninput_sel5a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 6", blankfield, {},{(caninput_sel6a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel6b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel6b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel6b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 6 via serie secondaire", blankfield, {},{(caninput_sel6b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel6b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourceb == 0)}
        displayOnlyField = "Source externe 6 via CAN bus", blankfield, {},{(caninput_sel6b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourceb == 1) ||(caninput_sel6b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourcec == 1)}
        field = "Local Analog Source 6                 Pin No:", Auxin6pina , {}, {(caninput_sel6a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 6                  Pin No:", Auxin6pinb , {}, {(caninput_sel6a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 7", blankfield, {},{(caninput_sel7a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel7b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel7b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel7b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 7 via serie secondaire", blankfield, {},{(caninput_sel7b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel7b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourceb == 0)}
        displayOnlyField = "Source externe 7 via CAN bus", blankfield, {},{(caninput_sel7b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourceb == 1) ||(caninput_sel7b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourcec == 1)}
        field = "Local Analog Source 7                 Pin No:", Auxin7pina , {}, {(caninput_sel7a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 7                  Pin No:", Auxin7pinb , {}, {(caninput_sel7a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 8", blankfield, {},{(caninput_sel8a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel8b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel8b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel8b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 8 via serie secondaire", blankfield, {},{(caninput_sel8b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel8b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourceb == 0)}
        displayOnlyField = "Source externe 8 via CAN bus", blankfield, {},{(caninput_sel8b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourceb == 1) ||(caninput_sel8b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourcec == 1)}
        field = "Local Analog Source 8                 Pin No:", Auxin8pina , {}, {(caninput_sel8a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 8                  Pin No:", Auxin8pinb , {}, {(caninput_sel8a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 9", blankfield, {},{(caninput_sel9a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel9b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel9b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel9b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 9 via serie secondaire", blankfield, {},{(caninput_sel9b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel9b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourceb == 0)}
        displayOnlyField = "Source externe 9 via CAN bus", blankfield, {},{(caninput_sel9b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourceb == 1) ||(caninput_sel9b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourcec == 1)}
        field = "Local Analog Source 9                 Pin No:", Auxin9pina , {}, {(caninput_sel9a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 9                  Pin No:", Auxin9pinb , {}, {(caninput_sel9a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 10", blankfield, {},{(caninput_sel10a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel10b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel10b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel10b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 10 via serie secondaire", blankfield, {},{(caninput_sel10b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel10b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourceb == 0)}
        displayOnlyField = "Source externe 10 via CAN bus", blankfield, {},{(caninput_sel10b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourceb == 1) ||(caninput_sel10b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourcec == 1)}
        field = "Local Analog Source 10                 Pin No:", Auxin10pina , {}, {(caninput_sel10a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 10                  Pin No:", Auxin10pinb , {}, {(caninput_sel10a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 11", blankfield, {},{(caninput_sel11a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel11b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel11b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel11b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 11 via serie secondaire", blankfield, {},{(caninput_sel11b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel11b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourceb == 0)}
        displayOnlyField = "Source externe 11 via CAN bus", blankfield, {},{(caninput_sel11b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourceb == 1) ||(caninput_sel11b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourcec == 1)}
        field = "Local Analog Source 11                 Pin No:", Auxin11pina , {}, {(caninput_sel11a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 11                  Pin No:", Auxin11pinb , {}, {(caninput_sel11a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 12", blankfield, {},{(caninput_sel12a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel12b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel12b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel12b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 12 via serie secondaire", blankfield, {},{(caninput_sel12b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel12b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourceb == 0)}
        displayOnlyField = "Source externe 12 via CAN bus", blankfield, {},{(caninput_sel12b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourceb == 1) ||(caninput_sel12b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourcec == 1)}
        field = "Local Analog Source 12                 Pin No:", Auxin12pina , {}, {(caninput_sel12a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 12                  Pin No:", Auxin12pinb , {}, {(caninput_sel12a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 13", blankfield, {},{(caninput_sel13a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel13b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel13b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel13b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 13 via serie secondaire", blankfield, {},{(caninput_sel13b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel13b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourceb == 0)}
        displayOnlyField = "Source externe 13 via CAN bus", blankfield, {},{(caninput_sel13b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourceb == 1) ||(caninput_sel13b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourcec == 1)}
        field = "Local Analog Source 13                 Pin No:", Auxin13pina , {}, {(caninput_sel13a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 13                  Pin No:", Auxin13pinb , {}, {(caninput_sel13a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 14", blankfield, {},{(caninput_sel14a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel14b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel14b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel14b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 14 via serie secondaire", blankfield, {},{(caninput_sel14b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel14b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourceb == 0)}
        displayOnlyField = "Source externe 14 via CAN bus", blankfield, {},{(caninput_sel14b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourceb == 1) ||(caninput_sel14b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourcec == 1)}
        field = "Local Analog Source 14                 Pin No:", Auxin14pina , {}, {(caninput_sel14a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 14                  Pin No:", Auxin14pinb , {}, {(caninput_sel14a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 15", blankfield, {},{(caninput_sel15a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel15b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel15b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel15b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "Source externe 15 via serie secondaire", blankfield, {},{(caninput_sel15b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel15b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourceb == 0)}
        displayOnlyField = "Source externe 15 via CAN bus", blankfield, {},{(caninput_sel15b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourceb == 1) ||(caninput_sel15b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourcec == 1)}
        field = "Local Analog Source 15                 Pin No:", Auxin15pina , {}, {(caninput_sel15a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 15                  Pin No:", Auxin15pinb , {}, {(caninput_sel15a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
          
    dialog = Auxinput_alias, "", yAxis
        field = "Alias d'entree"
        field = "", AUXin00Alias , {(caninput_sel0a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin01Alias , {(caninput_sel1a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin02Alias , {(caninput_sel2a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin03Alias , {(caninput_sel3a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin04Alias , {(caninput_sel4a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin05Alias , {(caninput_sel5a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin06Alias , {(caninput_sel6a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin07Alias , {(caninput_sel7a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin08Alias , {(caninput_sel8a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin09Alias , {(caninput_sel9a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin10Alias , {(caninput_sel10a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin11Alias , {(caninput_sel11a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin12Alias , {(caninput_sel12a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin13Alias , {(caninput_sel13a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin14Alias , {(caninput_sel14a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin15Alias , {(caninput_sel15a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
                
    dialog = Auxinput_channelenable, "", yAxis
        field = "               Entree Aux actives"
        field = "AUX Entree 0", caninput_sel0a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 0", caninput_sel0b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 1", caninput_sel1a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 1", caninput_sel1b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 2", caninput_sel2a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 2", caninput_sel2b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 3", caninput_sel3a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 3", caninput_sel3b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 4", caninput_sel4a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 4", caninput_sel4b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 5", caninput_sel5a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 5", caninput_sel5b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 6", caninput_sel6a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 6", caninput_sel6b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 7", caninput_sel7a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 7", caninput_sel7b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 8", caninput_sel8a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 8", caninput_sel8b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 9", caninput_sel9a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 9", caninput_sel9b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 10", caninput_sel10a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 10", caninput_sel10b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 11", caninput_sel11a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 11", caninput_sel11b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 12", caninput_sel12a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 12", caninput_sel12b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 13", caninput_sel13a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 13", caninput_sel13b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 14", caninput_sel14a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 14", caninput_sel14b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Entree 15", caninput_sel15a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Entree 15", caninput_sel15b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
  
    dialog = Auxin_south, "Configuration des entrees Auxilliaires",xAxis
        panel = Auxinput_alias
        panel = Auxinput_channelenable
        panel = Auxinput_pin_selection 
  
    dialog = Auxin_config, "",yAxis      
      panel = Auxin_north
      panel = Auxin_south

    dialog = gaugeLimits, "Gauge Limites"
        field = "#RPM"
        field = "Attention", rpmwarn
        field = "Danger", rpmdang
        field = "Haut", rpmhigh
        field = "#MAP"
        field = "Attention", mapwarn
        field = "Danger", mapdang
        field = "Haut", maphigh
        field = "#INDICATEUR TENSION BATTERY"
        field = "Bas", batlow
        field = "Haut", bathigh		
        field = !"Recharger le projet pour mettre a jour les jauges"

    dialog = io_summary, "Liste des I/O"
        displayOnlyField = "Pompe a carburant", fuelPumpPin, {fpPrime}
        displayOnlyField = "Ventillaeur moteur", fanPin, {fanEnable}
        displayOnlyField = "Compte tour", tachoPin, {tachoDuration}
        displayOnlyField = "Ralentie augmente Clim", idleUpPin, {idleUpEnabled}
        displayOnlyField = "Sortie Clim active", idleUpOutputPin, {idleUpEnabled && idleUpOutputEnabled}
        displayOnlyField = "Embrayage (launch)", launchPin, {launchEnable}
        displayOnlyField = "VVT1", vvt1Pin, {vvtEnabled}
        displayOnlyField = "VVT2", vvt2Pin, {vvtEnabled}
        displayOnlyField = "WMI", vvt1Pin,  { wmiEnabled }
        displayOnlyField = "Vitesse VSS", vssPin, {vssMode > 1}
        displayOnlyField = "Electrovanne Turbo", boostPin, {boostEnabled}
        displayOnlyField = "Switch Table injection 2", fuel2InputPin, {fuel2Mode}
        displayOnlyField = "Switch Table Allumage 2", spark2InputPin, {spark2Mode}		
        displayOnlyField = "Baro/MAF", baroPin,{useExtBaro}
        displayOnlyField = "EMAP", EMAPPin, {useEMAP}
        displayOnlyField = "P. Huile", oilPressurePin,    { oilPressureEnable }
        displayOnlyField = "P. Carburant", fuelPressurePin,    { fuelPressureEnable }
		displayOnlyField = "T. Echappement", EGTPin,    { EGTEnable }
        displayOnlyField = "n2o_Actif_pin", n2o_arming_pin, {n2o_enable}
        displayOnlyField = "n2o_stage1_pin", n2o_stage1_pin, {n2o_enable}
        displayOnlyField = "n2o_stage2_pin", n2o_stage2_pin, {n2o_enable}
        displayOnlyField = "Cliquetis", knock_pin, {knock_mode}
        displayOnlyField = "reset Control", resetControlPin, {resetControl}
        displayOnlyField = "Bypass allumage", ignBypassPin, {ignBypassEnable}
        displayOnlyField = "Programmable  1", outputPin0, {outputPin[0]}
        displayOnlyField = "Programmable  2", outputPin1, {outputPin[1]}
        displayOnlyField = "Programmable  3", outputPin2, {outputPin[2]}
        displayOnlyField = "Programmable  4", outputPin3, {outputPin[3]}
        displayOnlyField = "Programmable  5", outputPin4, {outputPin[4]}
        displayOnlyField = "Programmable  6", outputPin5, {outputPin[5]}
        displayOnlyField = "Programmable  7", outputPin6, {outputPin[6]}
        displayOnlyField = "Programmable  8", outputPin7, {outputPin[7]}
    
  ;Rule 1
  dialog = prgm_out_rules_1_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn0,       {outputPin[0]}
    field = "",   firstCompType0,     {outputPin[0]}
    field = "",   firstTarget[0],     {outputPin[0]}
  dialog = prgm_out_rules_1_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn0,      {outputPin[0] && bitwise0}
    field = "",   secondCompType0,    {outputPin[0] && bitwise0}
    field = "",   secondTarget[0],    {outputPin[0] && bitwise0}
  ;Rule 2
  dialog = prgm_out_rules_2_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn1,       {outputPin[1]}
    field = "",   firstCompType1,     {outputPin[1]}
    field = "",   firstTarget[1],     {outputPin[1]}
  dialog = prgm_out_rules_2_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn1,      {outputPin[1] && bitwise1}
    field = "",   secondCompType1,    {outputPin[1] && bitwise1}
    field = "",   secondTarget[1],    {outputPin[1] && bitwise1}
  ;Rule 3
  dialog = prgm_out_rules_3_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn2,       {outputPin[2]}
    field = "",   firstCompType2,     {outputPin[2]}
    field = "",   firstTarget[2],     {outputPin[2]}
  dialog = prgm_out_rules_3_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn2,      {outputPin[2] && bitwise2}
    field = "",   secondCompType2,    {outputPin[2] && bitwise2}
    field = "",   secondTarget[2],    {outputPin[2] && bitwise2}
  ;Rule 4
  dialog = prgm_out_rules_4_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn3,       {outputPin[3]}
    field = "",   firstCompType3,     {outputPin[3]}
    field = "",   firstTarget[3],     {outputPin[3]}
  dialog = prgm_out_rules_4_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn3,      {outputPin[3] && bitwise3}
    field = "",   secondCompType3,    {outputPin[3] && bitwise3}
    field = "",   secondTarget[3],    {outputPin[3] && bitwise3}
  ;Rule 5 
  dialog = prgm_out_rules_5_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn4,       {outputPin[4]}
    field = "",   firstCompType4,     {outputPin[4]}
    field = "",   firstTarget[4],     {outputPin[4]}
  dialog = prgm_out_rules_5_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn4,      {outputPin[4] && bitwise4}
    field = "",   secondCompType4,    {outputPin[4] && bitwise4}
    field = "",   secondTarget[4],    {outputPin[4] && bitwise4}
  ;Rule 6
  dialog = prgm_out_rules_6_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn5,       {outputPin[5]}
    field = "",   firstCompType5,     {outputPin[5]}
    field = "",   firstTarget[5],     {outputPin[5]}
  dialog = prgm_out_rules_6_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn5,      {outputPin[5] && bitwise5}
    field = "",   secondCompType5,    {outputPin[5] && bitwise5}
    field = "",   secondTarget[5],    {outputPin[5] && bitwise5}
  ;Rule 7
  dialog = prgm_out_rules_7_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn6,       {outputPin[6]}
    field = "",   firstCompType6,     {outputPin[6]}
    field = "",   firstTarget[6],     {outputPin[6]}
  dialog = prgm_out_rules_7_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn6,      {outputPin[6] && bitwise6}
    field = "",   secondCompType6,    {outputPin[6] && bitwise6}
    field = "",   secondTarget[6],    {outputPin[6] && bitwise6}
  ;Rule 8
  dialog = prgm_out_rules_8_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn7,       {outputPin[7]}
    field = "",   firstCompType7,     {outputPin[7]}
    field = "",   firstTarget[7],     {outputPin[7]}
  dialog = prgm_out_rules_8_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn7,      {outputPin[7] && bitwise7}
    field = "",   secondCompType7,    {outputPin[7] && bitwise7}
    field = "",   secondTarget[7],    {outputPin[7] && bitwise7}

  dialog = prgm_out_rules_1_output_limit_1, "", xAxis
    field = "",   kindOfLimiting0,                {outputPin[0]}
    field = "Temps d'activation",  outputTimeLimit[0],   {outputPin[0]}

  dialog = prgm_out_rules_2_output_limit_1, "", xAxis
    field = "",   kindOfLimiting1,                {outputPin[1]}
    field = "Temps d'activation",  outputTimeLimit[1],   {outputPin[1]}

  dialog = prgm_out_rules_3_output_limit_1, "", xAxis
    field = "",   kindOfLimiting2,                {outputPin[2]}
    field = "Temps d'activation",  outputTimeLimit[2],   {outputPin[2]}

  dialog = prgm_out_rules_4_output_limit_1, "", xAxis
    field = "",   kindOfLimiting3,                {outputPin[3]}
    field = "Temps d'activation",  outputTimeLimit[3],   {outputPin[3]}

  dialog = prgm_out_rules_5_output_limit_1, "", xAxis
    field = "",   kindOfLimiting4,                {outputPin[4]}
    field = "Temps d'activation",  outputTimeLimit[4],   {outputPin[4]}

  dialog = prgm_out_rules_6_output_limit_1, "", xAxis
    field = "",   kindOfLimiting5,                {outputPin[5]}
    field = "Temps d'activation",  outputTimeLimit[5],   {outputPin[5]}

  dialog = prgm_out_rules_7_output_limit_1, "", xAxis
    field = "",   kindOfLimiting6,                {outputPin[6]}
    field = "Temps d'activation",  outputTimeLimit[6],   {outputPin[6]}

  dialog = prgm_out_rules_8_output_limit_1, "", xAxis
    field = "",   kindOfLimiting7,                {outputPin[7]}
    field = "Temps d'activation",  outputTimeLimit[7],   {outputPin[7]}

  dialog = prgm_out_rules_1_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_1_output_limit_1

  dialog = prgm_out_rules_2_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_2_output_limit_1

  dialog = prgm_out_rules_3_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_3_output_limit_1

  dialog = prgm_out_rules_4_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_4_output_limit_1

  dialog = prgm_out_rules_5_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_5_output_limit_1

  dialog = prgm_out_rules_6_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_6_output_limit_1

  dialog = prgm_out_rules_7_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_7_output_limit_1

  dialog = prgm_out_rules_8_output_limit, "Limit time active", yAxis
    field = "#Mettre 0.0 pour desactive la limite"
    panel = prgm_out_rules_8_output_limit_1

  dialog = prgm_out_rules_1, "Rule 1", yAxis
    field = "Numero de la Sortie", outputPin0
    field = "Nom de la Sortie",           prgm_out00Alias,    {outputPin[0]}
    field = "Polarite de la sortie",      outputInverted0,    {outputPin[0]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[0],     {outputPin[0]}
    field = "2eme Condition",        bitwise0,           {outputPin[0]}
    panel = prgm_out_rules_1_condition_1
    panel = prgm_out_rules_1_condition_2
    panel = prgm_out_rules_1_output_limit

  dialog = prgm_out_rules_2, "Rule 2", yAxis
    field = "Numero de la Sortie", outputPin1
    field = "Nom de la Sortie",           prgm_out01Alias,    {outputPin[1]}
    field = "Polarite de la sortie",      outputInverted1,    {outputPin[1]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[1],     {outputPin[1]}
    field = "2eme Condition",        bitwise1,           {outputPin[1]}
    panel = prgm_out_rules_2_condition_1
    panel = prgm_out_rules_2_condition_2
    panel = prgm_out_rules_2_output_limit

  dialog = prgm_out_rules_3, "Rule 3", yAxis
    field = "Numero de la Sortie", outputPin2
    field = "Nom de la Sortie",           prgm_out02Alias,    {outputPin[2]}
    field = "Polarite de la sortie",      outputInverted2,    {outputPin[2]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[2],     {outputPin[2]}
    field = "2eme Condition",        bitwise2,           {outputPin[2]}
    panel = prgm_out_rules_3_condition_1
    panel = prgm_out_rules_3_condition_2
    panel = prgm_out_rules_3_output_limit

  dialog = prgm_out_rules_4, "Rule 4", yAxis
    field = "Numero de la Sortie", outputPin3
    field = "Nom de la Sortie",           prgm_out03Alias,    {outputPin[3]}
    field = "Polarite de la sortie",      outputInverted3,    {outputPin[3]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[3],     {outputPin[3]}
    field = "2eme Condition",        bitwise3,           {outputPin[3]}
    panel = prgm_out_rules_4_condition_1
    panel = prgm_out_rules_4_condition_2
    panel = prgm_out_rules_4_output_limit

  dialog = prgm_out_rules_5, "Rule 5", yAxis
    field = "Numero de la Sortie", outputPin4
    field = "Nom de la Sortie",           prgm_out04Alias,    {outputPin[4]}
    field = "Polarite de la sortie",      outputInverted4,    {outputPin[4]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[4],     {outputPin[4]}
    field = "2eme Condition",        bitwise4,           {outputPin[4]}
    panel = prgm_out_rules_5_condition_1
    panel = prgm_out_rules_5_condition_2
    panel = prgm_out_rules_5_output_limit

  dialog = prgm_out_rules_6, "Rule 6", yAxis
    field = "Numero de la Sortie", outputPin5
    field = "Nom de la Sortie",           prgm_out05Alias,    {outputPin[5]}
    field = "Polarite de la sortie",      outputInverted5,    {outputPin[5]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[5],     {outputPin[5]}
    field = "2eme Condition",        bitwise5,           {outputPin[5]}
    panel = prgm_out_rules_6_condition_1
    panel = prgm_out_rules_6_condition_2
    panel = prgm_out_rules_6_output_limit

  dialog = prgm_out_rules_7, "Rule 7", yAxis
    field = "Numero de la Sortie", outputPin6
    field = "Nom de la Sortie",           prgm_out06Alias,    {outputPin[6]}
    field = "Polarite de la sortie",      outputInverted6,    {outputPin[6]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[6],     {outputPin[6]}
    field = "2eme Condition",        bitwise6,           {outputPin[6]}
    panel = prgm_out_rules_7_condition_1
    panel = prgm_out_rules_7_condition_2
    panel = prgm_out_rules_7_output_limit

  dialog = prgm_out_rules_8, "Rule 8", yAxis
    field = "Numero de la Sortie", outputPin7
    field = "Nom de la Sortie",           prgm_out07Alias,    {outputPin[7]}
    field = "Polarite de la sortie",      outputInverted7,    {outputPin[7]}
    field = "#Mettre 0.0 pour desactiver le delais"
    field = "Activation Delais ",     outputDelay[7],     {outputPin[7]}
    field = "2eme Condition",        bitwise7,           {outputPin[7]}
    panel = prgm_out_rules_8_condition_1
    panel = prgm_out_rules_8_condition_2 
    panel = prgm_out_rules_8_output_limit

  dialog = prgm_out_rules_master, "", card
    panel = prgm_out_rules_1, Center,   { prgm_out_selection == 0 }
    panel = prgm_out_rules_2, Center,   { prgm_out_selection == 1 }
    panel = prgm_out_rules_3, Center,   { prgm_out_selection == 2 }
    panel = prgm_out_rules_4, Center,   { prgm_out_selection == 3 }
    panel = prgm_out_rules_5, Center,   { prgm_out_selection == 4 }
    panel = prgm_out_rules_6, Center,   { prgm_out_selection == 5 }
    panel = prgm_out_rules_7, Center,   { prgm_out_selection == 6 }
    panel = prgm_out_rules_8, Center,   { prgm_out_selection == 7 }
  
  dialog = prgm_out_config, "",yAxis
    ;panel = prgm_out_unique
    field = "Selection de la sortie programmable numero ",  prgm_out_selection
    panel = prgm_out_rules_master

  dialog = rtc_setup, "Horloge en Temps reel "
       field = "Mode de l'horloge ", rtc_mode
       field = "Reglage de l'horloge +/- ", rtc_trim, {rtc_mode}

;    dialog = rtc_settings, "Real Time Clock"
;        panel = rtc_setup
;        panel = std_ms3Rtc

  dialog = onboard_log_basic_setup, "Basique"  
    field = "Logger type", onboard_log_file_style  
    ;field = "CSV separateur", onboard_log_csv_separator      {onboard_log_file_style == 1}
    field = "Log Vitesse", onboard_log_file_rate               {onboard_log_file_style}
    ;field = "Nom du dossier", onboard_log_filenaming              {onboard_log_file_style}
    ; field = "Memoire", onboard_log_storage                  {onboard_log_file_style}

  dialog = onboard_log_trigger_boot, "A la mise sous tension"
    field = "Demarrage", onboard_log_trigger_boot                {onboard_log_file_style}

  dialog = onboard_log_trigger_RPM, "RPM"
     field = "RPM", onboard_log_trigger_RPM                  {onboard_log_file_style && !onboard_log_trigger_boot}

;   dialog = onboard_log_trigger_prot, "Engine protection"
;     field = "Engine protection", onboard_log_trigger_prot   {onboard_log_file_style&& !onboard_log_trigger_boot}
;     field = "RPM", onboard_log_tr3_thr_RPM                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "MAP", onboard_log_tr3_thr_MAP                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "Oil", onboard_log_tr3_thr_Oil                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "AFR", onboard_log_tr3_thr_AFR                  {onboard_log_file_style && onboard_log_trigger_prot}   

;   dialog = onboard_log_trigger_Vbat, "Battery voltage"
;     field = "Battery voltage", onboard_log_trigger_Vbat     {onboard_log_file_style&& !onboard_log_trigger_boot}
;     field = "ON threshold", onboard_log_tr4_thr_on          {onboard_log_file_style && onboard_log_trigger_Vbat}
;     field = "OFF threshold", onboard_log_tr4_thr_off        {onboard_log_file_style && onboard_log_trigger_Vbat}

;   dialog = onboard_log_trigger_Epin, "Board pin"
;     field = "Board pin", onboard_log_trigger_Epin           {onboard_log_file_style&& !onboard_log_trigger_boot}
;     field = "Pin number", onboard_log_tr5_thr_on            {onboard_log_file_style && onboard_log_trigger_Epin}

  dialog = rtc_settings, "Horloge en Temps reel "
      field = "Mode", rtc_mode
      panel = std_ms3Rtc {rtc_mode}

  dialog = onboard_log_trigger, "Conditions"
      field = "A la mise sous tension ",                onboard_log_trigger_boot
      field = "A la mise sous tension pendant ",   onboard_log_tr1_duration,   {onboard_log_file_style && onboard_log_trigger_boot}	  
      field = "Au dessus RPM",              onboard_log_trigger_RPM
	  field = "ON Min ", onboard_log_tr2_thr_on          {onboard_log_file_style && onboard_log_trigger_RPM}
      field = "OFF Max ", onboard_log_tr2_thr_off        {onboard_log_file_style && onboard_log_trigger_RPM}
     ; field = "Avec Protection Active", onboard_log_trigger_prot
     ; field = "Avec tension Batterie",           onboard_log_trigger_Vbat

  dialog = onboard_log_setup, "loggeur SD", border
      panel = onboard_log_basic_setup, North 
      panel = onboard_log_trigger, South 

  dialog = engine_constants, "", border
      panel = engine_constants_warning, North
      panel = engine_constants_west, West
      panel = engine_constants_east, East

;   dialog = sdcard_datalog, "SD Card Datalogging", yAxis
;     panel = sdcard_top
;     panel = dataLogFieldSelector



;-------------------------------------------------------------------------------
; General help text

       help = helpGeneral, "matzs aide en ligne"
        webHelp = "https://wiki.matzs.com/"
        text = "Pour la documentation WIKI actuelle, cliquez sur le bouton Aide Web,"
        text = "ou visite http://www.megasquirt.kingeshop.com/."

;------------------------------------------------------------------------------
[ControllerCommands]
; commandName    = command1, command2, commandn...
; command in standard ini format, a command name can be assigned to 1 to n commands that will be executed in order.
;         This does not include any resultant protocol envelope data, only the response data itself.

; WARNING!! These commands bypass TunerStudio's normal memory synchronization. If these commands
; alter mapped settings (Constant) memory in the controller, TunerStudio will have an out of sync condition
; and may create error messages.
; It is expected that these commands would not typically alter any ram mapped to a Constant.

cmdStopTestMode =   "E\x01\x00"
cmdEnableTestMode = "E\x01\x01"

cmdtestinj1on =     "E\x02\x01"
cmdtestinj1off =    "E\x02\x02"
cmdtestinj150dc =   "E\x02\x03"
cmdtestinj2on =     "E\x02\x04"
cmdtestinj2off =    "E\x02\x05"
cmdtestinj250dc =   "E\x02\x06"
cmdtestinj3on =     "E\x02\x07"
cmdtestinj3off =    "E\x02\x08"
cmdtestinj350dc =   "E\x02\x09"
cmdtestinj4on =     "E\x02\x0A"
cmdtestinj4off =    "E\x02\x0B"
cmdtestinj450dc =   "E\x02\x0C"
cmdtestinj5on =     "E\x02\x0D"
cmdtestinj5off =    "E\x02\x0E"
cmdtestinj550dc =   "E\x02\x0F"
cmdtestinj6on =     "E\x02\x10"
cmdtestinj6off =    "E\x02\x11"
cmdtestinj650dc =   "E\x02\x12"
cmdtestinj7on =     "E\x02\x13"
cmdtestinj7off =    "E\x02\x14"
cmdtestinj750dc =   "E\x02\x15"
cmdtestinj8on =     "E\x02\x16"
cmdtestinj8off =    "E\x02\x17"
cmdtestinj850dc =   "E\x02\x18"

cmdtestspk1on =     "E\x03\x01"
cmdtestspk1off =    "E\x03\x02"
cmdtestspk150dc =   "E\x03\x03"
cmdtestspk2on =     "E\x03\x04"
cmdtestspk2off =    "E\x03\x05"
cmdtestspk250dc =   "E\x03\x06"
cmdtestspk3on =     "E\x03\x07"
cmdtestspk3off =    "E\x03\x08"
cmdtestspk350dc =   "E\x03\x09"
cmdtestspk4on =     "E\x03\x0A"
cmdtestspk4off =    "E\x03\x0B"
cmdtestspk450dc =   "E\x03\x0C"
cmdtestspk5on =     "E\x03\x0D"
cmdtestspk5off =    "E\x03\x0E"
cmdtestspk550dc =   "E\x03\x0F"
cmdtestspk6on =     "E\x03\x10"
cmdtestspk6off =    "E\x03\x11"
cmdtestspk650dc =   "E\x03\x12"
cmdtestspk7on =     "E\x03\x13"
cmdtestspk7off =    "E\x03\x14"
cmdtestspk750dc =   "E\x03\x15"
cmdtestspk8on =     "E\x03\x16"
cmdtestspk8off =    "E\x03\x17"
cmdtestspk850dc =   "E\x03\x18"

cmdstm32reboot =    "E\x32\x00"
cmdstm32bootloader ="E\x32\x01"

cmdFormatSD =       "E\x33\x01"

cmdVSS60kmh =       "E\x99\x00"
cmdVSSratio1 =      "E\x99\x01"
cmdVSSratio2 =      "E\x99\x02"
cmdVSSratio3 =      "E\x99\x03"
cmdVSSratio4 =      "E\x99\x04"
cmdVSSratio5 =      "E\x99\x05"
cmdVSSratio6 =      "E\x99\x06"

[CurveEditor]

;tps-based accel enrichment
      curve = time_accel_tpsdot_curve, "TPS base AE"
            columnLabel = "TPSdot", "Ajout"
            xAxis = 0, 1200, 6
            yAxis = 0, 250, 4
            xBins = taeBins, TPSdot
            yBins = taeRates

;map-based accel enrichment
      curve = time_accel_mapdot_curve, "MAP base AE"
            columnLabel = "MAPdot", "Ajout"
            xAxis = 0, 1200, 6
            yAxis = 0, 250, 4
            xBins = maeBins, MAPdot
            yBins = maeRates

; Correction curve for dwell vs battery voltage
        curve = dwell_correction_curve, "Correction Dwell "
            columnLabel = "Tension batterie", "Dwell"
            xAxis = 6, 22, 6
            yAxis = 0, 255, 6
            xBins = brvBins, batteryVoltage
            yBins = dwellRates

; Correction curve for injectors vs battery voltage
        curve = injector_voltage_curve, "Correction Injecteurs"
            columnLabel = "Tension", "Injecteur"
            xAxis = 6, 22, 6
            yAxis = 0, 255, 6
            xBins = brvBins, batteryVoltage
            yBins = injBatRates

; Correction curve for IAC vs battery voltage
        curve = iac_voltage_curve, "IAC PWM Voltage Correction"
            columnLabel = "Voltage", "Added %"
            xAxis = 8, 18, 5
            yAxis = -50, 50, 5
            xBins = iacBrvBins, batteryVoltage
            yBins = iacBatRates


; Curve for injector timign vs RPM
        curve = injector_timing_curve, "Avance Injection"
            columnLabel = "RPM", "Injecteur"
            xAxis = 0, 7000, 6
            yAxis = 0, 720, 5
            xBins = injAngRPM, rpm
            yBins = injAng

; Correction curve for Air Density vs temperature
        curve = airdensity_curve, "Correction Densite AIR"
            columnLabel = "Temperature AIR", "Carburant"
            xAxis = -40, 90, 6
            yAxis = 80, 160, 6
            xBins = airDenBins, iat
            yBins = airDenRates

; Correction curve for Barometric pressure fuel adjustment
        curve = baroFuel_curve, "Correction Baro/MAF"
            columnLabel = "Baro/MAF", "Carburant"
            xAxis = 5, 250, 6
            yAxis = 5, 250, 6
            xBins = baroFuelBins, baro
            yBins = baroFuelValues

; Correction curve for fuel temperature fuel adjustment
        curve = fuelTemp_curve, "Correction temperature carburant"
            columnLabel = "Temperature", "Carburant"
            xAxis = -40, 125, 6
            yAxis = 0, 255, 6
            xBins = fuelTempBins, fuelTemp
            yBins = fuelTempValues

; IAT based ignition timing retard
        curve = iat_retard_curve, "Retard allumage temp. AIR"
            columnLabel =   "Temp. AIR", "Retard"
            #if CELSIUS
            xAxis = 0, 125, 5
            #else
            xAxis = 32, 257, 5
            #endif
            yAxis = 0, 30, 5
            xBins = iatRetBins, iat
            yBins = iatRetRates

; CLT based ignition timing retard
        curve = clt_advance_curve, "Ajout d'Avance a froid"
            columnLabel =   "Temp. Eau", "Avance"
            xAxis = -40, 125, 5
            yAxis = -12.7, 12.7, 5
            xBins = cltAdvBins, coolant
            yBins = cltAdvValues

; Idle RPM target based ignition timing
        curve = idle_advance_curve, "Advance au ralenti"
            columnLabel =   "Ecart RPM", "Avance"
            xAxis       = -500, 500, 5
            yAxis       =  -15,  50, 5
            xBins       = idleAdvBins, CLIdleDelta
            yBins       = idleAdvValues
            size        = 450, 200
			
; PWM Fan duty curve based on temp input
        curve = pwm_fan_curve, "PWM Duty"
            columnLabel =   "Temp", "Duty %"
            xAxis = -40, 215, 5
            yAxis = 0, 100, 5
            xBins = fanPWMBins, coolant
            yBins = PWMFanDuty
            gauge = cltGauge
            size  = 400, 400
			
; PWM HALDEX duty curve based on VSS input
        curve = HALDEX_curve, "couple HALDEX"
            columnLabel =   "VSS", "Haldex"
            xAxis = 0, 100, 5
            yAxis = 0, 255, 5
            xBins = VSSBins, vss
            yBins = HALDEXDuty
            gauge = vssGauge
            size  = 400, 400			

; Curves for idle control
        ; Standard duty table for PWM valves
        curve = iacPwm_curve, "PWM Vanne de ralenti"
            columnLabel = "Temperature EAU", "Valeur Duty"
        #if CELSIUS
            xAxis = -40, 215, 6
        #else
            xAxis = -40, 315, 6
        #endif
            yAxis = 0, 100, 4
            xBins = iacBins, coolant
            yBins = iacOLPWMVal

        ; Cranking duty table for PWM valves
        curve = iacPwmCrank_curve, "PWM Vanne sur demarreur"
            columnLabel = "Temperature EAU", "Valeur Duty"
            xAxis = -40, 215, 6
            yAxis = 0, 100, 4
            xBins = iacCrankBins, coolant
            yBins = iacCrankDuty

        curve = iacStep_curve, "IAC Moteur pas a pas"
            columnLabel = "Temperature EAU", "Pas Moteur"
        #if CELSIUS
            xAxis = -40, 215, 6
        #else
            xAxis = -40, 315, 6
        #endif
            yAxis = 0, 850, 4
            xBins = iacBins, coolant
            yBins = iacOLStepVal

        curve = iacStepCrank_curve, "IAC Moteur sur demarreur"
            columnLabel = "Temperature EAU", "Pas Moteur"
            xAxis = -40, 120, 6
            yAxis = 0, 850, 4
            xBins = iacCrankBins, coolant
            yBins = iacCrankSteps

        curve = iacClosedLoop_curve, "Cible regime de ralenti"
            columnLabel = "Temperature EAU", "Regime Moteur"
            xAxis = -40, 120, 6
            yAxis = 0, 2000, 4
            xBins = iacBins, coolant
            yBins = iacCLValues
            size  = 450, 200

        curve = rotaryTrailing_curve, "Diviseur moteur Rotatif"
            columnLabel = "Charge Moteur", "Diviseur"
            yAxis = 0, 40, 4
            xBins = rotarySplitBins, ignLoad
            xAxis = 0, { ignLoadMax }, 5
            yBins = rotarySplitValues

; Warmup enrichment curve
        curve = warmup_curve, "Enrichissement pendant la chauffe Moteur (WUE)"
            columnLabel = "Temp. EAU", "WUE %"
            xAxis       = -40, 125, 9
            yAxis       =   0,  240, 6
            xBins       = wueBins, coolant
            yBins       = wueRates
            gauge       = cltGauge

; Cranking enrichment curve
        curve = cranking_enrich_curve, "Enrichissement sur demarreur"
          columnLabel = "Temp. EAU", "Modification du temps d'injection"
          xAxis       = -40, 110, 9
          yAxis       =   0,  400, 6
          xBins       = crankingEnrichBins, coolant
          yBins       = crankingEnrichValues
          ;gauge       = cltGau25

; Priming Pulsewidth curve
        curve = priming_pw_curve, "Premiere impulsion de mouillage"
          columnLabel = "Temp. EAU", "PW"
          xAxis       = -40, 110, 4
          yAxis       =   0,  10, 4
          xBins       = primeBins, coolant
          yBins       = primePulse
          gauge       = cltGauge

; Afterstart Enrichment curve
        curve = afterstart_enrichment_curve, "ASE - Enrichissement %"
          columnLabel = "Temp. EAU", "Ajout"
          xAxis       = -40, 110, 4
          yAxis       =   0,  200, 4
          xBins       = aseBins, coolant
          yBins       = asePct
          gauge       = cltGauge

; Afterstart Enrichment time
        curve = afterstart_enrichment_time, "ASE - Duree"
          columnLabel = "Temp. EAU", "Temps"
          xAxis       = -40, 110, 4
          yAxis       =   0,  20, 4
          xBins       = aseBins, coolant
          yBins       = aseCount
          gauge       = cltGauge

; Flex fuel correction curves
        curve = flex_fuel_curve, "Ajustement injection Flex Fuel"
          columnLabel    = "Ethanol", "Carburant"
          xAxis          = 0, 100, 10
          yAxis          = 50, 250, 5
          xBins          = flexFuelBins, flex
          yBins          = flexFuelAdj
          size           = 400, 200

        curve = flex_adv_curve, "Ajustement allumage Flex Fuel"
          columnLabel     = "Ethanol", "Avance"
          xAxis           = 0, 100, 10
          yAxis           = 0, 50, 5
          xBins           = flexAdvBins, flex
          yBins           = flexAdvAdj
          size            = 400, 200

        curve = flex_boost_curve, "Ajustement Turbo Flex Fuel"
          columnLabel     = "Ethanol", "Boost"
          xAxis           = 0, 100, 10
          yAxis           = -100, 200, 5
          xBins           = flexBoostBins, flex
          yBins           = flexBoostAdj
          size            = 400, 200

;Knock sensor windows
        curve = knock_window_angle_curve, "Fenetre de cliquetis"
          columnLabel     = "RPM", "Depart"
          xAxis           = 0, 8000, 9
          yAxis           = -100, 100, 11
          xBins           = knock_window_rpms, rpm
          yBins           = knock_window_angle
          size            = 400, 200

        curve = knock_window_duration_curve, "Duree de l'ecoute"
          columnLabel     = "RPM", "Duree"
          xAxis           = 0, 8000, 9
          yAxis           = 0, 100, 10
          xBins           = knock_window_rpms, rpm
          yBins           = knock_window_dur
          size            = 400, 200

; Oil Pressure protection curve
        curve = oil_pressure_prot_curve, "Protection Pression huile"
          columnLabel     = "RPM", "Minimum PSI"
          xAxis           = 0, 8000, 9
          yAxis           = 0, 150, 3
          xBins           = oilPressureProtRPM, rpm
          yBins           = oilPressureProtMins
          size            = 400, 200
		  
; Coolant protection curve
        curve = coolant_prot_curve, "Protection Temperature eau"
          columnLabel     = "Temp eau", "Limit" 
          #if CELSIUS
            xAxis = -40, 140, 5
        #else
            xAxis = -40, 315, 5
        #endif
          yAxis           = 0, 8000, 3
          xBins           = coolantProtTemp, coolant
          yBins           = coolantProtRPM
          size            = 200, 200

; EGT protection curve
        curve = EGT_prot_curve, "Protection Temperature EGT"
          columnLabel     = "Temp EGT", "RPM" 
          #if CELSIUS
            xAxis = 700, 1000, 5
        #else
            xAxis = 1000, 1400, 5
        #endif
          yAxis           = 0, 8000, 3
          xBins           = EGTProtTemp, EGT
          yBins           = EGTProtRPM
          size            = 200, 200
		  
; Warmup enrichment VEAL AFR adjustment curves
        curve = warmup_afr_curve, "Adjustment AFR en Starter"
          columnLabel     = "Temp. EAU", "Offset"
          xAxis           =  -40,   125, 9
#if LAMBDA
          yAxis           = -0.3, 0.1, 5
#else
          yAxis           =  -4,   1, 5
#endif
          xBins           = wueBins, coolant
          yBins           = wueAFR

        curve = warmup_analyzer_curve, "Starter moteur pendant la chauffe"
          columnLabel     = "Temp. EAU", "Valeurs courrante WUE", "Temp. EAU", "Valeurs recommandees WUE"
          xAxis           = -40, 125, 9
          yAxis           = 100, 255, 6
          xBins           = wueBins, coolant
          yBins           = wueRates
          yBins           = wueRecommended
          lineLabel       = "Current WUE"
          lineLabel       = "Recommended WUE"


        curve = wmi_adv_curve, "WMI Correction Avance"
          columnLabel     = "kPa", "Avance"
          xAxis           = 0, 511, 20
          yAxis           = 0, 50, 5
          xBins           = wmiAdvBins, map
          yBins           = wmiAdvAdj
          size            = 400, 200


[TableEditor]
   ;       table_id,    map3d_id,    "title",      page
   table = veTableTbl1,  veTable1Map,  "Table 1 Injection",   2
   ;       constant, variable
      xBins       = rpmBins,  rpm
      yBins       = fuelLoadBins, fuelLoad
      xyLabels    = "RPM", "Charge de carburant: "
      zBins       = veTable

      gridHeight  = 2.0
      gridOrient  = 250,   0, 340
      upDownLabel = "(RICHE)", "(PAUVRE)"

    table = veTable2Tbl,  fuel2Map,  "Table 2 Injection",   11
        xBins       = fuelRPM2Bins,  rpm
        yBins       = fuelLoad2Bins, fuelLoad2
        xyLabels    = "RPM", "Charge de carburant: "
        zBins       = veTable2

        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

   table = sparkTbl,    sparkMap,    "Table 1 Allumage", 3
      xBins = rpmBins2, rpm
      ;yBins = ignLoadBins, ignLoad
      yBins = mapBins1, ignLoad
      xyLabels    = "RPM", "Charge allumage: "
      zBins = advTable1
      gridHeight  = 3.0
      upDownLabel = "AVANCE", "RETARD"

    table = spark2Tbl,    spark2Map,    "Table 2 Allumage", 14
      xBins = rpmBins3, rpm
      ;yBins = ignLoadBins, ignLoad
      yBins = mapBins2, ignLoad2
      xyLabels    = "RPM", "Charge allumage: "
      zBins = advTable2
      gridHeight  = 3.0
      upDownLabel = "AVANCE", "RETARD"
	  

    ;table = afrTbl,    afrTableMap,    "AFR Table", 5
    table = afrTable1Tbl, afrTable1Map, "Table AFR", 5
      xBins = rpmBinsAFR, rpm
      yBins = loadBinsAFR, fuelLoad
      zBins = afrTable
      gridHeight  = 1.0
      upDownLabel = "RICHE", "PAUVRE"
      gridOrient  = 250,   0, 340

      ;#if BOOSTPSI
      ;table = boostTbl,    boostMap,    "Boost targets (PSI)", 8
      ;#else
      ;table = boostTbl,    boostMap,    "Boost targets (Absolute kPa)", 8
      ;#endif
    table = boostTbl,    boostMap,  "Boost Duty / Cible", 7
      xBins = rpmBinsBoost, rpm
      yBins = tpsBinsBoost, throttle
      zBins = boostTable
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"

    table = vvtTbl,    vvtMap,    "Table VVT1 ", 7
      xBins = rpmBinsVVT, rpm
      ;yBins = tpsBinsVVT, throttle
      yBins = loadBinsVVT, vvtLoad
      zBins = vvtTable
      xyLabels    = "RPM", "VVT1 Load: "
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"

    table = vvt2Tbl,    vvt2Map,    "Table VVT2 ", 12
      xBins = rpmBinsVVT2, rpm
      ;yBins = tpsBinsVVT, throttle
      yBins = loadBinsVVT2, vvtLoad
      zBins = vvt2Table
      xyLabels    = "RPM", "VVT2 Load: "
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"

    table = wmiTbl,  wmiMapMap,    "Table WMI ", 12
      xBins = rpmBinsWMI, rpm
      yBins = mapBinsWMI, map
      zBins = wmiTable
      xyLabels    = "RPM", "WMI Load: "
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"

    table = stagingTbl,    stagingMap,    "Table injection etagee", 7
      xBins = rpmBinsStaging, rpm
      yBins = loadBinsStaging, fuelLoad
      zBins = stagingTable
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"


;--------- Sequential fuel trim maps -----------
    table = fuelTrimTable1Tbl,  fuelTrimTable1Map,  "Table Correction inj. 1",   8
        xBins       = fuelTrim1rpmBins,  rpm
        yBins       = fuelTrim1loadBins,  fuelLoad
        zBins       = fuelTrim1Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable2Tbl,  fuelTrimTable2Map,  "Table Correction inj. 2",   8
        xBins       = fuelTrim2rpmBins,  rpm
        yBins       = fuelTrim2loadBins,  fuelLoad
        zBins       = fuelTrim2Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable3Tbl,  fuelTrimTable3Map,  "Table Correction inj. 3",   8
        xBins       = fuelTrim3rpmBins,  rpm
        yBins       = fuelTrim3loadBins,  fuelLoad
        zBins       = fuelTrim3Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable4Tbl,  fuelTrimTable4Map,  "Table Correction inj. 4",   8
        xBins       = fuelTrim4rpmBins,  rpm
        yBins       = fuelTrim4loadBins,  fuelLoad
        zBins       = fuelTrim4Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable5Tbl,  fuelTrimTable5Map,  "Table Correction inj. 5",   8
        xBins       = fuelTrim5rpmBins,  rpm
        yBins       = fuelTrim5loadBins,  fuelLoad
        zBins       = fuelTrim5Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable6Tbl,  fuelTrimTable6Map,  "Table Correction inj. 6",   8
        xBins       = fuelTrim6rpmBins,  rpm
        yBins       = fuelTrim6loadBins,  fuelLoad
        zBins       = fuelTrim6Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable7Tbl,  fuelTrimTable7Map,  "Table Correction inj. 7",   8
        xBins       = fuelTrim7rpmBins,  rpm
        yBins       = fuelTrim7loadBins,  fuelLoad
        zBins       = fuelTrim7Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = fuelTrimTable8Tbl,  fuelTrimTable8Map,  "Table Correction inj. 8",   8
        xBins       = fuelTrim8rpmBins,  rpm
        yBins       = fuelTrim8loadBins,  fuelLoad
        zBins       = fuelTrim8Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHE)", "(PAUVRE)"

    table = dwell_map, dwell_tblMap, "Dwell map", 12
      xBins = rpmBinsDwell, rpm
      yBins = loadBinsDwell, ignLoad
      zBins = dwellTable
      xyLabels    = "RPM", "Load: "
      gridHeight  = 3.0
      upDownLabel = "PLUS", "MOINS"


;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

    gaugeCategory = "Main"
    ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
    accelEnrichGauge  = accelEnrich,   "Accel Enrich",       "%",      50,   150,     -1,    -1,  999,  999, 0, 0
    injOpenGauge      = inj_open,      "Temps mort injecteur", "mSec",  0.0,   3.0,    0.0,   0.0,  3.0,  3.0, 3, 3
    dutyCycleGauge    = dutyCycle,     "Duty Cycle",         "%",       0,   100,     -1,    -1,   70,   80, 1, 1
    dutyCycle2Gauge   = dutyCycle2,    "Duty Cycle 2",      "%",       0,   100,     -1,    -1,   70,   80, 1, 1	
    stgDutyCycleGauge = stgDutyCycle,  "Duty Cycle injection etagee", "%",       0,   100,     -1,    -1,   70,   80, 1, 1
    egoCorrGauge      = egoCorrection, "Correction Lambda",     "%",      50,   150,     90,    99,  101,  110, 0, 0

    gammaEnrichGauge  = gammaEnrich,   "Gamma Enrichissement",   "%",      50,   250,     -1,    -1,  151,  151, 0, 0
    pulseWidthGauge   = pulseWidth,    "Largeur d'impulsion 1",        "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge2  = pulseWidth2,   "Largeur d'impulsion 2",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge3  = pulseWidth3,   "Largeur d'impulsion 3",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge4  = pulseWidth4,   "Largeur d'impulsion 4",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    tachometer        = rpm,           "Regime Moteur",       "RPM",     0,  {rpmhigh},    300,   600, {rpmwarn}, {rpmdang}, 0, 0
    veGauge           = veCurr,        "Valeur courrante Injection VE",         "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    ve1Gauge          = VE1,           "VE1 (Table 1 injection)", "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    ve2Gauge          = VE2,           "VE2 (Table 2 injection)", "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    warmupEnrichGauge = warmupEnrich,  "Enrichissement Starter",  "%",     100,   200,    130,   140,  140,  150, 0, 0
    aseEnrichGauge    = ase_enrich,    "Enrichissement apres demarrage","%",     0,   200,    130,   140,  140,  150, 0, 0
    batCorrectGauge   = bat_correction,"Correction tension", "%",       0,   200,    130,   140,  140,  150, 0, 0
    iatCorrectGauge   = airCorrection, "Correction AIR",     "%",       0,   200,    130,   140,  140,  150, 0, 0
    baroCorrectGauge  = baroCorrection,"Correction Baro/MAF",    "%",       0,   200,    130,   140,  140,  150, 0, 0
    flexEnrich        = flexFuelCor,   "Flex Correction",    "%",       0,   200,    130,   140,  140,  150, 0, 0
    fuelTempCorGauge  = fuelTempCor,   "Correction temp. Carburant", "%",     0,   200,    130,   140,  140,  150, 0, 0
    advanceGauge      = advance,       "Avance allumage reel",     "deg",    50, -10,      0,     0,    35,   45, 0, 0
    advance1Gauge     = advance1,      "Avance1 (Table 1 allumage)",  "deg",50, -10,      0,     0,    35,   45, 0, 0
    advance2Gauge     = advance2,      "Avance2 (Table 2 allumage)",  "deg",50, -10,      0,     0,    35,   45, 0, 0
    dwellGauge        = dwell,         "Dwell",          "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    boostTargetGauge  = boostTarget,   "Cible Boost",       "kPa",     0,   {maphigh},      0,    20,  {mapwarn},  {mapdang}, 0, 0
    boostDutyGauge    = boostDuty,     "Boost Duty Cycle",   "%",       0,   100,     -1,    -1,  101,  110, 1, 1
    afrTargetGauge    = afrTarget,     "Cible AFR",         "",        7,    25,     12,    13,   15,   16, 2, 2
    lambdaTargetGauge = lambdaTarget,  "Cible Lambda",      "",        0.5, 1.5,   0.82,  0.89, 1.02, 1.09, 3, 3
    IdleTargetGauge   = CLIdleTarget,  "Cible vanne de ralentie RPM",    "RPM",     0,  2000,    300,   600, 1500, 1700, 0, 0
	idleLoadGauge     = idleLoad,      "Ouverture vanne Ralentie",          { bitStringValue( idleUnits , iacAlgorithm  ) }, 0,   {(iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7) ? 100: iacStepHome},      0,    0,  2000,  2000, 0, 0
    FANdutyCycleGauge = fanDuty,       "FAN Duty Cycle",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1	
    TempEaudutyCycleGauge = fanDuty,   "Temp EAU Simulation",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1		
    vvt1DutyCycleGauge= vvt1Duty,      "VVT1 Duty Cycle",     "%",       0,  100,     -1,    -1,   101, 110, 1, 1
    vvt1TargetGauge   = vvt1Target,    "VVT1 Cible Angle",   "deg",     0,  100,     15,    25,    65,  75, 1, 1
    vvt1AngleGauge    = vvt1Angle,     "VVT1 Angle",          "deg",   -20,  100,      0,    -5,    70,  90, 1, 1
    vvt2DutyCycleGauge= vvt2Duty,      "VVT2 Duty Cycle",    "%",       0,  100,     -1,    -1,   101, 110, 1, 1
    vvt2TargetGauge   = vvt2Target,    "VVT2 Cible Angle",  "deg",     0,  100,     15,    25,    65,  75, 1, 1
    vvt2AngleGauge    = vvt2Angle,     "VVT2 Angle",         "deg",   -20,  100,      0,    -5,    70,  90, 1, 1
    HALDEXGauge       = phaldexDuty,    "Haldex",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1	
    WMIdutyCycleGauge = wmiPW,         "WMI Duty Cycle",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1
  
    gaugeCategory = "Sensor inputs"
    mapGauge          = map,           "Pression MAP",              "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    mapGauge_psi      = map_psi,       "Pression MAP (PSI)",        "PSI",          -15,    100,    0,      20,  200,  245, 0, 0
    mapGauge_bar      = map_bar,       "Pression MAP (BAR)",        "Bar",          -1,     3,      -1,     -1,    5,  5,  2, 2
    mapGauge_vacBoost = map_vacboost,  "Pression MAP (in-Hg/PSI)",  "in-Hg/PSI",    -30,    30,     -30,    -30, 30, 30, 1, 1
    emapGauge         = emap,          "Pression echappement EMAP",             "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    baroGauge         = baro,          "Baro/MAF",           "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    batteryVoltage    = batteryVoltage,"Tension Batterie",         "volts",        0,    25,      8,     9,   15,   16, 2, 2
    vssGauge          = vss,           "Vehicule Vitesse (kph)",     "km/h",         0,    250,     5,    10,   180,   200, 0, 0
    vssGaugeMPH       = vssMPH,        "Vehicule Vitesse (mph)",     "mph",          0,    250,     5,    10,   180,   200, 0, 0
    gearGauge          = gear,         "Vitesse engagee",     "",         0,    7,     0,    0,   7,   7, 0, 0

    tpsADCGauge       = tpsADC,        "TPS ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
    throttleGauge     = throttle,      "Throttle Position",  "%TPS",    0,   100,     -1,     1,   90,  100, 1, 1

    afrGauge          = afr,           "AFR 1",     "",        10,    20,     11,    12,   15,   16, 2, 2
    afrGauge2         = afr2,          "AFR 2",     "",        10,    20,     11,    12,   15,   16, 2, 2
    lambdaGauge       = lambda,        "Lambda",             "",      0.5,   1.5,    0.5,   0.7,    2,  1.1, 2, 2
    TPSdotGauge       = TPSdot,        "TPS DOT",            "kPa/s",   0,   2550,    -1,    -1, 2560, 2560, 0, 0
    MAPdotGauge       = MAPdot,        "MAP DOT",            "%/s",     0,   2550,    -1,    -1, 2560, 2560, 0, 0
	
    #if CELSIUS
    cltGauge          = coolant,       "Temp. EAU",       "TEMP", -40,   215,    -15,     0,   95,  105, 0, 0
    iatGauge          = iat,           "Temp. AIR",     "TEMP", -40,   215,    -15,     0,   95,  100, 0, 0
    fuelTempGauge     = fuelTemp,      "Temp. Carburant",          "TEMP", -40,   215,    -15,     0,   95,  100, 0, 0
    #else
    cltGauge          = coolant,       "Temp. EAU",       "TEMP", -40,   215,      0,    30,  200,  220, 0, 0
    iatGauge          = iat,           "Temp. AIR",     "TEMP", -40,   215,      0,    30,  200,  210, 0, 0
    fuelTempGauge     = fuelTemp,      "Temp. Carburant",          "TEMP", -40,   215,      0,    30,  200,  210, 0, 0
    #endif
    flexGauge         = flex,          "Taux Ethanol",        "%",       0,   100,     -1,    -1,  999,  999, 0, 0

    fuelPressureGauge = fuelPressure,  "Pression de carburant",      "PSI",          -15,    100,    0,      20,  200,  245, 0, 0
    oilPressureGauge  = oilPressure,   "Pression d'huile",       "PSI",          -15,    100,    0,      20,  200,  245, 0, 0
	EGTGauge          = EGT,           "TEMP echappement",       "TEMP",          0,    1050,    0,      100,  900,  950, 0, 0
    ETBpos1ADCGauge   = ETBpos1ADC,    "ETB1 ADC",        "ADC",              0,    255,   0,      0,  255,  255, 0, 0
    ETBpos2ADCGauge   = ETBpos2ADC,    "ETB2 ADC",        "ADC",              0,    255,   0,      0,  255,  255, 0, 0
    TPS2ADCGauge      = TPS2ADC,       "TPS2 ADC",           "ADC",              0,    255,   0,      0,  255,  255, 0, 0	
	ETBpos1Gauge      = ETBpos1,       "Position ETB1",             "%",              0,    100,   -1,      -1,  101,  101, 1, 1
	ETBpos2Gauge      = ETBpos2,       "Position ETB2",             "%",              0,    100,   -1,      -1,  101,  101, 1, 1
	TPS2Gauge         = TPS2,          "Position TPS2",                "%",              0,    100,   -1,      -1,  101,  101, 1, 1	
    ETBloadGauge      = ETBload,       "Duty ETB",            "%",              0,    100,   -1,      -1,  101,  101, 0, 0

    gaugeCategory     = "Entree auxiliaires "
    AuxInGauge0       = auxin_gauge0,    { stringValue(AUXin00Alias) },        "",             0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge1       = auxin_gauge1,    { stringValue(AUXin01Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge2       = auxin_gauge2,    { stringValue(AUXin02Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge3       = auxin_gauge3,    { stringValue(AUXin03Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge4       = auxin_gauge4,    { stringValue(AUXin04Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge5       = auxin_gauge5,    { stringValue(AUXin05Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge6       = auxin_gauge6,    { stringValue(AUXin06Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge7       = auxin_gauge7,    { stringValue(AUXin07Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge8       = auxin_gauge8,    { stringValue(AUXin08Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge9       = auxin_gauge9,    { stringValue(AUXin09Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge10      = auxin_gauge10,    { stringValue(AUXin10Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge11      = auxin_gauge11,    { stringValue(AUXin11Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0

    gaugeCategory = "Informations Systeme"
    clockGauge        = secl,          "Horloges",              "Seconds", 0,   255,     10,    10,  245,  245, 0, 0
    loopGauge         = loopsPerSecond,"Main loop speed",    "Loops/S" , 0,  5000,   750,  900, 100000, 100000, 0, 0
    loopsPerRevGauge  = loopsPerRev,   "Main loops per revolution", "Loops/rev", 0, 100, 10,  15, 10000, 10000, 2, 0
    memoryGauge       = freeRAM,       "Memoire Libre",        "bytes" ,   0,  8000,     -1,    1000,8000, 1000, 0, 0
    reqFuelGauge      = req_fuel,       "Carburant necessaire",          "ms",      0,  35.0,    1.0,   1.2,   20,   25, 2, 2
    mapMultiplyGauge  = map_multiply_amt, "taux de multiplication MAP",     "%",       0,   200,    130,   140,  140,  150, 0, 0
    nSquirtsGauge     = nSquirts,       "# Cycle moteur",          "",        0,    10,    130,   140,  140,  150, 0, 0
    syncLossGauge     = syncLossCounter, "# Perte de synchonisation",      "",        0,    255,    -1,   -1,  10,  50, 0, 0
;-------------------------------------------------------------------------------

[FrontPage]


   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = tachometer
   gauge2 = throttleGauge
   gauge3 = pulseWidthGauge
   gauge4 = dutyCycleGauge
   gauge5 = mapGauge
   gauge6 = iatGauge
   gauge7 = cltGauge
   gauge8 = batteryVoltage

   ;----------------------------------------------------------------------------
   ; Indicators
   ;             expr                   off-label       on-label,       off-bg, off-fg, on-bg,  on-fg
   indicator = { running            }, "A l'arret",   " en Fonctionnement",       white, black, green,    black
   indicator = { crank              }, "pas Demarreur",  "Demarreur",     white, black, green,    black
   indicator = { ase                }, "ASE OFF",       "ASE ON",       white, black, green,    black
   indicator = { warmup             }, "WUE OFF",       "WUE ON",       white, black, green,    black
   indicator = { tpsaccaen          }, "Accel",         "Accel",        white, black, green,    black
   indicator = { tpsaccden          }, "Decel",         "Decel",        white, black, green,    black
   indicator = { mapaccaen          }, "MAP Accel",     "MAP Accel",    white, black, green,    black
   indicator = { mapaccden          }, "MAP Decel",     "MAP Decel",    white, black, green,    black
   indicator = { error              }, "Pas d'Erreurs",     "ERREUR",        white, black, green,    black
   indicator = { (tps > tpsflood) && (rpm < crankRPM) }, "DENOYAGE OFF", "DENOYAGE",      white, black, red,   black
   indicator = { DFCOOn             }, "Coupure injection OFF",      "Coupure injection On",      white, black, red,      black
   indicator = { launchHard         }, "Launch Hard",   "Launch Hard",  white, black, green,    black
   indicator = { launchSoft         }, "Launch Soft",   "Launch Soft",  white, black, green,    black
   indicator = { softlimitOn        }, "Soft Limit OFF","Soft Limites", white, black, red,      black
   indicator = { hardLimitOn        }, "Hard Limit OFF","Hard Limites", white, black, red,      black
   indicator = { boostCutOut        }, "Surpression",   "Surpression coupure",    white, black, red,      black
   indicator = { sync               }, "Non Sync",       "Sync complette",         white, black, green,    black
   indicator = { halfSync           }, "Non or Sync complette",  "Sync sans phase",       white, black, yellow, black
   indicator = { CTPSactif          }, "CTPS",     "CTPS",  white, black, green, black
   indicator = { FTPSactif          }, "FTPS",     "FTPS",  white, black, green, black
   indicator = { nitrousOn          }, "Nitro Off",   "Nitro On",   white, black, red,      black
   indicator = { fanStatus          }, "Fan OFF",              "Fan ON",              white, black, blue,      black
   ;Engine Protection status indicators
   indicator = { engineProtectStatus}, "Protect moteur OFF",   "Protect moteur ON",   white, black, red,      black
   indicator = { engineProtectRPM   }, "Rupteur Off",      "Rupteur ON",      white, black, red,      black
   indicator = { engineProtectMAP   }, "Boost Limit OFF",      "Boost Limit ON",      white, black, red,      black
   indicator = { engineProtectOil   }, "Pression huile OFF","Pression huile ON",white, black, red,      black
   indicator = { engineProtectAFR   }, "AFR Protect OFF",      "AFR Protect ON",      white, black, red,      black
   indicator = { wmiEmptyBit        }, "WMI reservoir",   "WMI reservoir vide",      white, black, red,      black
   indicator = { vvt1Error          }, "VVT1 Ok",              "VVT1 Erreur",          white, black, red,      black
   indicator = { vvt2Error          }, "VVT2 Ok",              "VVT2 Erreur",          white, black, red,      black
   indicator = { clunch             }, "Embrayage off",        "Embrayage on",        white, black, green, black  
   indicator = { idleign            }, "Allumage table",       "Allumage commute",    white, black, green, black  
   indicator = { idleup             }, "Clim off",              "Clim on",  white, black, green, black   
   indicator = { tablesw            }, "Table 1 Inj",              "Table 2 Inj",  white, black, green, black  
   indicator = { tableswall         }, "Table 1 ALL",              "Table 2 ALL",  white, black, green, black  
   indicator = { outputsStatus0     }, "Programmable 1 Off", "Programmable 1 ON", white, black, green, black
   indicator = { outputsStatus1     }, "Programmable 2 Off", "Programmable 2 ON", white, black, green, black
   indicator = { outputsStatus2     }, "Programmable 3 Off", "Programmable 3 ON", white, black, green, black
   indicator = { outputsStatus3     }, "Programmable 4 Off", "Programmable 4 ON", white, black, green, black
   indicator = { outputsStatus4     }, "Programmable 5 Off", "Programmable 5 ON", white, black, green, black
   indicator = { outputsStatus5     }, "Programmable 6 Off", "Programmable 6 ON", white, black, green, black
   indicator = { outputsStatus6     }, "Programmable 7 Off", "Programmable 7 ON", white, black, green, black
   indicator = { outputsStatus7     }, "Programmable 8 Off", "Programmable 8 ON", white, black, green, black
   indicator = { (gear>0) &&  (gear<2) && (clunch<1) }, "Vitesse 1", "Vitesse 1", white, black, green, black
   indicator = { (gear>1) &&  (gear<3) && (clunch<1) }, "Vitesse 2", "Vitesse 2", white, black, green, black
   indicator = { (gear>2) &&  (gear<4) && (clunch<1) }, "Vitesse 3", "Vitesse 3", white, black, green, black
   indicator = { (gear>3) &&  (gear<5) && (clunch<1) }, "Vitesse 4", "Vitesse 4", white, black, green, black
   indicator = { (gear>4) &&  (gear<6) && (clunch<1) }, "Vitesse 5", "Vitesse 5", white, black, green, black
   indicator = { (gear>5) &&  (gear<7) && (clunch<1) }, "Vitesse 6", "Vitesse 6", white, black, green, black
   indicator = { ETB_status      & 1}, "ETB", "ETB FERME",           white, black, green, black
   indicator = { ETB_status      & 2}, "ETB", "ETB COMMUTE",           white, black, green, black
   indicator = { ETB_status      & 4}, "ETB", "ETB DEFAUT",           white, black, red, black
   indicator = { sd_status      & 2}, "SD prette", "SD prette",       white, black, green, black
   indicator = { sd_status      & 0}, "non SD", "SD",             white, black, green, black
   indicator = { sd_status      & 1}, "SD", "SDHC",           white, black, green, black
   indicator = { sd_status      & 4}, "SD Err", "SD Err",           white, black, red, black
   indicator = { burnPending        }, "EEPROM Burn",   "EEPROM Burn", white, black, red,      black   
   indicator = { engineProtectCoolant }, "Protect eau OFF","Protect eau ON",white, black, red, black
   indicator = { engineProtectEGT }, "Protect EGT OFF","Protect EGT ON",white, black, red, black
   indicator = { (batteryVoltage < batlow) || (batteryVoltage > bathigh) }, "Battery Voltage OK", "Battery Voltage Danger", white, black, red, black
   indicator = { idleControlOn      }, "Idle OFF",             "Idle ON",             white, black, green,    black

;-------------------------------------------------------------------------------

[OutputChannels]
   ; The number of bytes MegaTune or TunerStudio should expect as a result
   ; of sending the "A" command to Speeduino is determined
   ; by the value of ochBlockSize, so be very careful when
   ; you change it.

   ochGetCommand    = "r\$tsCanId\x30%2o%2c" 
   ochBlockSize     =  127
      
   secl             = scalar, U08,  0, "sec",    1.000, 0.000
   status1          = scalar, U08,  1, "bits",   1.000, 0.000
    inj1Status       = bits,    U08,    1, [0:0]
    inj2Status       = bits,    U08,    1, [1:1]
    inj3Status       = bits,    U08,    1, [2:2]
    inj4Status       = bits,    U08,    1, [3:3]
    DFCOOn           = bits,    U08,    1, [4:4]
    boostCutFuel     = bits,    U08,    1, [5:5]
    toothLog1Ready   = bits,    U08,    1, [6:6]
    toothLog2Ready   = bits,    U08,    1, [7:7]
   engine           = scalar, U08,  2, "bits",   1.000, 0.000
    running          = bits,    U08,    2, [0:0]
    crank            = bits,    U08,    2, [1:1]
    ase              = bits,    U08,    2, [2:2]
    warmup           = bits,    U08,    2, [3:3]
    tpsaccaen        = bits,    U08,    2, [4:4]
    tpsaccden        = bits,    U08,    2, [5:5]
    mapaccaen        = bits,    U08,    2, [6:6]
    mapaccden        = bits,    U08,    2, [7:7]
   syncLossCounter  = scalar,   U08,    3, "",       1.000, 0.000
   map              = scalar,   U16,    4, "kpa",    1.000, 0.000
   iatRaw           = scalar,   U08,    6, "°C",     1.000, 0.000
   coolantRaw       = scalar,   U08,    7, "°C",     1.000, 0.000
   batCorrection    = scalar,   U08,    8, "%",      1.000, 0.000
   batteryVoltage   = scalar,   U08,    9, "V",      0.100, 0.000
   afr              = scalar,   U08,    10, "O2",     0.100, 0.000
   egoCorrection    = scalar,   U08,    11, "%",      1.000, 0.000
   airCorrection    = scalar,   U08,    12, "%",      1.000, 0.000
   warmupEnrich     = scalar,   U08,    13, "%",      1.000, 0.000
   rpm              = scalar,   U16,    14, "rpm",    1.000, 0.000
   accelEnrich      = scalar,   U08,    16, "%",      2.000, 0.000
   gammaEnrich      = scalar,   U16,    17, "%",      1.000, 0.000
   VE1              = scalar,   U08,    19, "%",      1.000, 0.000
   VE2              = scalar,   U08,    20, "%",      1.000, 0.000
   afrTarget        = scalar,   U08,    21, "O2",     0.100, 0.000
   TPSdot           = scalar,   U08,    22, "%/s",    10.00, 0.000
   advance          = scalar,   S08,    23, "deg",    1.000, 0.000
   tps              = scalar,   U08,    24, "%",      0.500, 0.000
   loopsPerSecond   = scalar,   U16,    25, "loops",  1.000, 0.000
   freeRAM          = scalar,   U16,    27, "bytes",  1.000, 0.000
   boostTarget      = scalar,   U08,    29, "kPa",    2.000, 0.000
   boostDuty        = scalar,   U08,    30, "%",      1.000, 0.000
   status2          = scalar,   U08,    31, "bits",   1.000, 0.000
    launchHard       = bits,    U08,    31, [0:0]
    launchSoft       = bits,    U08,    31, [1:1]
    hardLimitOn      = bits,    U08,    31, [2:2]
    softlimitOn      = bits,    U08,    31, [3:3]
    boostCutSpark    = bits,    U08,    31, [4:4]
    error            = bits,    U08,    31, [5:5]
    idleControlOn    = bits,    U08,    31, [6:6]
    sync             = bits,    U08,    31, [7:7]
   rpmDOT           = scalar,   S16,    32, "rpm/s",  1.000, 0.000
   flex             = scalar,   U08,    34, "%",      1.000, 0.000
   flexFuelCor      = scalar,   U08,    35, "%",      1.000, 0.000
   flexIgnCor       = scalar,   S08,    36, "deg",    1.000, 0.000
   idleLoad         = scalar,   U08,    37, { bitStringValue( idleUnits , iacAlgorithm  ) },    { (iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 || iacAlgorithm == 7 || iacMaxSteps <= 255) ? 1.000 : 2.000 }, 0.000 ; This is a combined variable covering both PWM and stepper IACs. The units and precision used depend on which idle algorithm is chosen
   testoutputs      = scalar,   U08,    38, "bits",   1.000, 0.000
    testenabled      = bits,    U08,    38, [0:0]
    testactive       = bits,    U08,    38, [1:1]
   afr2             = scalar,   U08,    39, "O2_2",     0.100, 0.000
   baro             = scalar,   U08,    40, "kpa",    1.000, 0.000
   auxin_gauge0      = scalar,   U16,    41,  "",       1.000, 0.000
   auxin_gauge1      = scalar,   U16,    43,  "",       1.000, 0.000
   auxin_gauge2      = scalar,   U16,    45,  "",       1.000, 0.000
   auxin_gauge3      = scalar,   U16,    47,  "",       1.000, 0.000
   auxin_gauge4      = scalar,   U16,    49,  "",       1.000, 0.000
   auxin_gauge5      = scalar,   U16,    51,  "",       1.000, 0.000
   auxin_gauge6      = scalar,   U16,    53,  "",       1.000, 0.000
   auxin_gauge7      = scalar,   U16,    55,  "",       1.000, 0.000
   auxin_gauge8      = scalar,   U16,    57,  "",       1.000, 0.000
   auxin_gauge9     = scalar,   U16,    59,  "",        1.000, 0.000
   auxin_gauge10    = scalar,   U16,    61,  "",        1.000, 0.000
   auxin_gauge11    = scalar,   U16,    63,  "",        1.000, 0.000
   libre_status     = scalar,   U08,    65,  "",        1.000, 0.000 
   TPS2ADC          = scalar,   U08,    66,  "",        1.000, 0.000
   TPS2             = scalar,   U08,    67,  "%",       0.500, 0.000
   ETBload          = scalar,   U08,    68,  "%",       1.000, 0.000
   ETBpos1ADC       = scalar,   U08,    69,  "%",       1.000, 0.000
   ETBpos2ADC       = scalar,   U08,    70,  "%",       1.000, 0.000
   ETBpos1          = scalar,   U08,    71,  "%",       0.500, 0.000
   ETBpos2          = scalar,   U08,    72,  "%",       0.500, 0.000
   tpsADC           = scalar,   U08,    73, "ADC",      1.000, 0.000
   errors           = scalar,   U08,    74, "bits",     1.000, 0.000
   errorNum         = bits,     U08,    74, [0:1]
   currentError     = bits,     U08,    74, [2:7]
   pulseWidth       = scalar,   U16,    75, "ms",     0.001, 0.000
   pulseWidth2      = scalar,   U16,    77, "ms",     0.001, 0.000
   pulseWidth3      = scalar,   U16,    79, "ms",     0.001, 0.000
   pulseWidth4      = scalar,   U16,    81, "ms",     0.001, 0.000
   status3          = scalar,   U08,    83, "bits", 1.000, 0.000
    resetLockOn       = bits,     U08,       83, [0:0]
    nitrousOn         = bits,     U08,       83, [1:1]
    fuel2Active       = bits,     U08,       83, [2:2]
    vssRefresh        = bits,     U08,       83, [3:3]
    halfSync          = bits,     U08,       83, [4:4]
    nSquirts          = bits,     U08,       83, [5:7]
   engineProtectStatus = scalar,   U08,    84, "bits", 1.000, 0.000
    engineProtectRPM  = bits,     U08,       84, [0:0]
    engineProtectMAP  = bits,     U08,       84, [1:1]
    engineProtectOil  = bits,     U08,       84, [2:2]
    engineProtectAFR  = bits,     U08,       84, [3:3]
    engineProtectCoolant  = bits,     U08,       84, [4:4]
	engineProtectEGT  = bits,     U08,       84, [5:5]
    engineProtectOth  = bits,     U08,       84, [6:6] ; Unused for now
    IOError           = bits,     U08,       84, [7:7]
   fuelLoad         = scalar,   S16,    85, { bitStringValue( algorithmUnits , algorithm  ) }, fuelLoadFeedBack, 0.000
   ignLoad          = scalar,   S16,    87, { bitStringValue( algorithmUnits , ignAlgorithm  ) }, ignLoadFeedBack, 0.000
   dwell            = scalar,   U16,    89, "ms",     0.001, 0.000
   CLIdleTarget     = scalar,   U08,    91, "RPM",    10.00, 0.000
   MAPdot           = scalar,   U08,    92, "kPa/s",  10.00, 0.000
   vvt1Angle        = scalar,   S16,    93, "deg",    0.50, 0.000
   vvt1Target       = scalar,   U08,    95, "deg",    0.50, 0.000
   vvt1Duty         = scalar,   U08,    96, "%",      0.50, 0.000
   flexBoostCor     = scalar,   S16,    97, "kPa",    1.000, 0.000
   baroCorrection   = scalar,   U08,    99, "%",      1.000, 0.000
   veCurr           = scalar,   U08,   100, "%",      1.000, 0.000
   ASECurr          = scalar,   U08,   101, "%",      1.000, 0.000
   vss              = scalar,   U16,   102, "km/h",   1.000, 0.000
   gear             = scalar,   U08,    104, "",      1.000, 0.000
   fuelPressure     = scalar,   U08,    105, "PSI",   1.000, 0.000
   oilPressure      = scalar,   U08,    106, "PSI",   1.000, 0.000
   wmiPW            = scalar,   U08,    107, "%",      1.000, 0.000
   status4          = scalar,   U08,    108, "bits", 1.000, 0.000
    wmiEmptyBit     = bits,     U08,    108, [0:0]
    vvt1Error       = bits,     U08,    108, [1:1]
    vvt2Error       = bits,     U08,    108, [2:2]
    clunch          = bits,     U08,    108, [3:3]	
	idleup          = bits,     U08,    108, [4:4]
	tablesw         = bits,     U08,    108, [5:5]
	tableswall      = bits,     U08,    108, [6:6]	
    idleign         = bits,     U08,    108, [7:7]
   vvt2Angle        = scalar,   S16,    109, "deg",    0.50, 0.000
   vvt2Target       = scalar,   U08,    111, "deg",    0.50, 0.000
   vvt2Duty         = scalar,   U08,    112, "%",      0.50, 0.000
   outputsStatus0   = bits,     U08,    113,  [0:0]
   outputsStatus1   = bits,     U08,    113,  [1:1]
   outputsStatus2   = bits,     U08,    113,  [2:2]
   outputsStatus3   = bits,     U08,    113,  [3:3]
   outputsStatus4   = bits,     U08,    113,  [4:4]
   outputsStatus5   = bits,     U08,    113,  [5:5]
   outputsStatus6   = bits,     U08,    113,  [6:6]
   outputsStatus7   = bits,     U08,    113,  [7:7]
   fuelTempRaw      = scalar,   U08,    114, "°C",    1.000, 0.000
   fuelTempCor      = scalar,   U08,    115, "%",     1.000, 0.000
   advance1         = scalar,   S08,    116, "deg",      1.000, 0.000
   advance2         = scalar,   S08,    117, "deg",      1.000, 0.000
   sd_status        = scalar,   U08,    118, "",         1.0,   0.0
   emap             = scalar,   U16,    119, "kpa",    1.000, 0.000
   ETB_status       = scalar,   U08,    121, "",         1.0,   0.0
   status5          = scalar,   U08,    122, "bits", 1.000, 0.000
    CTPSactif        = bits,     U08,    122, [0:0]
    FTPSactif        = bits,     U08,    122, [1:1]
    fanStatus        = bits,     U08,    122, [2:2]
    burnPending      = bits,     U08,    122, [3:3]	
	unuse4_122       = bits,     U08,    122, [4:4]
	unuse5_122       = bits,     U08,    122, [5:5]
	unuse6_122       = bits,     U08,    122, [6:6]	
    unuse7_122       = bits,     U08,    122, [7:7]
   fanDuty           = scalar,   U08,    123, "%",        0.5, 0.000
   phaldexDuty       = scalar,   U08,    124, "%",        0.5, 0.000
   EGT               = scalar,   U16,    125, "°C",       5.0, 0.000
#if CELSIUS
   coolant          = { coolantRaw - 40                               } ; Temperature readings are offset by 40 to allow for negatives
   iat              = { iatRaw - 40                                   } ; Temperature readings are offset by 40 to allow for negatives
   fuelTemp         = { fuelTempRaw - 40                              } ; Temperature readings are offset by 40 to allow for negatives
#else
   coolant          = { (coolantRaw - 40) * 1.8 + 32                  } ;Convert C to F (Offset by 40)
   iat              = { (iatRaw - 40) * 1.8 + 32                      } ;Convert C to F (Offset by 40)
   fuelTemp         = { (fuelTempRaw - 40) * 1.8 + 32                 } ;Convert C to F (Offset by 40)
#endif
   time             = { timeNow                                       }
   seconds          = { secl                                          }

   throttle         = { tps }, "%"

   revolutionTime   = { rpm ? ( 60000.0 / rpm) : 0                    }
   strokeMultipler  = { twoStroke == 1 ? 1 : 2                        }
   cycleTime        = { revolutionTime * strokeMultipler              }
   pulseLimit       = { cycleTime / nSquirts                          }
   
   nFuelChannels    = { arrayValue( array.boardFuelOutputs, pinLayout ) }
   nIgnChannels     = { arrayValue( array.boardIgnOutputs, pinLayout ) }
   sequentialFuelAvailable = { nCylinders <= nFuelChannels }
   sequentialIgnitionAvailable = { nCylinders <= nIgnChannels }
   
   dutyCycle        = { rpm ? ( 100.0*pulseWidth/pulseLimit ) : 0     }
   dutyCycle2        = { rpm ? ( 100.0*pulseWidth2/pulseLimit ) : 0     }
   stgDutyCycle     = { rpm && stagingEnabled ? ( 100.0*pulseWidth3/pulseLimit ) : 0      }

   boostCutOut      = { boostCutFuel || boostCutSpark }
   lambda           = { afr / stoich }
   lambdaTarget     = { afrTarget / stoich }
   MAPxRPM          = { rpm * map }
   loopsPerRev      = { rpm ? loopsPerSecond / (rpm / 60) : 0 }
   req_fuel         = { reqFuel }
   bat_correction   = { battVCorMode ? 100 : batCorrection } ; If battery voltage correction mode is Whole PW, use the battery correction, otherwise 100%
   inj_open         = { battVCorMode ? ((injOpen * batCorrection) / 100) : injOpen } ; If battery voltage correction mode is Open Time Only, calculate the corrected open time
   ase_enrich       = { ASECurr } ; If ASE is active then equal the ASE + 100
   map_multiply_amt = { multiplyMAP ? map : 100 } ; If multiply MAP is enabled, use the current MAP value, otherwise 100%
   ;nSquirts         = { nCylinders / divider }

   ;Manifold pressure in weirdo units
   map_bar      = { ((map) / 101.33) - 1}
   map_psi      = { ((map) * 0.145038) - 1 }
   map_inhg     = { (baro - map) * 0.2953007 } ;in-Hg
   map_vacboost = { map < baro ? -map_inhg : map_psi }

   vssMPH       = { vss / 1.60934 }

   ;fuelLoadMax = { arrayValue(algorithmLimits , algorithm) } ;Doesn't work, no idea why.
   fuelLoadMax  = { (algorithm == 0 || algorithm == 2) ? 511 : 100.0 }
   ignLoadMax  = { (ignAlgorithm == 0 || ignAlgorithm == 2) ? 511 : 100.0 }
   fuel2LoadMax  = { (fuel2Algorithm == 0 || fuel2Algorithm == 2) ? 511 : 100.0 }
   ign2LoadMax  = { (spark2Algorithm == 0 || spark2Algorithm == 2) ? 511 : 100.0 }

   fuelLoad2    = { fuel2Algorithm == 0 ? map : fuel2Algorithm == 1 ? tps : fuel2Algorithm == 2 ? 0 : 0 }
   ignLoad2     = { spark2Algorithm == 0 ? map : spark2Algorithm == 1 ? tps : spark2Algorithm == 2 ? 0 : ignLoad }
   vvtLoad      = { (vvtLoadSource == 0) ? map : tps }
   vvtLoadMax   = { (vvtLoadSource == 0) ? 511 : 100.0 }
   wmiLoadMax   = { (wmiMode == 2) ? 100.0 : 255 }
   ETBLoadMax   = { (ETBEnable == 1 && iacAlgorithm == 7) ? 100.0 : 255 }
   
   ;Select data resolution and scale based on algorithm used
   vvtLoadRes   = { (vvtLoadSource == 0) ? 2.000 : 0.500 }

   fuelLoadRes  = { ((algorithm == 0) || (algorithm == 2)) ? 2.000 : 0.500 }
   ignLoadRes  = { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 2.000 : 0.500 }

   fuelLoadFeedBack  = { ((algorithm == 0) || (algorithm == 2)) ? 1.000 : 0.250 }
   ignLoadFeedBack  = { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 1.000 : 0.250 }

   fuel2LoadRes  = { ((fuel2Algorithm  == 0) || (fuel2Algorithm  == 2)) ? 2.000 : 0.500 }
   ign2LoadRes  = { ((spark2Algorithm == 0) || (spark2Algorithm == 2)) ? 2.000 : 0.500 }

   vvtDecimalRes= { (vvtLoadSource == 0) ? 0 : 1 }
   fuelDecimalRes= { ((algorithm == 0) || (algorithm == 2)) ? 0 : 1 }
   ignDecimalRes= { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 0 : 1 }
   fuel2DecimalRes= { ((fuel2Algorithm  == 0) || (fuel2Algorithm  == 2)) ? 0 : 1 }
   ign2DecimalRes= { ((spark2Algorithm == 0) || (spark2Algorithm == 2)) ? 0 : 1 }

   boostTableLimit = { boostType == 0 ? 100.0 : 511 } ;The maximum value allowed in the boost table. 100 is used for duty cycle, 511 for kpa

   CLIdleDelta      = { CLIdleTarget - rpm }

;-------------------------------------------------------------------------------

[Datalog]
   ; Full datalog.
   ;
   ; Default user-defined log emulates the full datalog.
   ;
   ; The entries are saved in the datalog file in the order in
   ; which they appear in the list below.
   ;
   ;   Channel - Case sensitive name of output channel to be logged.
   ;   Label   - String written to header line of log.  Be careful
   ;             about changing these, as programs like MSLVV and
   ;             MSTweak key off specific column names.
   ;   Type    - Data type of output, converted before writing.
   ;   Format  - C-style output format of data.
   ;
   ;       Channel          Label               Type    Format
   ;       --------------   ----------          -----   ------
   entry = time,            "Temps",             float,  "%.3f"
   entry = secl,            "SecL",             int,    "%d"
   entry = rpm,             "RPM",              int,    "%d"
   entry = map,             "MAP",              int,    "%d"
   entry = MAPxRPM,         "MAPxRPM",          int,    "%d"
   entry = tps,             "TPS",              float,  "%.1f"
   entry = afr,             "AFR",              float,  "%.3f"
   entry = lambda,          "Lambda",           float,  "%.3f"
   entry = iat,             "AIR",              int,    "%d"
   entry = coolant,         "EAU",              int,    "%d"
   entry = engine,          "Regime",           int,    "%d"
   entry = DFCOOn,          "Coupure injection",             int,    "%d"
   entry = egoCorrection,   "Gego",             int,    "%d"
   entry = airCorrection,   "Gair",             int,    "%d"
   entry = bat_correction,  "Gbattery",         int,    "%d"
   entry = warmupEnrich,    "Gwarm",            int,    "%d"
   entry = baroCorrection,  "Gbaro",            int,    "%d"
   entry = gammaEnrich,     "Gammae",           int,    "%d"
   entry = accelEnrich,     "Accel Enrich",     int,    "%d"
   entry = veCurr,          "Injection",       int,    "%d"
   entry = VE1,             "VE1",              int,    "%d"
   entry = VE2,             "VE2",              int,    "%d"
   entry = pulseWidth,      "PW",               float,  "%.3f"
   entry = afrTarget,       "Cible AFR",       float,  "%.3f"
   entry = lambdaTarget,    "Cible Lambda",    float,  "%.3f"
   entry = pulseWidth2,     "PW2",              float,  "%.3f"
   entry = dutyCycle,       "DutyCycle1",       float,  "%.1f"
   entry = dutyCycle2,      "DutyCycle2",       float,  "%.1f"
   entry = TPSdot,          "TPS DOT",          int,    "%d"        { aeMode == 0 }
   entry = MAPdot,          "MAP DOT",          int,    "%d"        { aeMode == 1 }
   entry = advance,         "Avance",          int,    "%d"
   entry = dwell,           "Dwell",            float,  "%.1f"
   entry = batteryVoltage,  "Batterie V",        float,  "%.1f"
   entry = rpmDOT,          "rpm/s",            int,    "%d"
   entry = flex,            "Eth %",            int,    "%d",       { flexEnabled }
   entry = flexFuelCor,     "GflexFuel",        int,    "%d",       { flexEnabled }
   entry = fuelTemp,        "Temp Carburant",        int,    "%d",       { flexEnabled }
   entry = fuelTempCor,     "GfuelTemp",        int,    "%d",       { flexEnabled }
   entry = map_psi,         "Boost PSI",        float,  "%.1f"
   entry = boostTarget,     "Boost Target",     int,    "%d",       { boostEnabled }
   entry = boostDuty,       "Boost Duty",       int,    "%d",       { boostEnabled }
   entry = boostCutOut ,    "Boost cut",        int,    "%d"
   entry = launchHard ,     "Launch",      int,    "%d"
   entry = hardLimitOn ,    "Hard Limiteur",     int,    "%d"
   entry = idleControlOn,   "Idle Control",     int,    "%d"
   entry = idleLoad,        "Valeur Vanne ralenti",        int,    "%d"
   entry = CLIdleTarget,    "Cible RPM ralenti",  int,    "%%d",     { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 } ;Only show for closed loop idle modes and if idle advance is enabled
   entry = CLIdleDelta,     "ecart RPM ralenti",   int,    "%d",      { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 } ;Only show for closed loop idle modes and if idle advance is enabled
   entry = baro,            "Baro/MAF",    int,    "%d"
   entry = nitrousOn,       "Nitro",          int,    "%d",      { n2o_enable > 0 }
   entry = syncLossCounter, "Perte de synchro #",      int,    "%d"
   entry = vvt1Angle,       "VVT1 Angle",       int,    "%.1f",        { vvtEnabled > 0 }
   entry = vvt1Target,      "VVT1 Cible Angle",int,    "%.1f",        { vvtEnabled > 0 && vvtMode == 2 } ;;Only show when using close loop vvt
   entry = vvt1Duty,        "VVT1 Duty",        int,    "%.1f",        { vvtEnabled > 0 }
   entry = fanStatus,       "Fan",              int,    "%d"   
   entry = vss,             "Vitesse (kph)",int,    "%d",          { vssMode > 1 }   
   entry = vssMPH,          "Vitesse (mph)",int,    "%d",          { vssMode > 1 }   
   entry = gear,            "Rapport",             int,    "%d",          { vssMode > 1 }  
   entry = fuelPressure,    "Pression Carburant",    int,    "%d",          { fuelPressureEnable > 0 }   
   entry = oilPressure,     "Pression Huile",     int,    "%d",          { oilPressureEnable > 0 } 
   entry = EGT,             "EGT",              int,    "%d",          { EGTEnable > 0 } 
   entry = vvt2Angle,       "VVT2 Angle",       int,    "%.1f",        { vvt2Enabled > 0 }
   entry = vvt2Target,      "VVT2 Cible Angle",int,    "%.1f",        { vvt2Enabled > 0 && vvtMode == 2 } ;;Only show when using close loop vvt
   entry = vvt2Duty,        "VVT2 Duty",        int,    "%.1f",        { vvt2Enabled > 0 && vvtMode == 2 }
   entry = ETBpos1,         "ETBpos1",          float,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}
   entry = ETBpos2,         "ETBpos2",          float,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}
   entry = TPS2,            "TPS2",             float,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}   
   entry = ETBpos1ADC,      "ETBpos1ADC",       int,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}
   entry = ETBpos2ADC,      "ETBpos2ADC",       int,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}
   entry = TPS2ADC,         "TPS2ADC",          int,    "%d",          { ETBEnable > 0 || iacAlgorithm == 7}
   entry = fanDuty,         "FAN Duty",         int,    "%.1f",          { fanEnable == 2 || simultempEnabled > 0 }  
   entry = wmiPW,           "WMI Duty Cycle",   int,    "%d",          { wmiEnabled == 1 }
   entry = loopsPerSecond,  "cycles/s",         int,     "%d"
   entry = loopsPerRev,     "Loops/rev",        int,    "%.2f"
   entry = phaldexDuty,     "HALDEX",           int,    "%.1f"
   
   entry = auxin_gauge0,  { stringValue(AUXin00Alias) },  int,     "%d", {(caninput_sel0b != 0)}
   entry = auxin_gauge1,  { stringValue(AUXin01Alias) },  int,     "%d", { (caninput_sel1b != 0)}
   entry = auxin_gauge2,  { stringValue(AUXin02Alias) },  int,     "%d", { (caninput_sel2b != 0)}
   entry = auxin_gauge3,  { stringValue(AUXin03Alias) },  int,     "%d", { (caninput_sel3b != 0)}
   entry = auxin_gauge4,  { stringValue(AUXin04Alias) },  int,     "%d", { (caninput_sel4b != 0)}
   entry = auxin_gauge5,  { stringValue(AUXin05Alias) },  int,     "%d", { (caninput_sel5b != 0)}
   entry = auxin_gauge6,  { stringValue(AUXin06Alias) },  int,     "%d", { (caninput_sel6b != 0)}
   entry = auxin_gauge7,  { stringValue(AUXin07Alias) },  int,     "%d", { (caninput_sel7b != 0)}
   entry = auxin_gauge8,  { stringValue(AUXin08Alias) },  int,     "%d", { (caninput_sel8b != 0)}
   entry = auxin_gauge9,  { stringValue(AUXin09Alias) },  int,     "%d", { (caninput_sel9b != 0)}
   entry = auxin_gauge10, { stringValue(AUXin10Alias) },  int,     "%d", { (caninput_sel10b != 0)}
   entry = auxin_gauge11, { stringValue(AUXin11Alias) },  int,     "%d", { (caninput_sel11b != 0)}
   entry = outputsStatus0, { stringValue(prgm_out00Alias)},    int,     "%d", { (outputPin[0] != 0)}
   entry = outputsStatus1, { stringValue(prgm_out01Alias)},    int,     "%d", { (outputPin[1] != 0)}
   entry = outputsStatus2, { stringValue(prgm_out02Alias)},    int,     "%d", { (outputPin[2] != 0)}
   entry = outputsStatus3, { stringValue(prgm_out03Alias)},    int,     "%d", { (outputPin[3] != 0)}
   entry = outputsStatus4, { stringValue(prgm_out04Alias)},    int,     "%d", { (outputPin[4] != 0)}
   entry = outputsStatus5, { stringValue(prgm_out05Alias)},    int,     "%d", { (outputPin[5] != 0)}
   entry = outputsStatus6, { stringValue(prgm_out06Alias)},    int,     "%d", { (outputPin[6] != 0)}
   entry = outputsStatus7, { stringValue(prgm_out07Alias)},    int,     "%d", { (outputPin[7] != 0)}

   entry = advance1,         "Avance 1",      int,     "%d"
   entry = advance2,         "Avance 2",      int,     "%d"
   entry = emap,             "EMAP",           int,     "%d", { useEMAP }
   entry = fuelLoad,         "Charge injection",       float,   "%.1f"
   entry = ignLoad,          "Charge allumage",    float,   "%.1f"


[LoggerDefinition]
    ; valid logger types: composite, tooth, trigger, csv

    ;loggerDef = uniqueName, Display Name, type
    loggerDef = tooth, "Tooth Logger", tooth
       ;dataReadCommand = "r\\x00\\xf4\\x00\\x00\\x04\\x00" ; standard TS command format
       startCommand = "H"
       stopCommand = "h"
       ;dataReadCommand = "T" ; Basic TS command format
       dataReadCommand = "T\$tsCanId\x01\xFC\x00\x01\xFC" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
       dataReadTimeout = 5000 ; time in ms
       continuousRead = true
       dataReadyCondition = { toothLog1Ready == 1 }
       dataLength =  508; in bytes, including headers, footers and data (not used). 4 bytes * 127 entries
       ;dataLength = 128 ; in bytes, including headers, footers and data (not used)

       ;recordDef = headerLen. footerLen, recordLen
       recordDef =   0,   0,   4; in bytes, the recordLen is for each record, currently limited to 4 bytes

       ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition
       recordField = toothTime,         "ToothTime",     0,          32,       1.0,    "uS"

    loggerDef = compositeLogger, "Composite Logger", composite
        startCommand = "J"
        stopCommand = "j"
        ;dataReadCommand = "T" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadCommand = "T\$tsCanId\x00\x00\x00\x02\x7B" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadTimeout = 50000 ; time in ms
        dataReadyCondition = { toothLog1Ready == 1 }
        continuousRead = true
        dataLength =  508; in bytes, including headers, footers and data (not used). 4 bytes * 127 entries (TOOTH_LOG_SIZE)

        ;recordDef = headerLen. footerLen, recordLen
        recordDef =   0,   0,   5; in bytes, the recordLen is for each record, currently limited to 4 bytes

        ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition
        recordField = priLevel,          "PriLevel",     0,          1,          1.0,    "Flag"
        recordField = secLevel,          "SecLevel",     1,          1,          1.0,    "Flag"
        recordField = trigger,           "Trigger",      2,          1,          1.0,    "Flag"
        recordField = sync,              "Sync",         3,          1,          1.0,    "Flag"
        recordField = refTime,           "RefTime",      8,          32,         0.001,  "ms"

        ; hidden calcField serves as intermediate variable
        calcField = maxTime,               "MaxTime",   "ms",  { maxValue(refTime) }, hidden

        calcField = toothTime,           "ToothTime",    "ms",       { refTime - pastValue(refTime, 1) }
        ;recordField = time,                "Time",       24,         16,         1.0,    "ms"
        calcField = time,                "Time",   "ms",  { refTime }

[ReferenceTables]
#if NEW_COMMS
    tableWriteCommand     = "t\$tsCanId%2i%2o%2c%v"; "t%2i%2o%2c%v";      "t\x01\xFC\x00\x01\xFC"    "t\%2i%2o%2c%v"
  #if mcu_stm32
    tableBlockingFactor   = 64
  #else
    tableBlockingFactor   = 256
  #endif
#endif
    referenceTable = std_ms2gentherm, "Calibration des sondes de temperatures"
      topicHelp = "https://wiki.matzs.com/en/configuration/Sensor_Calibration"
      tableIdentifier = 000, "Capteur d'EAU", 001, "Capteur d'AIR", 003, "Capteur de temperature Libre"
      ; tableLimits (optional) = intentifier, min, max, defaultVal 
      ; will set the default value if value is outside the min and max limits.
      tableLimits = 000, -40, 350, 180 ;Coolant
      tableLimits = 001, -40, 350, 70  ;IAT
      ;Table 002 is AFR
      tableLimits = 003, -40, 400, 70 ; Not currently used
      
      adcCount            = 32  ; length of the table
      bytesPerAdc         = 2     ; using shorts
      scale               = 10    ; scale by 10 before sending to controller
      ;tableGenerator = Generator type, Label 
      tableGenerator  = thermGenerator, "Valeurs de resistances"
      tableGenerator  = fileBrowseGenerator, "Utiliser un type de sonde"
      ; thermOption       = name,             resistor bias,  tempPoint1(C),  resPoint1,  tempPoint2, resPoint2, tempPoint3, resPoint3
      thermOption         = "GM",             2490,           -40,            100700,     30,         2238,       99,         177
      thermOption         = "Chrysler 85 up", 2490,           5.5,            24500,      30.5,       8100,       88.3,       850
      thermOption         = "Ford",           2490,           0,              94000,      50,         11000,      98,         2370
      thermOption         = "Bosch",    2490,           0,              5800,       80,         320,        100,        180
	  thermOption         = "PSA EAU (1 Broches)",    2490,       0,              11000,       90,         320,        110,        180
      thermOption         = "PSA AIR (1 Broches)",    2490,       0,              12500,       100,        320,        120,        180	
      thermOption         = "PSA EAU (3 Broches)",    2490,       0,              11000,       80,         600,        100,        310
      thermOption         = "PSA AIR (3 Broches)",    2490,       0,              12500,       100,        320,        120,        180	  
      thermOption         = "Mazda",          50000,          -40,            2022088,    21,         68273,      99,         3715
      thermOption         = "Mitsu",          2490,           -40,            100490,     30,         1875,       99,         125
      thermOption         = "Toyota",         2490,           -40,            101890,     30,         2268,       99,         156
      thermOption         = "RX-7_CLT(S4 & S5)", 2490,        -20,            16200,      20,         2500,       80,         300
      thermOption         = "RX-7_MAT",       42200,          20,             41500,      50,         11850,      85,         3500
      thermOption         = "VW L-Jet Cylinder Head Temp Sensor II", 1100, -13.888, 11600,53.888,     703,        95.555,     207
      thermOption         = "RX-7_AFM(S5 in AFM)", 2490,      -20,            16200,      20,         2500,       80,         300
      thermOption         = "BMW E30 325i",   2490,           -10,            9300,       20,         2500,       80,         335
      solution        = "Generateur 3 point presonnalise",          thermGenerator
      solution        = "Utiliser un fichier personnalise",    fileBrowseGenerator

    referenceTable = std_ms2geno2, "Calibration Lambda/AFR"
      topicHelp           = "https://wiki.matzs.com/en/configuration/Sensor_Calibration"
      tableIdentifier     = 002, "Table AFR"
      adcCount            = 1024   ; length of the table
      bytesPerAdc         = 1   ; using bytes
      scale               = 10 ; scale by 10 before sending to controller
      ;tableGenerator  = Generator Type,     Label, xUnits, yUnits,  xLow, xHi,  yLow, yHi
      tableGenerator  = linearGenerator, "Calibrage Lambda", "Volts","AFR",    1,   4,   9.7,  18.7
      tableGenerator  = fileBrowseGenerator, "Utiliser un fichier personnalise"

      solutionsLabel = "Sonde Lambda"
      solution  = " ",                                { } ; blank row in case no match found. Must reman at top.
      solution  = "Bande Etroite",                       { table(adcValue*5/1023 , "nb.inc") } ;     
      solution  = "14Point7",                         { 10.0001 + ( adcValue * 0.0097752 )} ; 10.0001 causes 1 adc to round different for unique match.
      solution  = "AEM Linear AEM-30-42xx",           { 9.72 + (adcValue * 0.0096665) } ; 9.72:1 - 19.60:1
      solution  = "AEM Linear (30-2310 & 30-4900)",   { 7.3125 + (adcValue * 0.0116080) } ; 7.31:1 - 19.18:1
      solution  = "Autometer 0V=10:1, 4V=16:1",       { 10 + (adcValue * 0.0073313783) }
      solution  = "Ballenger AFR500 0V=9:1, 5V=16:1", { 9 + (adcValue * 0.00684262) }
      solution  = "Ballenger AFR500 0V=6:1, 5V=20:1", { 6 + (adcValue * 0.01368524) }
      solution  = "Daytona TwinTec",                  { 10.01 + (adcValue    * 0.0097752) }
      solution  = "DIY-EFI TinyWB",                   { 10.0001 + ( adcValue * 0.0097752 )} ; Same as 14point7 units
      solution  = "DynoJet Wideband Commander",       { adcValue    * 0.00784325 + 10 }
      solution  = "F.A.S.T. Wideband",                { adcValue    * 0.01357317 + 9.6 } ; 838.8608
      solution  = "FJO WB",                           { table(adcValue*5/1023 , "fjoWB.inc" ) }
      solution  = "Fueltech WB-02 Nano Anhydr. Eth.", { 5.11043 + (adcValue * 0.997826) }
      solution  = "Fueltech WB-02 Nano Hydr. Ethan.", { 4.74685 + (adcValue * 0.927739) }
      solution  = "Fueltech WB-02 Nano Gasoline",     { 8.37391 + (adcValue * 0.00796111) }
      solution  = "Fueltech WB-02 Nano Methanol",     { 3.65652 + (adcValue * 0.00350289) }
      solution  = "Innovate LC-1 / LC-2 Default",     { 7.35 + (adcValue    * 0.01470186 )}
      solution  = "Innovate / PLX 0.0-5.0 10:1-20:1", { 10 + (adcValue    * 0.0097752)}
      solution  = "Innovate 1.0-2.0",                 { adcValue * 0.049025}
      solution  = "LambdaBoy",                        { table(adcValue*5/1023 , "lambdaBoy.inc" ) }
      solution  = "NGK Powerdex",                     { 9 + ( adcValue * 0.0068359375 ) }
      solution  = "ODG Wideband - Faixa 1",           { 8.3470 + (adcValue * 0.00795792) }
      solution  = "ODG Wideband - Faixa 2",           { 9.1447 + (adcValue * 0.01013714) }
      solution  = "TechEdge DIY Non-Linear",          { table(adcValue*5/1023 , "TechEdge_DIYwbo2.inc") }
      solution  = "TechEdge Linear",                  { adcValue    * 0.0097752 + 9 }
      solution  = "Zeitronix - Non Linear",           { table(adcValue*5/1023 , "zeitronix.inc") }
      solution  = "Zeitronix - Linear Default",       { 9.6 + (adcValue    * 0.0097752) }

      solution  = "Large Bande personnelle",                 linearGenerator
      solution  = "Utiliser un fichier personnalise",                  fileBrowseGenerator

[Tools]
  ;addTool = toolName, PanelName
  addTool = veTableGenerator, "Generateur de Table injection", veTableTbl1
  addTool = afrTableGenerator, "Generateur de Table AFR", afrTable1Tbl


[VeAnalyze]
           ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
	; Table 1	   
#if LAMBDA
     veAnalyzeMap = veTableTbl1, afrTable1Tbl, lambda, egoCorrection
#else
     veAnalyzeMap = veTableTbl1, afrTable1Tbl, afr, egoCorrection
#endif
     lambdaTargetTables = afrTable1Tbl, afrTSCustom
	 
	   ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
       ; filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
       ; filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels
         filter = std_DeadLambda ; Auto build

#if CELSIUS
         filter = minCltFilter, "Minimum EAU", coolant,       <       , 68,       , true
#else
         filter = minCltFilter, "Minimum EAU", coolant,       <       , 155,      , true
#endif
         filter = accelFilterTp, "TP Accel Enrich"  , TPSdot,         >     , 50,       , true
         filter = accelFilterMap,"MAP Accel Enrich" , MAPdot,         >     , 200,       , true
         filter = tBrakeFilter,  "T-Brake/Launch"  , clunch,         &     ,   1,      , true
         filter = spkCutFilter,  "Protection moteur"  , engineProtectStatus,         >     ,   0,      , true
         filter = fuelCutFilter,  "Fuel Cut"  , DFCOOn,         &     ,   1,      , true
         filter = overrunFilter, "Hors Plage"    , pulseWidth,  =       , 0,        , false
         filter = std_Custom ; Standard Custom Expression Filter.
		 
    ; Table 2		 
#if LAMBDA
	 veAnalyzeMap = veTable2Tbl, afrTable1Tbl, lambda, egoCorrection, {fuel2Mode>0}
#else
	 veAnalyzeMap = veTable2Tbl, afrTable1Tbl, afr, egoCorrection, {fuel2Mode>0}
#endif
     lambdaTargetTables = afrTable1Tbl, afrTSCustom
	 
	   ; filter =  Name,        "DisplayName", outputChannel, operator, defaultVal, userAdjustable
       ; filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
       ; filter = maxRPMFilter, "Maximum RPM", rpm,           >       , 18000,    , true	 
         filter = std_xAxisMin ; Auto build with appropriate axis channels
         filter = std_xAxisMax ; Auto build with appropriate axis channels
         filter = std_yAxisMin ; Auto build with appropriate axis channels
         filter = std_yAxisMax ; Auto build with appropriate axis channels
         filter = std_DeadLambda ; Auto build

#if CELSIUS
         filter = minCltFilter, "Minimum EAU", coolant,       <       , 68,       , true
#else
         filter = minCltFilter, "Minimum EAU", coolant,       <       , 155,      , true
#endif
         filter = accelFilterTp, "TP Accel Enrich"  , TPSdot,         >     , 50,       , true
         filter = accelFilterMap,"MAP Accel Enrich" , MAPdot,         >     , 200,       , true
         filter = tBrakeFilter,  "T-Brake/Launch"  , clunch,         &     ,   1,      , true
         filter = spkCutFilter,  "Protection moteur"  , engineProtectStatus,         >     ,   0,      , true
         filter = fuelCutFilter,  "Fuel Cut"  , DFCOOn,         &     ,   1,      , true
         filter = overrunFilter, "Hors Plage"    , pulseWidth,  =       , 0,        , false
         filter = std_Custom ; Standard Custom Expression Filter.
		 
[WueAnalyze]
; wueCurveName, afrTempCompensationCurve, lambdaTargetTableName, lambdaChannel, coolantTempChannel, wueChannel, egoCorrectionChannel, activeCondition
#if LAMBDA
     wueAnalyzeMap = warmup_analyzer_curve, warmup_afr_curve, afrTable1Tbl, lambda, coolant, warmupEnrich, egoCorrection
#else
     wueAnalyzeMap = warmup_analyzer_curve, warmup_afr_curve, afrTable1Tbl, afr, coolant, warmupEnrich, egoCorrection
#endif
     lambdaTargetTables = afrTable1Tbl, afrTSCustom
     filter = std_DeadLambda ; Auto build
     filter = accelFilterTp, "TP Accel Enrich"  , TPSdot,         >     , 50,       , true
     filter = accelFilterMap,"MAP Accel Enrich" , MAPdot,         >     , 200,       , true
     filter = maxTPS,        "Max TPS",              throttle,       >,    15,        true
     filter = minRPM,        "Min RPM",              rpm,            <,    600,       true
     filter = std_Custom ; Standard Custom Expression Filter.
